/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,13],$V2=[1,9],$V3=[1,12],$V4=[1,15],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,19],$V9=[1,20],$Va=[1,11],$Vb=[2,5,9,15,19,24,26,29,30,31,32,33,35],$Vc=[1,29],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,51],$Vl=[8,16,17],$Vm=[1,61],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[16,22,36,37,38,46,47],$Vs=[22,47],$Vt=[16,22,36,37,46,47],$Vu=[2,17],$Vv=[1,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IDENTIFICADORES":7,"COMA":8,"IDENTIFICADOR":9,"IMPRIMIR":10,"WHILEINS":11,"ASIGNACION":12,"IFINS":13,"DECLARACION":14,"INVALID":15,"PTCOMA":16,"IGUAL":17,"EXPRESION":18,"RESWHILE":19,"PARABRE":20,"EXPRESION_LOGICA":21,"PARCIERRA":22,"LLAVIZQ":23,"LLAVDER":24,"SIMPLEIF":25,"RESIF":26,"ELSEIFSINS":27,"RESELSE":28,"INT":29,"DOUBLE":30,"BOOLEAN":31,"CHAR":32,"STRING":33,"IMPRIMIBLE":34,"RESPRINT":35,"MAS":36,"MENOS":37,"POR":38,"ENTERO":39,"DECIMAL":40,"CADENA":41,"CARACTER":42,"TRUE":43,"FALSE":44,"EXPRESION_RELACIONAL":45,"MAYOR_QUE":46,"OR":47,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"COMA",9:"IDENTIFICADOR",15:"INVALID",16:"PTCOMA",17:"IGUAL",19:"RESWHILE",20:"PARABRE",22:"PARCIERRA",23:"LLAVIZQ",24:"LLAVDER",26:"RESIF",28:"RESELSE",29:"INT",30:"DOUBLE",31:"BOOLEAN",32:"CHAR",33:"STRING",35:"RESPRINT",36:"MAS",37:"MENOS",38:"POR",39:"ENTERO",40:"DECIMAL",41:"CADENA",42:"CARACTER",43:"TRUE",44:"FALSE",46:"MAYOR_QUE",47:"OR"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[12,4],[11,7],[13,1],[13,12],[25,7],[27,3],[27,2],[14,5],[14,5],[14,5],[14,5],[14,5],[14,3],[14,3],[14,3],[14,3],[14,3],[34,1],[34,1],[10,5],[18,3],[18,3],[18,3],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[45,3],[21,3],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
            returnInstruction: $$[$0-1].returnInstruction, 
            nodeInstruction: (new Nodo("INIT")).generateProduction([$$[$0-1].nodeInstruction, 'EOF'])            
        };
    
break;
case 2:
        
        this.$={
            returnInstruction: [...$$[$0-1].returnInstruction, $$[$0].returnInstruction], 
            nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0-1].nodeInstruction,  $$[$0].nodeInstruction]) 
        };
    
break;
case 3:

        this.$={
            returnInstruction: [$$[$0].returnInstruction],
            nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0].nodeInstruction])
        };
    
break;
case 4:

        this.$={
            returnInstruction: [...$$[$0-2].returnInstruction, $$[$0].returnInstruction], 
            nodeInstruction: (new Nodo('DECLARACION_MULTIPLE')).generateProduction([$$[$0-2].nodeInstruction, (new Nodo('IDENTIFICADOR')).generateProduction([$$[$0]])])
        }
    
break;
case 5:

        this.$ = {
                returnInstruction: [$$[$0]],
                nodeInstruction: (new Nodo('IDENTIFICADOR')).generateProduction([$$[$0]])
            }
        
break;
case 6: case 10:

        this.$={
            returnInstruction: $$[$0].returnInstruction, 
            nodeInstruction: (new Nodo("INSTRUCCION")).generateProduction([$$[$0].nodeInstruction]) 
        };
    
break;
case 7: case 8: case 9: case 30: case 31:
this.$=$$[$0];
break;
case 11:
controller.listaErrores.push(new errores.default('ERROR LEXICO',$$[$0],_$[$0].first_line,_$[$0].first_column));
break;
case 12:
controller.listaErrores.push(new errores.default(`ERROR SINTACTICO`,"Se esperaba token",_$[$0-1].first_line,_$[$0-1].first_column));
break;
case 13:
this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 14:
this.$ = new mientras.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 15: case 45:
this.$ = $$[$0];
break;
case 16:
this.$=new ifIns.default($$[$0-9],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 17:
this.$=new ifIns.default($$[$0-4],$$[$0-1], undefined, undefined, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 18:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 19:
this.$=[$$[$0]];;
break;
case 20:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.ENTERO), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3].nodeInstruction, 'igual', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 21:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.DECIMAL), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'igual', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 22:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.BOOLEAN), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'igual', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 23:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.CARACTER), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'igual', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 24:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.CADENA), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'igual', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 25:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.ENTERO),  new nativo.default(new Tipo.default(Tipo.DataType.ENTERO), 0, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['0']), 'ptcoma'])
        }
    
break;
case 26:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.DECIMAL),  new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL), 0.0, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['0.0']), 'ptcoma'])
        }
    
break;
case 27:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.BOOLEAN),  new nativo.default(new Tipo.default(Tipo.DataType.boolean), true, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['true']), 'ptcoma'])
        }
    
break;
case 28:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.CARACTER),  new nativo.default(new Tipo.default(Tipo.DataType.CARACTER), '0', _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['\'0\'']), 'ptcoma'])
        }
    
break;
case 29:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.CADENA),  new nativo.default(new Tipo.default(Tipo.DataType.CADENA), "", _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['""']), 'ptcoma'])
        }
    
break;
case 32:

        this.$={
            returnInstruction:  new impresion.default($$[$0-2].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column),
            nodeInstruction: (new Nodo('IMPRIMIR')).generateProduction([$$[$0-2].nodeInstruction])
        }

    
break;
case 33:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.SUMA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'SUMA', $$[$0].nodeInstruction])
        }
    
break;
case 34:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.RESTA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MENOS', $$[$0].nodeInstruction])
        }
    
break;
case 35:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'POR', $$[$0].nodeInstruction])
        }
    
break;
case 36:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['IDENTIFICADOR'])
        }
    
break;
case 37:

        // console.log("Encontre un entero-----------------------------------------");
        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['ENTERO'])
        }
    
break;
case 38:

        // console.log("Encontre un decimal-----------------------------------------");
        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['DECIMAL'])
        }
    
break;
case 39:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CADENA'])
        }
    
break;
case 40:

        console.log("Encontre un CARACTER-----------------------------------------");
        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CARACTER'])
        }
    
break;
case 41:

        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.TRUE), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['TRUE'])
        }
    
break;
case 42:

        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.FALSE), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['FALSE'])
        }
    
break;
case 43:
this.$ = new relacional.default(relacional.tipoOp.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 44:
this.$ = new logica.default(logica.tipoOp.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{1:[3]},{2:$V0,5:[1,21],6:22,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},o($Vb,[2,3]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),{16:[1,23]},{20:[1,24]},{20:[1,25]},{17:[1,26]},o($Vb,[2,15]),{20:[1,27]},{7:28,9:$Vc},{7:30,9:$Vc},{7:31,9:$Vc},{7:32,9:$Vc},{7:33,9:$Vc},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,12]),{9:$Vd,18:35,21:36,34:34,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:44},{9:$Vd,18:46,21:45,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:44},{9:$Vd,18:47,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},{9:$Vd,18:46,21:48,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:44},{8:$Vk,16:[1,50],17:[1,49]},o($Vl,[2,5]),{8:$Vk,16:[1,53],17:[1,52]},{8:$Vk,16:[1,55],17:[1,54]},{8:$Vk,16:[1,57],17:[1,56]},{8:$Vk,16:[1,59],17:[1,58]},{22:[1,60]},{22:[2,30],36:$Vm,37:$Vn,38:$Vo,46:$Vp},{22:[2,31],47:$Vq},o($Vr,[2,36]),o($Vr,[2,37]),o($Vr,[2,38]),o($Vr,[2,39]),o($Vr,[2,40]),o($Vr,[2,41]),o($Vr,[2,42]),o($Vs,[2,45]),{22:[1,66],47:$Vq},{36:$Vm,37:$Vn,38:$Vo,46:$Vp},{16:[1,67],36:$Vm,37:$Vn,38:$Vo},{22:[1,68],47:$Vq},{9:$Vd,18:69,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},o($Vb,[2,25]),{9:[1,70]},{9:$Vd,18:71,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},o($Vb,[2,26]),{9:$Vd,18:72,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},o($Vb,[2,27]),{9:$Vd,18:73,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},o($Vb,[2,28]),{9:$Vd,18:74,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},o($Vb,[2,29]),{16:[1,75]},{9:$Vd,18:76,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},{9:$Vd,18:77,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},{9:$Vd,18:78,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},{9:$Vd,18:79,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj},{9:$Vd,18:46,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:80},{23:[1,81]},o($Vb,[2,13]),{23:[1,82]},{16:[1,83],36:$Vm,37:$Vn,38:$Vo},o($Vl,[2,4]),{16:[1,84],36:$Vm,37:$Vn,38:$Vo},{16:[1,85],36:$Vm,37:$Vn,38:$Vo},{16:[1,86],36:$Vm,37:$Vn,38:$Vo},{16:[1,87],36:$Vm,37:$Vn,38:$Vo},o($Vb,[2,32]),o($Vt,[2,33],{38:$Vo}),o($Vt,[2,34],{38:$Vo}),o([16,22,46,47],[2,35],{36:$Vm,37:$Vn,38:$Vo}),o($Vs,[2,43],{36:$Vm,37:$Vn,38:$Vo}),o($Vs,[2,44]),{2:$V0,4:88,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{2:$V0,4:89,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),{2:$V0,6:22,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,24:[1,90],25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{2:$V0,6:22,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,24:[1,91],25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},o($Vb,[2,14]),o($Vb,$Vu,{27:92,28:[1,93]}),{28:[1,94]},{25:95,26:$Vv},{23:[1,97],25:98,26:$Vv},{28:[2,19]},{20:[1,99]},{2:$V0,4:100,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{28:[2,18]},{9:$Vd,18:46,21:101,39:$Ve,40:$Vf,41:$Vg,42:$Vh,43:$Vi,44:$Vj,45:44},{2:$V0,6:22,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,24:[1,102],25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{22:[1,103],47:$Vq},o($Vb,[2,16]),{23:[1,104]},{2:$V0,4:105,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{2:$V0,6:22,9:$V1,10:4,11:5,12:6,13:7,14:8,15:$V2,19:$V3,24:[1,106],25:14,26:$V4,29:$V5,30:$V6,31:$V7,32:$V8,33:$V9,35:$Va},{28:$Vu}],
defaultActions: {21:[2,1],95:[2,19],98:[2,18],106:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const controller = require('../../../controller/parser/parser');
    const errores = require('./Exceptions/Error');
    const nativo = require('./Expresions/Native');
    const aritmetico = require('./Expresions/Aritmetica');
    const relacional = require('./Expresions/Relacional');
    const logica = require('./Expresions/Logica');
    const Tipo = require('./Symbol/Type');
    const impresion = require('./Instructions/Imprimir');    
    const ifIns = require('./Instructions/IfIns');    
    const declaracion = require('./Instructions/Declaracion')
    const mientras = require('./Instructions/Mientras');
    const asignacion = require('./Instructions/Asignacion');
    const { Nodo } = require('./Symbol/Three')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 29;
break;
case 1:return 30;
break;
case 2:return 31;
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 35;
break;
case 6:return 'RESINT'; // replazado
break;
case 7:return 26;
break;
case 8:return 28;
break;
case 9:return 19;
break;
case 10:return 36;
break;
case 11:return 37;
break;
case 12:return 38;
break;
case 13:return 46;
break;
case 14:return 47;
break;
case 15:return 17;
break;
case 16:return 16;
break;
case 17:return 20;
break;
case 18:return 22;
break;
case 19:return 23;
break;
case 20:return 24;
break;
case 21:return 8;
break;
case 22: 
break;
case 23:
break;
case 24:// comentario simple línea
break;
case 25:// comentario multiple líneas
break;
case 26:return 40;
break;
case 27:return 39;
break;
case 28:return 9;
break;
case 29: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 41; 
break;
case 30:return 43;            
break;
case 31:return 44;
break;
case 32:return 42;
break;
case 33:return 5;
break;
case 34:return 15
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:entero\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:"[^\"]*")/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:'[^]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
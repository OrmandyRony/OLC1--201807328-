/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,19],$V2=[1,13],$V3=[1,16],$V4=[1,18],$V5=[1,17],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,15],$Vd=[2,5,9,19,23,28,29,30,33,40,41,42,43,44,45],$Ve=[1,35],$Vf=[1,36],$Vg=[1,34],$Vh=[1,39],$Vi=[26,48,49,50,51,52,53,62,63,64,65,66,67],$Vj=[2,58],$Vk=[1,49],$Vl=[1,48],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,51],$Vt=[20,48,49,50,51,52,53],$Vu=[1,64],$Vv=[2,5,9,19,23,26,28,29,30,33,40,41,42,43,44,45],$Vw=[1,70],$Vx=[8,20,38],$Vy=[20,26],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[20,26,48,49,50,51,52,53,62,63,64,65,66,67,68,69],$VM=[48,49,50,51,52,53,62,63,64,65,66,67],$VN=[20,48,49,50,51,52,53,62,63,64,65,66,67],$VO=[2,5,9,19,20,23,24,28,29,30,33,40,41,42,43,44,45,48,49,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,70],$VP=[20,26,48,49,50,51,52,53,68,69],$VQ=[1,126],$VR=[20,26,48,49,62,63,64,65,66,67,68,69],$VS=[20,26,48,49,50,51,62,63,64,65,66,67,68,69],$VT=[20,26,68,69],$VU=[1,143],$VV=[1,159],$VW=[34,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IDENTIFICADORES":7,"COMA":8,"IDENTIFICADOR":9,"IMPRIMIR":10,"WHILEINS":11,"DO_WHILE_INS":12,"DO_UNTIL_INS":13,"FOR_INS":14,"REASIGNACION":15,"IFINS":16,"DECLARACION":17,"SUGAR_SINTACTIC":18,"INVALID":19,"PTCOMA":20,"INCREMENTO":21,"DECREMENTO":22,"RESWHILE":23,"PARABRE":24,"EXPRESIONES":25,"PARCIERRA":26,"LLAVIZQ":27,"LLAVDER":28,"RES_FOR":29,"RES_DO":30,"RES_UNTIL":31,"SIMPLEIF":32,"RESIF":33,"RESELSE":34,"ELSEIFSINS":35,"SIMPLE_ELIF":36,"RES_ELIF":37,"ASIGNACION":38,"EXPRESION":39,"INT":40,"DOUBLE":41,"BOOLEAN":42,"CHAR":43,"STRING":44,"RESPRINT":45,"EXPRESION_LOGICA":46,"EXPRESION_RELACIONAL":47,"MAS":48,"MENOS":49,"POR":50,"DIVIDIDO":51,"POTENCIA":52,"MODULO":53,"LITERALES":54,"EXPRESION_CADENA":55,"ENTERO":56,"DECIMAL":57,"CADENA":58,"CARACTER":59,"TRUE":60,"FALSE":61,"MAYOR_QUE":62,"MENOR_QUE":63,"MAYOR_IGUAL":64,"MENOR_IGUAL":65,"IGUAL":66,"DIFERENTE":67,"OR":68,"AND":69,"NOT":70,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"COMA",9:"IDENTIFICADOR",19:"INVALID",20:"PTCOMA",21:"INCREMENTO",22:"DECREMENTO",23:"RESWHILE",24:"PARABRE",26:"PARCIERRA",27:"LLAVIZQ",28:"LLAVDER",29:"RES_FOR",30:"RES_DO",31:"RES_UNTIL",33:"RESIF",34:"RESELSE",37:"RES_ELIF",38:"ASIGNACION",40:"INT",41:"DOUBLE",42:"BOOLEAN",43:"CHAR",44:"STRING",45:"RESPRINT",48:"MAS",49:"MENOS",50:"POR",51:"DIVIDIDO",52:"POTENCIA",53:"MODULO",56:"ENTERO",57:"DECIMAL",58:"CADENA",59:"CARACTER",60:"TRUE",61:"FALSE",62:"MAYOR_QUE",63:"MENOR_QUE",64:"MAYOR_IGUAL",65:"MENOR_IGUAL",66:"IGUAL",67:"DIFERENTE",68:"OR",69:"AND",70:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[18,3],[18,3],[18,2],[18,2],[11,7],[14,10],[14,10],[12,9],[13,9],[16,1],[16,11],[16,12],[32,7],[36,7],[35,2],[35,1],[15,4],[17,5],[17,5],[17,5],[17,5],[17,5],[17,3],[17,3],[17,3],[17,3],[17,3],[10,5],[25,1],[25,1],[25,1],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[55,3],[54,0],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[46,3],[46,3],[46,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return {
            returnInstruction: $$[$0-1].returnInstruction, 
            nodeInstruction: (new Nodo("INIT")).generateProduction([$$[$0-1].nodeInstruction, 'EOF'])            
        };
    
break;
case 2:
        
        this.$={
            returnInstruction: [...$$[$0-1].returnInstruction, $$[$0].returnInstruction], 
            nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0-1].nodeInstruction,  $$[$0].nodeInstruction]) 
        };
    
break;
case 3:

        this.$={
            returnInstruction: [$$[$0].returnInstruction],
            nodeInstruction: (new Nodo("Instrucciones")).generateProduction([$$[$0].nodeInstruction])
        };
    
break;
case 4:

        this.$={
            returnInstruction: [...$$[$0-2].returnInstruction, $$[$0].returnInstruction], 
            nodeInstruction: (new Nodo('DECLARACION_MULTIPLE')).generateProduction([$$[$0-2].nodeInstruction, (new Nodo('IDENTIFICADOR')).generateProduction([$$[$0]])])
        }
    
break;
case 5:

        console.log("Un identificador");
        this.$ = {
                returnInstruction: $$[$0],
                nodeInstruction: (new Nodo('IDENTIFICADOR')).generateProduction([$$[$0]])
            }
        
break;
case 6: case 13:

        this.$={
            returnInstruction: $$[$0].returnInstruction, 
            nodeInstruction: (new Nodo("INSTRUCCION")).generateProduction([$$[$0].nodeInstruction]) 
        };
    
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 14: case 45: case 46: case 47:
this.$=$$[$0];
break;
case 15:
controller.listaErrores.push(new errores.default('ERROR LEXICO',$$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 16:
console.log("ERRORES", _$[$0-1].first_line, _$[$0-1].first_column); controller.listaErrores.push(new errores.default(`ERROR SINTACTICO`,"Se esperaba token", _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 17:

        console.log("Azucar++");
        this.$={
            returnInstruction: new sugar.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('Incremento')).generateProduction([$$[$0-2] + "++"])
        }
    
break;
case 18:

        console.log("Azucar");
        this.$={
            returnInstruction: new sugarDecremento.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('Decremento')).generateProduction([$$[$0-2] + "--"])
        }
    
break;
case 19:

        console.log("Azucar++");
        this.$={
            returnInstruction: new sugar.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
            nodeInstruction: (new Nodo('Incremento')).generateProduction([$$[$0-1] + "++"])
        }
    
break;
case 20:

        console.log("Azucar");
        this.$={
            returnInstruction: new sugarDecremento.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column),
            nodeInstruction: (new Nodo('Decremento')).generateProduction([$$[$0-1] + "--"])
        }
    
break;
case 21:

        this.$={
            returnInstruction: new mientras.default($$[$0-4].returnInstruction, $$[$0-1].returnInstruction, _$[$0-6].first_line, _$[$0-6].first_column), 
            nodeInstruction: (new Nodo("WHILE")).generateProduction(["WHILE","(", $$[$0-4].nodeInstruction, ")", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 22:

        console.log("reconi el for--------------------------------------");
        this.$={
            returnInstruction: new cicloFor.default($$[$0-7].returnInstruction, $$[$0-6].returnInstruction, $$[$0-4].returnInstruction, $$[$0-1].returnInstruction, _$[$0-9].first_line, _$[$0-9].first_column), 
            nodeInstruction: (new Nodo("FOR_INS")).generateProduction(["FOR","(", $$[$0-7].nodeInstruction, $$[$0-6].nodeInstruction, $$[$0-4].nodeInstruction,")", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 23:

        console.log("reconi el for REASIGNACION--------------------------------------");
        this.$={
            returnInstruction: new cicloFor.default($$[$0-7].returnInstruction, $$[$0-6].returnInstruction, $$[$0-4].returnInstruction, $$[$0-1].returnInstruction, _$[$0-9].first_line, _$[$0-9].first_column), 
            nodeInstruction: (new Nodo("FOR_INS")).generateProduction(["FOR","(", $$[$0-7].nodeInstruction, $$[$0-6].nodeInstruction, $$[$0-4].nodeInstruction,")", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 24:

        console.log("Detecte un dowhile");
        this.$={
            returnInstruction: new doWhile.default($$[$0-2].returnInstruction, $$[$0-6].returnInstruction, _$[$0-8].first_line, _$[$0-8].first_column), 
            nodeInstruction: (new Nodo("DO_WHILE")).generateProduction(["DO","{", $$[$0-6].nodeInstruction, "}", "WHILE","{", $$[$0-2].nodeInstruction, "}"]) 
        }
    
break;
case 25:

        console.log("Detecte un doUNTIL");
        this.$={
            returnInstruction: new doUntil.default($$[$0-2].returnInstruction, $$[$0-6].returnInstruction, _$[$0-8].first_line, _$[$0-8].first_column), 
            nodeInstruction: (new Nodo("DO_WHILE")).generateProduction(["DO","{", $$[$0-6].nodeInstruction, "}", "UNTIL","{", $$[$0-2].nodeInstruction, "}"]) 
        }
    
break;
case 26:
this.$ = $$[$0];
break;
case 27:

        // console.log("Soy un else if");
        this.$={
            returnInstruction: new ifIns.default($$[$0-8].returnInstruction, $$[$0-5].returnInstruction, undefined, $$[$0-1].returnInstruction, _$[$0-10].first_line, _$[$0-10].first_column), 
            nodeInstruction: (new Nodo("ELSE_IF")).generateProduction(["IF","(", $$[$0-8].nodeInstruction, ")", "{", $$[$0-5].nodeInstruction, "}", "ELSE", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 28:

        // console.log("Soy un else ELIF if");
        // console.log($$[$0-4]);
        this.$={
            returnInstruction: new ifIns.default($$[$0-9].returnInstruction, $$[$0-6].returnInstruction, $$[$0-4].returnInstruction, $$[$0-1].returnInstruction, _$[$0-11].first_line, _$[$0-11].first_column), 
            nodeInstruction: (new Nodo("SIMPLE_IF")).generateProduction(["IF","(", $$[$0-9].nodeInstruction, ")", "{", $$[$0-6].nodeInstruction, "}", $$[$0-4].nodeInstruction, "ELSE", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 29:

        this.$={
            returnInstruction: new ifIns.default($$[$0-4].returnInstruction, $$[$0-1].returnInstruction, undefined, undefined, _$[$0-6].first_line, _$[$0-6].first_column), 
            nodeInstruction: (new Nodo("SIMPLE_IF")).generateProduction(["IF","(", $$[$0-4].nodeInstruction, ")", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 30:


        this.$={
            returnInstruction: new ifIns.default($$[$0-4].returnInstruction, $$[$0-1].returnInstruction, undefined, undefined, _$[$0-6].first_line, _$[$0-6].first_column), 
            nodeInstruction: (new Nodo("SIMPLE_IF")).generateProduction(["ELIF","(", $$[$0-4].nodeInstruction, ")", "{", $$[$0-1].nodeInstruction, "}"]) 
        }
    
break;
case 31:
        
        this.$={
            returnInstruction: [...$$[$0-1].returnInstruction, $$[$0].returnInstruction], 
            nodeInstruction: (new Nodo("SABER")).generateProduction([$$[$0-1].nodeInstruction,  $$[$0].nodeInstruction]) 
        };
    
break;
case 32:

        this.$={
            returnInstruction: [$$[$0].returnInstruction],
            nodeInstruction: (new Nodo("MOTON_ELSE_IF")).generateProduction([$$[$0].nodeInstruction])
        };
    
break;
case 33:

        this.$={
            returnInstruction: new asignacion.default($$[$0-3], $$[$0-1].returnInstruction, _$[$0-3].first_line, _$[$0-3].first_column), 
            nodeInstruction: (new Nodo('REASIGNACION')).generateProduction([$$[$0-3], 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 34:

        console.log("Declarando entero");
        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.ENTERO), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3].nodeInstruction, 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 35:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.DECIMAL), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 36:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.BOOLEAN), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 37:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.CARACTER), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 38:

        this.$={
            returnInstruction: new declaracion.default($$[$0-3].returnInstruction, new Tipo.default(Tipo.DataType.CADENA), $$[$0-1].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-4], $$[$0-3], 'ASIGNACION', $$[$0-1].nodeInstruction, 'ptcoma'])
        }
    
break;
case 39:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.ENTERO),  new nativo.default(new Tipo.default(Tipo.DataType.ENTERO), 0, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['0']), 'ptcoma'])
        }
    
break;
case 40:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.DECIMAL),  new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL), 0.0, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['0.0']), 'ptcoma'])
        }
    
break;
case 41:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.BOOLEAN),  new nativo.default(new Tipo.default(Tipo.DataType.boolean), true, _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['true']), 'ptcoma'])
        }
    
break;
case 42:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.CARACTER),  new nativo.default(new Tipo.default(Tipo.DataType.CARACTER), '0', _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['\'0\'']), 'ptcoma'])
        }
    
break;
case 43:

        this.$={
            returnInstruction: new declaracion.default($$[$0-1].returnInstruction, new Tipo.default(Tipo.DataType.CADENA),  new nativo.default(new Tipo.default(Tipo.DataType.CADENA), "", _$[$0-2].first_line, _$[$0-2].first_column), _$[$0-2].first_line, _$[$0-2].first_column), 
            nodeInstruction: (new Nodo('Declaracion')).generateProduction([$$[$0-2], $$[$0-1], (new Nodo('VALOR_POR_DEFECTO')).generateProduction(['""']), 'ptcoma'])
        }
    
break;
case 44:

        this.$={
            returnInstruction:  new impresion.default($$[$0-2].returnInstruction, _$[$0-4].first_line, _$[$0-4].first_column),
            nodeInstruction: (new Nodo('IMPRIMIR')).generateProduction([$$[$0-2].nodeInstruction])
        }

    
break;
case 48:

         //console.log("declaracion suma");
        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.SUMA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'SUMA', $$[$0].nodeInstruction])
        }
    
break;
case 49:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.RESTA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MENOS', $$[$0].nodeInstruction])
        }
    
break;
case 50:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'POR', $$[$0].nodeInstruction])
        }
    
break;
case 51:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.DIVISION, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'DIVISION', $$[$0].nodeInstruction])
        }
    
break;
case 52:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.POTENCIA, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'POTENCIA', $$[$0].nodeInstruction])
        }
    
break;
case 53:

        this.$={
            returnInstruction: new aritmetico.default(aritmetico.tipoOp.MODULO, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction([$$[$0-2].nodeInstruction, 'MODULO', $$[$0].nodeInstruction])
        }
    
break;
case 54: case 71:
 
        this.$={
            returnInstruction: $$[$0-1].returnInstruction,
            nodeInstruction: $$[$0-1].nodeInstruction
        }
    
break;
case 55:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.IDENTIFICADOR), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['IDENTIFICADOR'])
        }
    
break;
case 56:
this.$=$$[$0]; 
break;
case 59:

        console.log("Encontre un entero-----------------------------------------");
        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['ENTERO'])
        }
    
break;
case 60:

        // console.log("Encontre un decimal-----------------------------------------");
        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['DECIMAL'])
        }
    
break;
case 61:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CADENA'])
        }
    
break;
case 62:

        this.$={
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['CARACTER'])
        }
    
break;
case 63:

        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.TRUE), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['TRUE'])
        }
    
break;
case 64:

        this.$={
            
            returnInstruction: new nativo.default(new Tipo.default(Tipo.DataType.FALSE), $$[$0], _$[$0].first_line, _$[$0].first_column),
            nodeInstruction: (new Nodo('EXPRESION')).generateProduction(['FALSE'])
        }
    
break;
case 65:

        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.MAYOR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'MAYOR_QUE', $$[$0].nodeInstruction])
        }
    
break;
case 66:

        console.log("Detecto una expresion relacional");
        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.MENOR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'MENOR_QUE', $$[$0].nodeInstruction])
        }
    
break;
case 67:

        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.MAYOR_IGUAL, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'MAYOR_IGUAL', $$[$0].nodeInstruction])
        }
    
break;
case 68:

        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.MENOR_IGUAL, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'MENOR_IGUAL', $$[$0].nodeInstruction])
        }
    
break;
case 69:

        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.IGUAL, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'IGUAL', $$[$0].nodeInstruction])
        }
    
break;
case 70:

        this.$={
            returnInstruction: new relacional.default(relacional.tipoOp.DIFERENTE, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_RELACIONAL')).generateProduction([$$[$0-2].nodeInstruction, 'DIFERENTE', $$[$0].nodeInstruction])
        }
    
break;
case 72:

        this.$={
            returnInstruction: new logica.default(logica.tipoOp.OR, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_LOGICA')).generateProduction([$$[$0-2].nodeInstruction, 'OR', $$[$0].nodeInstruction])
        }
    
break;
case 73:

        this.$={
            returnInstruction: new logica.default(logica.tipoOp.AND, $$[$0-2].returnInstruction, $$[$0].returnInstruction, _$[$0-2].first_line, _$[$0-2].first_column),
            nodeInstruction: (new Nodo('EXPRESION_LOGICA')).generateProduction([$$[$0-2].nodeInstruction, 'AND', $$[$0].nodeInstruction])
        }
    
break;
case 74:

        this.$={
            returnInstruction: new logica.default(logica.tipoOp.NOT, null, $$[$0].returnInstruction, _$[$0-1].first_line, _$[$0-1].first_column),
            nodeInstruction: (new Nodo('EXPRESION_LOGICA')).generateProduction(['NOT', $$[$0].nodeInstruction])
        }
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{1:[3]},{2:$V0,5:[1,27],6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($Vd,[2,3]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),{20:[1,29]},{24:[1,30]},{24:[1,31]},{27:[1,32]},{24:[1,33]},{21:$Ve,22:$Vf,38:$Vg},o($Vd,[2,26]),{24:[1,37]},{7:38,9:$Vh},{7:40,9:$Vh},{7:41,9:$Vh},{7:42,9:$Vh},{7:43,9:$Vh},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,16]),o($Vi,$Vj,{25:44,39:45,46:46,47:47,54:50,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),o($Vi,$Vj,{39:45,46:46,47:47,54:50,25:58,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),{2:$V0,4:59,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{9:[1,62],15:61,17:60,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb},o($Vt,$Vj,{54:50,39:63,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($Vv,[2,19],{20:[1,65]}),o($Vv,[2,20],{20:[1,66]}),o($Vi,$Vj,{39:45,46:46,47:47,54:50,25:67,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),{8:$Vw,20:[1,69],38:[1,68]},o($Vx,[2,5]),{8:$Vw,20:[1,72],38:[1,71]},{8:$Vw,20:[1,74],38:[1,73]},{8:$Vw,20:[1,76],38:[1,75]},{8:$Vw,20:[1,78],38:[1,77]},{26:[1,79]},o($Vy,[2,45],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK}),o($Vy,[2,46]),o($Vy,[2,47],{68:[1,92],69:[1,93]}),o($Vi,$Vj,{54:50,39:94,47:95,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,[2,55]),o($VL,[2,56]),o($VM,$Vj,{54:50,47:96,39:97,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),o($VL,[2,63]),o($VL,[2,64]),{26:[1,98]},{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,99],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($VN,$Vj,{39:45,46:46,47:47,54:50,25:100,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),o($VN,$Vj,{39:45,46:46,47:47,54:50,25:101,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),{38:$Vg},{20:[1,102],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},o([26,48,49,50,51,52,53],$Vj,{54:50,39:103,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($Vv,[2,17]),o($Vv,[2,18]),{26:[1,104]},o($Vt,$Vj,{54:50,39:105,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VO,[2,39]),{9:[1,106]},o($Vt,$Vj,{54:50,39:107,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VO,[2,40]),o($VN,$Vj,{39:45,46:46,47:47,54:50,25:108,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),o($VO,[2,41]),o($Vt,$Vj,{54:50,39:109,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VO,[2,42]),o($Vt,$Vj,{54:50,39:110,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VO,[2,43]),{20:[1,111]},o($VL,$Vj,{54:50,39:112,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,$Vj,{54:50,39:113,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,$Vj,{54:50,39:114,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,$Vj,{54:50,39:115,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,$Vj,{54:50,39:116,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VL,$Vj,{54:50,39:117,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:118,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:119,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:120,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:121,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:122,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VP,$Vj,{54:50,39:123,9:$Vk,24:$Vu,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VM,$Vj,{54:50,39:97,47:124,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),o($VM,$Vj,{54:50,39:97,47:125,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr}),{26:$VQ,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{26:[1,127]},o($Vy,[2,74]),{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK},{27:[1,128]},{23:[1,129],31:[1,130]},{20:[1,131]},{20:[1,132]},o($VO,[2,33]),{26:$VQ,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},{27:[1,133]},{20:[1,134],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},o($Vx,[2,4]),{20:[1,135],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},{20:[1,136]},{20:[1,137],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},{20:[1,138],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},o($Vd,[2,44]),o($VR,[2,48],{50:$VB,51:$VC,52:$VD,53:$VE}),o($VR,[2,49],{50:$VB,51:$VC,52:$VD,53:$VE}),o($VS,[2,50],{52:$VD,53:$VE}),o($VS,[2,51],{52:$VD,53:$VE}),o($VL,[2,52]),o($VL,[2,53]),o($VT,[2,65],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($VT,[2,66],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($VT,[2,67],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($VT,[2,68],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($VT,[2,69],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($VT,[2,70],{48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE}),o($Vy,[2,72]),o($Vy,[2,73]),o($VL,[2,54]),o($VT,[2,71]),{2:$V0,4:139,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{24:[1,140]},{24:[1,141]},{9:$VU,18:142},{9:$VU,18:144},{2:$V0,4:145,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($VO,[2,34]),o($VO,[2,35]),o($VO,[2,36]),o($VO,[2,37]),o($VO,[2,38]),{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,146],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($Vi,$Vj,{39:45,46:46,47:47,54:50,25:147,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),o($Vi,$Vj,{39:45,46:46,47:47,54:50,25:148,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),{26:[1,149]},{21:$Ve,22:$Vf},{26:[1,150]},{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,151],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($Vd,[2,21]),{26:[1,152]},{26:[1,153]},{27:[1,154]},{27:[1,155]},o($Vd,[2,29],{35:157,36:158,34:[1,156],37:$VV}),{20:[1,160]},{20:[1,161]},{2:$V0,4:162,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{2:$V0,4:163,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{27:[1,164]},{34:[1,165],36:166,37:$VV},o($VW,[2,32]),{24:[1,167]},o($Vd,[2,24]),o($Vd,[2,25]),{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,168],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,169],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{2:$V0,4:170,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{27:[1,171]},o($VW,[2,31]),o($Vi,$Vj,{39:45,46:46,47:47,54:50,25:172,9:$Vk,24:$Vl,56:$Vm,57:$Vn,58:$Vo,59:$Vp,60:$Vq,61:$Vr,70:$Vs}),o($Vd,[2,22]),o($Vd,[2,23]),{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,173],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{2:$V0,4:174,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{26:[1,175]},o($Vd,[2,27]),{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,176],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{27:[1,177]},o($Vd,[2,28]),{2:$V0,4:178,6:3,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},{2:$V0,6:28,9:$V1,10:4,11:5,12:6,13:7,14:8,15:9,16:10,17:11,18:12,19:$V2,23:$V3,28:[1,179],29:$V4,30:$V5,32:20,33:$V6,40:$V7,41:$V8,42:$V9,43:$Va,44:$Vb,45:$Vc},o($VW,[2,30])],
defaultActions: {27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const controller = require('../../../controller/parser/parser');
    const errores = require('./Exceptions/Error');
    const nativo = require('./Expresions/Native');
    const aritmetico = require('./Expresions/Aritmetica');
    const relacional = require('./Expresions/Relacional');
    const logica = require('./Expresions/Logica');
    const Tipo = require('./Symbol/Type');
    const impresion = require('./Instructions/Imprimir');    
    const ifIns = require('./Instructions/IfIns');    
    const declaracion = require('./Instructions/Declaracion')
    const mientras = require('./Instructions/Mientras');
    const doWhile = require('./Instructions/DoWhile');
    const doUntil = require('./Instructions/DoUntil');
    const cicloFor = require('./Instructions/CicloFor');
    const asignacion = require('./Instructions/Asignacion');
    const sugar = require('./Instructions/SyntacticSugar');
    const sugarDecremento = require('./Instructions/Decremento');
    const { Nodo } = require('./Symbol/Three')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 40;
break;
case 4:return 41;
break;
case 5:return 42;
break;
case 6:return 43;
break;
case 7:return 44;
break;
case 8:return 45;
break;
case 9:return 33;
break;
case 10:return 34;
break;
case 11:return 37;
break;
case 12:return 23;
break;
case 13:return "RES_FOR";
break;
case 14:return "RES_DO";
break;
case 15:return 31;
break;
case 16:return 21;
break;
case 17:return 22;
break;
case 18:return 48;
break;
case 19:return 49;
break;
case 20:return 50;
break;
case 21:return 51;
break;
case 22:return 52;
break;
case 23:return 53;
break;
case 24:return 65;
break;
case 25:return 64;
break;
case 26:return 62;
break;
case 27:return 63;
break;
case 28:return 66;
break;
case 29:return 67;
break;
case 30:return 38;
break;
case 31:return "OR";
break;
case 32:return "AND";
break;
case 33:return "NOT";
break;
case 34:return 20;
break;
case 35:return 24;
break;
case 36:return 26;
break;
case 37:return 27;
break;
case 38:return 28;
break;
case 39:return 8;
break;
case 40: 
break;
case 41:
break;
case 42:return 57;
break;
case 43:return 56;
break;
case 44:return 60;            
break;
case 45:return 61;
break;
case 46:return 9;
break;
case 47: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 48:return 59;
break;
case 49:return 5;
break;
case 50:return 19
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:print(ln)?)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[A-Za-z]+["_"0-9A-Za-z]*)/i,/^(?:"[^]*")/i,/^(?:'[^]')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
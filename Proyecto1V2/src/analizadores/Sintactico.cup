/**
 * Implementacion de la gramatica del pseudo parser, el archivo de disenio esta en Gramatica.md
 * @author ormandyrony
 */
package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;

import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

parser code {:
    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }

:}

/* Terminals */
terminal INICIO, FIN, INGRESAR, COMO, CON_VALOR,  
MAYOR_O_IGUAL, MENOR_O_IGUAL, ES_IGUAL, ES_DIFERENTE, OR, AND, NOT;


terminal ASIGNACION, SEGUN, HACER, INTERROGACION_ABRE, INTERROGACION_CIERRA,
FIN_SEGUN, IMPRIMIR, IMPRIMIR_NL, PARA, HASTA, CON_INCREMENTAL, FIN_PARA, MIENTRAS, FIN_MIENTRAS, 
REPETIR, HASTA_QUE, RETORNAR, METODO, CON_PARAMETROS, FIN_METODO, FUNCION, FIN_FUNCION, EJECUTAR;

terminal String BOOLEAN, NUMERO, CARACTER, CADENA,  MAYOR, MENOR;
terminal String LIT_CADENA;
terminal String LIT_CARACTER;
terminal String LIT_BOOLEAN;
terminal String LIT_NUMERO;
terminal String VARIABLE;
terminal String PUNTO_COMA, PARENTECIS_ABRE, PARENTECIS_CIERRA, SUMA;
terminal String SI, FIN_SI, O_SI, ENTONCES, DE_LO_CONTRARIO;
// Simbolos para operaciones basicas
terminal RESTA, DIVISION, MULTIPLICACION, POTENCIA, MODULO, CORCHETE_ABRE, CORCHETE_CIERRA, COMA;

/* Non terminals */
non terminal iniciar;
non terminal Produccion lista_instrucciones;
non terminal declaracion;
non terminal Produccion instrucciones; 
non terminal asignacion, condicionales, casos, ciclos;
non terminal Produccion expresion;
non terminal Produccion litCadena;
non terminal Produccion var;
non terminal Produccion expresion_relacional;
non terminal Produccion imprimir;
non terminal Produccion osi;
non terminal Produccion literales;
non terminal String tipo_dato; 
/*test*/
/*
non terminal declaracion1, var, tipo_valor, retorno, metodo, funciones, ejecutar;
*/
/* Precedences */

precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

/* The grammar rules */
start with iniciar;


iniciar ::= INICIO lista_instrucciones:a FIN    {:                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                :}
            | INICIO FIN {: System.out.println("No hay intrucciones que procesar."); :}
;

lista_instrucciones ::= lista_instrucciones:a instrucciones:b   {: 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                :}
                    | instrucciones:a {: 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        :} 
;

instrucciones ::=
    INGRESAR var:v COMO tipo_dato:tp CON_VALOR  expresion:e PUNTO_COMA {: 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        :} 
    /*Condicionales*/                                           
    | SI expresion_relacional:a ENTONCES lista_instrucciones:b FIN_SI {:
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                :}

    | SI expresion_relacional:e ENTONCES lista_instrucciones:l osi:o DE_LO_CONTRARIO lista_instrucciones:l2 FIN_SI {:
                                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                                        RESULT.addHijo("Si");
                                                                                                                        RESULT.addHijo(e);
                                                                                                                        RESULT.addHijo("Entonces");
                                                                                                                        RESULT.addHijo(l);
                                                                                                                        RESULT.addHijo(o);
                                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                                        RESULT.addHijo(l2);
                                                                                                                    :}

    | imprimir:a {: RESULT = new Produccion(new Nodo("Imprimir"), 
                                        new Imprimir((Operacion)a.getInstruccion()));
                                        RESULT.addHijo(a);
                :}
;

tipo_dato ::= BOOLEAN:b {:RESULT = b;:}
            | NUMERO:n  {:RESULT = n;:}
            | CARACTER:car {:RESULT = car;:}
            | CADENA:cad {:RESULT = cad;:}
;

literales ::= LIT_NUMERO:a {: 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        :}
            | LIT_CADENA:c  {: 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            :}
            | LIT_CARACTER:ca   {: 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                :}
            | LIT_BOOLEAN:b {: 
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            :}
;

var ::= var:v COMA VARIABLE:vu {:
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                :}
    | VARIABLE:v     {: 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    :}
;

osi ::= osi:o O_SI expresion_relacional:e ENTONCES lista_instrucciones:i  {:
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    :}

    | O_SI expresion_relacional:e ENTONCES lista_instrucciones:i        {:
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    :}
;


imprimir ::=  IMPRIMIR LIT_CADENA:a PUNTO_COMA  {:
                                                    RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.CADENA));
                                                :}
;





expresion ::= expresion:a SUMA expresion:b {:
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            :}
            | expresion:a RESTA expresion:b {:
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            :}

            | expresion:a MULTIPLICACION expresion:b {:
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            :}

            | expresion:a DIVISION expresion:b {:
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            :}

            | PARENTECIS_ABRE expresion:e PARENTECIS_CIERRA {:
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            :} 
            | literales:li {:
                                RESULT = li;
                            :}
;


expresion_relacional ::= expresion:a MAYOR expresion:b {:
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                        :}
;
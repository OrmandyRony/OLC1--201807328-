
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\005\007\000\002\005\012\000\002\005\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\014\005\000\002\014\003" +
    "\000\002\017\007\000\002\017\006\000\002\016\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\003\000\002\015" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\004\005\001\002\000\004\002\101\001" +
    "\002\000\012\005\012\006\010\026\013\066\011\001\002" +
    "\000\012\005\100\006\010\026\013\066\011\001\002\000" +
    "\020\005\ufffd\006\ufffd\026\ufffd\066\ufffd\067\ufffd\070\ufffd" +
    "\072\ufffd\001\002\000\004\061\064\001\002\000\014\055" +
    "\021\056\022\057\025\060\023\063\017\001\002\000\004" +
    "\002\uffff\001\002\000\004\055\015\001\002\000\020\005" +
    "\ufff9\006\ufff9\026\ufff9\066\ufff9\067\ufff9\070\ufff9\072\ufff9" +
    "\001\002\000\004\062\016\001\002\000\020\005\uffec\006" +
    "\uffec\026\uffec\066\uffec\067\uffec\070\uffec\072\uffec\001\002" +
    "\000\014\055\021\056\022\057\025\060\023\063\017\001" +
    "\002\000\004\071\041\001\002\000\022\053\ufff3\062\ufff3" +
    "\064\ufff3\065\ufff3\071\ufff3\073\ufff3\074\ufff3\075\ufff3\001" +
    "\002\000\022\053\ufff2\062\ufff2\064\ufff2\065\ufff2\071\ufff2" +
    "\073\ufff2\074\ufff2\075\ufff2\001\002\000\022\053\ufff4\062" +
    "\ufff4\064\ufff4\065\ufff4\071\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\001\002\000\022\053\uffe6\062\uffe6\064\uffe6\065\uffe6\071" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\001\002\000\022\053\ufff1" +
    "\062\ufff1\064\ufff1\065\ufff1\071\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\001\002\000\014\053\033\065\031\073\027\074\032" +
    "\075\030\001\002\000\014\055\021\056\022\057\025\060" +
    "\023\063\017\001\002\000\014\055\021\056\022\057\025" +
    "\060\023\063\017\001\002\000\014\055\021\056\022\057" +
    "\025\060\023\063\017\001\002\000\014\055\021\056\022" +
    "\057\025\060\023\063\017\001\002\000\014\055\021\056" +
    "\022\057\025\060\023\063\017\001\002\000\014\065\031" +
    "\071\uffe5\073\027\074\032\075\030\001\002\000\022\053" +
    "\uffe8\062\uffe8\064\uffe8\065\uffe8\071\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\001\002\000\022\053\uffeb\062\uffeb\064\uffeb\065" +
    "\uffeb\071\uffeb\073\uffeb\074\032\075\030\001\002\000\022" +
    "\053\uffe9\062\uffe9\064\uffe9\065\uffe9\071\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\001\002\000\022\053\uffea\062\uffea\064\uffea" +
    "\065\uffea\071\uffea\073\uffea\074\032\075\030\001\002\000" +
    "\010\006\010\026\013\066\011\001\002\000\014\006\010" +
    "\026\013\066\011\067\043\070\045\001\002\000\020\005" +
    "\ufffb\006\ufffb\026\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb" +
    "\001\002\000\020\005\ufffe\006\ufffe\026\ufffe\066\ufffe\067" +
    "\ufffe\070\ufffe\072\ufffe\001\002\000\014\055\021\056\022" +
    "\057\025\060\023\063\017\001\002\000\006\070\050\072" +
    "\047\001\002\000\010\006\010\026\013\066\011\001\002" +
    "\000\014\055\021\056\022\057\025\060\023\063\017\001" +
    "\002\000\004\071\052\001\002\000\010\006\010\026\013" +
    "\066\011\001\002\000\014\006\010\026\013\066\011\070" +
    "\uffee\072\uffee\001\002\000\012\006\010\026\013\066\011" +
    "\067\055\001\002\000\020\005\ufffa\006\ufffa\026\ufffa\066" +
    "\ufffa\067\ufffa\070\ufffa\072\ufffa\001\002\000\004\071\057" +
    "\001\002\000\010\006\010\026\013\066\011\001\002\000" +
    "\014\006\010\026\013\066\011\070\uffed\072\uffed\001\002" +
    "\000\014\064\062\065\031\073\027\074\032\075\030\001" +
    "\002\000\022\053\uffe7\062\uffe7\064\uffe7\065\uffe7\071\uffe7" +
    "\073\uffe7\074\uffe7\075\uffe7\001\002\000\006\007\066\102" +
    "\065\001\002\000\006\007\uffef\102\uffef\001\002\000\004" +
    "\061\077\001\002\000\012\047\072\050\067\051\071\052" +
    "\073\001\002\000\004\010\ufff7\001\002\000\004\010\074" +
    "\001\002\000\004\010\ufff6\001\002\000\004\010\ufff8\001" +
    "\002\000\004\010\ufff5\001\002\000\014\055\021\056\022" +
    "\057\025\060\023\063\017\001\002\000\014\062\076\065" +
    "\031\073\027\074\032\075\030\001\002\000\020\005\ufffc" +
    "\006\ufffc\026\ufffc\066\ufffc\067\ufffc\070\ufffc\072\ufffc\001" +
    "\002\000\006\007\ufff0\102\ufff0\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\005\005\006\016\013\001\001\000\006\005\043" +
    "\016\013\001\001\000\002\001\001\000\004\014\062\001" +
    "\001\000\010\012\025\015\017\020\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\060\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\037\020\023\001\001\000\006\012" +
    "\036\020\023\001\001\000\006\012\035\020\023\001\001" +
    "\000\006\012\034\020\023\001\001\000\006\012\033\020" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\041\005\006\016\013\001\001\000\010\005\043\016\013" +
    "\017\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\025\015\055\020\023\001\001\000\002\001\001" +
    "\000\010\003\053\005\006\016\013\001\001\000\010\012" +
    "\025\015\050\020\023\001\001\000\002\001\001\000\010" +
    "\003\052\005\006\016\013\001\001\000\006\005\043\016" +
    "\013\001\001\000\006\005\043\016\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\057\005\006\016" +
    "\013\001\001\000\006\005\043\016\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\074\020\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;
		 System.out.println("No hay intrucciones que procesar."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= INGRESAR var COMO tipo_dato CON_VALOR expresion PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= SI expresion_relacional ENTONCES lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= SI expresion_relacional ENTONCES lista_instrucciones osi DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                                        RESULT.addHijo("Si");
                                                                                                                        RESULT.addHijo(e);
                                                                                                                        RESULT.addHijo("Entonces");
                                                                                                                        RESULT.addHijo(l);
                                                                                                                        RESULT.addHijo(o);
                                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                                        RESULT.addHijo(l2);
                                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= imprimir 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Produccion(new Nodo("Imprimir"), 
                                        new Imprimir((Operacion)a.getInstruccion()));
                                        RESULT.addHijo(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = car;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // literales ::= LIT_NUMERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // literales ::= LIT_CADENA 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literales ::= LIT_CARACTER 
            {
              Produccion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literales ::= LIT_BOOLEAN 
            {
              Produccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // var ::= var COMA VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // var ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // osi ::= osi O_SI expresion_relacional ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // osi ::= O_SI expresion_relacional ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // imprimir ::= IMPRIMIR LIT_CADENA PUNTO_COMA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.CADENA));
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion SUMA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion RESTA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion DIVISION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= PARENTECIS_ABRE expresion PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= literales 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = li;
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_relacional ::= expresion MAYOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import Estructuras.Instrucciones.ImprimirSaltoLinea;
import Estructuras.Instrucciones.Segun;
import Estructuras.Instrucciones.Mientras;
import Estructuras.Instrucciones.Para;
import Estructuras.Instrucciones.Repetir;
import Estructuras.Instrucciones.Metodo;
import Estructuras.Instrucciones.Funcion;
import Estructuras.Instrucciones.Ejecutar;
import java.util.ArrayList;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\012\000" +
    "\002\004\011\000\002\004\007\000\002\004\012\000\002" +
    "\004\007\000\002\004\006\000\002\004\013\000\002\004" +
    "\012\000\002\004\015\000\002\004\006\000\002\004\005" +
    "\000\002\004\006\000\002\004\012\000\002\004\007\000" +
    "\002\004\013\000\002\004\012\000\002\004\016\000\002" +
    "\004\007\000\002\004\010\000\002\004\003\000\002\004" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\006\005\000\002" +
    "\006\003\000\002\017\006\000\002\017\004\000\002\020" +
    "\005\000\002\020\003\000\002\011\007\000\002\011\006" +
    "\000\002\016\010\000\002\016\007\000\002\010\005\000" +
    "\002\010\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\007" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\004\005\001\002\000\004\002\305\001" +
    "\002\000\036\003\023\005\026\006\010\020\006\025\012" +
    "\026\020\027\015\033\025\035\022\037\016\042\027\044" +
    "\013\061\014\066\021\001\002\000\020\017\064\055\053" +
    "\056\062\057\060\060\063\061\055\063\054\001\002\000" +
    "\064\003\ufffd\005\ufffd\006\ufffd\020\ufffd\022\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\061\ufffd\066\ufffd\067\ufffd\070\ufffd\072\ufffd\001" +
    "\002\000\004\061\014\001\002\000\064\003\uffe6\005\uffe6" +
    "\006\uffe6\020\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\061\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\072\uffe6\001\002\000\020\017\064" +
    "\055\053\056\062\057\060\060\063\061\055\063\054\001" +
    "\002\000\004\061\241\001\002\000\010\007\uffdb\046\uffdb" +
    "\102\uffdb\001\002\000\004\061\223\001\002\000\004\061" +
    "\212\001\002\000\036\003\023\005\211\006\010\020\006" +
    "\025\012\026\020\027\015\033\025\035\022\037\016\042" +
    "\027\044\013\061\014\066\021\001\002\000\020\017\064" +
    "\055\053\056\062\057\060\060\063\061\055\063\054\001" +
    "\002\000\020\017\064\055\053\056\062\057\060\060\063" +
    "\061\055\063\054\001\002\000\036\003\023\006\010\020" +
    "\006\025\012\026\020\027\015\033\025\035\022\036\160" +
    "\037\016\042\027\044\013\061\014\066\021\001\002\000" +
    "\064\003\uffe5\005\uffe5\006\uffe5\020\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\061\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\001" +
    "\002\000\006\046\153\102\152\001\002\000\020\017\064" +
    "\055\053\056\062\057\060\060\063\061\055\063\054\001" +
    "\002\000\004\002\uffff\001\002\000\004\061\030\001\002" +
    "\000\012\047\034\050\031\051\033\052\035\001\002\000" +
    "\044\003\uffe3\006\uffe3\010\uffe3\020\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\033\uffe3\035\uffe3\037\uffe3\040\uffe3\042\uffe3\044" +
    "\uffe3\061\uffe3\064\uffe3\066\uffe3\102\uffe3\001\002\000\036" +
    "\003\023\006\010\020\006\025\012\026\020\027\015\033" +
    "\025\035\022\037\016\040\037\042\027\044\013\061\014" +
    "\066\021\001\002\000\044\003\uffe2\006\uffe2\010\uffe2\020" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\035\uffe2\037\uffe2" +
    "\040\uffe2\042\uffe2\044\uffe2\061\uffe2\064\uffe2\066\uffe2\102" +
    "\uffe2\001\002\000\044\003\uffe4\006\uffe4\010\uffe4\020\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\033\uffe4\035\uffe4\037\uffe4\040" +
    "\uffe4\042\uffe4\044\uffe4\061\uffe4\064\uffe4\066\uffe4\102\uffe4" +
    "\001\002\000\044\003\uffe1\006\uffe1\010\uffe1\020\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\033\uffe1\035\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\044\uffe1\061\uffe1\064\uffe1\066\uffe1\102\uffe1\001" +
    "\002\000\040\003\023\006\010\020\006\025\012\026\020" +
    "\027\015\033\025\035\022\037\016\042\027\043\140\044" +
    "\013\045\141\061\014\066\021\001\002\000\004\063\040" +
    "\001\002\000\004\061\042\001\002\000\006\064\045\102" +
    "\044\001\002\000\012\047\034\050\031\051\033\052\035" +
    "\001\002\000\006\064\uffd9\102\uffd9\001\002\000\004\061" +
    "\136\001\002\000\034\003\023\006\010\020\006\025\012" +
    "\026\020\027\015\033\025\035\022\037\016\042\027\044" +
    "\013\061\014\066\021\001\002\000\040\003\023\006\010" +
    "\020\006\025\012\026\020\027\015\033\025\035\022\037" +
    "\016\042\027\043\050\044\013\045\051\061\014\066\021" +
    "\001\002\000\064\003\ufffe\005\ufffe\006\ufffe\020\ufffe\022" +
    "\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\032\ufffe\033\ufffe" +
    "\034\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\045\ufffe\061\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\072\ufffe\001\002\000\064\003\uffeb\005\uffeb\006\uffeb\020" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\061\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\072\uffeb\001\002\000\020\017\064\055\053\056" +
    "\062\057\060\060\063\061\055\063\054\001\002\000\076" +
    "\003\uffcf\005\uffcf\006\uffcf\020\uffcf\021\uffcf\022\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\061\uffcf\062\uffcf\064\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\102\uffcf\001\002\000\142\003" +
    "\uffdf\005\uffdf\006\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\053\uffdf\054\uffdf\061\uffdf" +
    "\062\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf" +
    "\101\uffdf\102\uffdf\001\002\000\016\055\053\056\062\057" +
    "\060\060\063\061\055\063\054\001\002\000\142\003\uffc5" +
    "\005\uffc5\006\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\053\uffc5\054\uffc5\061\uffc5\062" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\101" +
    "\uffc5\102\uffc5\001\002\000\102\003\uffce\005\uffce\006\uffce" +
    "\015\130\016\127\020\uffce\021\uffce\022\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\061\uffce\062\uffce\064\uffce\066\uffce\067\uffce\070\uffce" +
    "\071\uffce\072\uffce\102\uffce\001\002\000\126\003\uffd0\005" +
    "\uffd0\006\uffd0\011\102\012\074\013\075\014\073\020\uffd0" +
    "\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\053\077\054\072\061" +
    "\uffd0\062\uffd0\064\uffd0\065\071\066\uffd0\067\uffd0\070\uffd0" +
    "\071\uffd0\072\uffd0\073\103\074\101\075\076\076\070\077" +
    "\100\102\uffd0\001\002\000\142\003\uffdd\005\uffdd\006\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\053\uffdd\054\uffdd\061\uffdd\062\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\001" +
    "\002\000\004\062\125\001\002\000\142\003\uffde\005\uffde" +
    "\006\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\041\uffde\042\uffde\043\uffde" +
    "\044\uffde\045\uffde\053\uffde\054\uffde\061\uffde\062\uffde\064" +
    "\uffde\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\077\uffde\101\uffde\102" +
    "\uffde\001\002\000\142\003\uffe0\005\uffe0\006\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0" +
    "\053\uffe0\054\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\001\002\000" +
    "\016\055\053\056\062\057\060\060\063\061\055\063\054" +
    "\001\002\000\142\003\uffc6\005\uffc6\006\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\053" +
    "\uffc6\054\uffc6\061\uffc6\062\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6\001\002\000\076" +
    "\003\uffbb\005\uffbb\006\uffbb\020\uffbb\021\uffbb\022\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\061\uffbb\062\uffbb\064\uffbb\066\uffbb\067\uffbb" +
    "\070\uffbb\071\uffbb\072\uffbb\102\uffbb\001\002\000\032\011" +
    "\102\012\074\013\075\014\073\053\077\054\072\065\071" +
    "\073\103\074\101\075\076\076\070\077\100\001\002\000" +
    "\004\100\122\001\002\000\016\055\053\056\062\057\060" +
    "\060\063\061\055\063\104\001\002\000\016\055\053\056" +
    "\062\057\060\060\063\061\055\063\104\001\002\000\016" +
    "\055\053\056\062\057\060\060\063\061\055\063\104\001" +
    "\002\000\016\055\053\056\062\057\060\060\063\061\055" +
    "\063\104\001\002\000\016\055\053\056\062\057\060\060" +
    "\063\061\055\063\104\001\002\000\016\055\053\056\062" +
    "\057\060\060\063\061\055\063\104\001\002\000\016\055" +
    "\053\056\062\057\060\060\063\061\055\063\104\001\002" +
    "\000\016\055\053\056\062\057\060\060\063\061\055\063" +
    "\104\001\002\000\016\055\053\056\062\057\060\060\063" +
    "\061\055\063\104\001\002\000\016\055\053\056\062\057" +
    "\060\060\063\061\055\063\104\001\002\000\016\055\053" +
    "\056\062\057\060\060\063\061\055\063\104\001\002\000" +
    "\016\055\053\056\062\057\060\060\063\061\055\063\104" +
    "\001\002\000\142\003\uffcc\005\uffcc\006\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\053" +
    "\uffcc\054\uffcc\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\101\075" +
    "\076\076\070\077\100\101\uffcc\102\uffcc\001\002\000\020" +
    "\064\107\065\071\073\103\074\101\075\076\076\070\077" +
    "\100\001\002\000\142\003\uffc7\005\uffc7\006\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\053\uffc7\054\uffc7\061\uffc7\062\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\075\uffc7\076\uffc7\077\uffc7\101\uffc7\102\uffc7\001\002\000" +
    "\116\003\uffc2\005\uffc2\006\uffc2\015\uffc2\016\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\061\uffc2\062\uffc2\064" +
    "\uffc2\065\071\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2" +
    "\073\103\074\101\075\076\076\070\077\100\102\uffc2\001" +
    "\002\000\142\003\uffca\005\uffca\006\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\053\uffca" +
    "\054\uffca\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\070\077\100\101\uffca\102\uffca\001\002\000\142\003" +
    "\uffc9\005\uffc9\006\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\053\uffc9\054\uffc9\061\uffc9" +
    "\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\101\uffc9\102\uffc9\001\002\000\116\003\uffc4\005\uffc4\006" +
    "\uffc4\015\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\061\uffc4\062\uffc4\064\uffc4\065\071\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\103\074\101\075\076" +
    "\076\070\077\100\102\uffc4\001\002\000\142\003\uffcb\005" +
    "\uffcb\006\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\053\uffcb\054\uffcb\061\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072" +
    "\uffcb\073\uffcb\074\uffcb\075\uffcb\076\070\077\100\101\uffcb" +
    "\102\uffcb\001\002\000\116\003\uffc0\005\uffc0\006\uffc0\015" +
    "\uffc0\016\uffc0\020\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\061\uffc0\062\uffc0\064\uffc0\065\071\066\uffc0\067\uffc0\070" +
    "\uffc0\071\uffc0\072\uffc0\073\103\074\101\075\076\076\070" +
    "\077\100\102\uffc0\001\002\000\116\003\uffc1\005\uffc1\006" +
    "\uffc1\015\uffc1\016\uffc1\020\uffc1\021\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\061\uffc1\062\uffc1\064\uffc1\065\071\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\073\103\074\101\075\076" +
    "\076\070\077\100\102\uffc1\001\002\000\116\003\uffbf\005" +
    "\uffbf\006\uffbf\015\uffbf\016\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\061\uffbf\062\uffbf\064\uffbf\065\071\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\103\074\101" +
    "\075\076\076\070\077\100\102\uffbf\001\002\000\116\003" +
    "\uffc3\005\uffc3\006\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\061\uffc3\062\uffc3\064\uffc3\065" +
    "\071\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\103" +
    "\074\101\075\076\076\070\077\100\102\uffc3\001\002\000" +
    "\142\003\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\053\uffcd\054\uffcd" +
    "\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\101\075\076\076\070" +
    "\077\100\101\uffcd\102\uffcd\001\002\000\016\055\053\056" +
    "\062\057\060\060\063\061\055\063\104\001\002\000\020" +
    "\065\071\073\103\074\101\075\076\076\070\077\100\101" +
    "\124\001\002\000\142\003\uffc8\005\uffc8\006\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\053\uffc8\054\uffc8\061\uffc8\062\uffc8\064\uffc8\065\uffc8\066" +
    "\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8" +
    "\075\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8\001\002\000" +
    "\004\043\126\001\002\000\064\003\uffe9\005\uffe9\006\uffe9" +
    "\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\061\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\072\uffe9\001\002\000\016\055\053\056\062" +
    "\057\060\060\063\061\055\063\054\001\002\000\016\055" +
    "\053\056\062\057\060\060\063\061\055\063\054\001\002" +
    "\000\076\003\uffbc\005\uffbc\006\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\061\uffbc\062\uffbc\064\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\102\uffbc\001\002\000" +
    "\076\003\uffbd\005\uffbd\006\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\061\uffbd\062\uffbd\064\uffbd\066\uffbd\067" +
    "\uffbd\070\uffbd\071\uffbd\072\uffbd\102\uffbd\001\002\000\004" +
    "\064\135\001\002\000\034\011\102\012\074\013\075\014" +
    "\073\053\077\054\072\064\107\065\071\073\103\074\101" +
    "\075\076\076\070\077\100\001\002\000\102\003\uffbe\005" +
    "\uffbe\006\uffbe\015\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\061\uffbe\062\uffbe\064\uffbe\066\uffbe\067" +
    "\uffbe\070\uffbe\071\uffbe\072\uffbe\102\uffbe\001\002\000\012" +
    "\047\034\050\031\051\033\052\035\001\002\000\006\064" +
    "\uffda\102\uffda\001\002\000\064\003\uffec\005\uffec\006\uffec" +
    "\020\uffec\022\uffec\024\uffec\025\uffec\026\uffec\027\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\061\uffec\066\uffec\067" +
    "\uffec\070\uffec\072\uffec\001\002\000\020\017\064\055\053" +
    "\056\062\057\060\060\063\061\055\063\054\001\002\000" +
    "\004\062\143\001\002\000\004\043\144\001\002\000\064" +
    "\003\uffea\005\uffea\006\uffea\020\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\061\uffea\066\uffea\067\uffea\070\uffea\072\uffea\001\002" +
    "\000\004\021\146\001\002\000\036\003\023\006\010\020" +
    "\006\025\012\026\020\027\015\033\025\034\147\035\022" +
    "\037\016\042\027\044\013\061\014\066\021\001\002\000" +
    "\064\003\ufff4\005\ufff4\006\ufff4\020\ufff4\022\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4" +
    "\045\ufff4\061\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\001" +
    "\002\000\036\003\023\006\010\020\006\025\012\026\020" +
    "\027\015\033\025\034\151\035\022\037\016\042\027\044" +
    "\013\061\014\066\021\001\002\000\064\003\ufff5\005\ufff5" +
    "\006\ufff5\020\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\061\ufff5\066" +
    "\ufff5\067\ufff5\070\ufff5\072\ufff5\001\002\000\004\061\156" +
    "\001\002\000\016\055\053\056\062\057\060\060\063\061" +
    "\055\063\104\001\002\000\020\062\155\065\071\073\103" +
    "\074\101\075\076\076\070\077\100\001\002\000\064\003" +
    "\ufffb\005\ufffb\006\ufffb\020\ufffb\022\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb" +
    "\061\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb\001\002\000" +
    "\010\007\uffdc\046\uffdc\102\uffdc\001\002\000\036\003\023" +
    "\006\010\020\006\025\012\026\020\027\015\033\025\035" +
    "\022\036\162\037\016\042\027\044\013\061\014\066\021" +
    "\001\002\000\020\017\064\055\053\056\062\057\060\060" +
    "\063\061\055\063\054\001\002\000\064\003\uffef\005\uffef" +
    "\006\uffef\020\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\061\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\001\002\000\020\017\064" +
    "\055\053\056\062\057\060\060\063\061\055\063\054\001" +
    "\002\000\064\003\ufff0\005\ufff0\006\ufff0\020\ufff0\022\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\061\ufff0\066\ufff0\067\ufff0\070\ufff0\072" +
    "\ufff0\001\002\000\004\071\165\001\002\000\034\003\023" +
    "\006\010\020\006\025\012\026\020\027\015\033\025\035" +
    "\022\037\016\042\027\044\013\061\014\066\021\001\002" +
    "\000\042\003\023\006\010\020\006\025\012\026\020\027" +
    "\015\033\025\035\022\037\016\042\027\044\013\061\014" +
    "\066\021\067\172\070\167\072\171\001\002\000\020\017" +
    "\064\055\053\056\062\057\060\060\063\061\055\063\054" +
    "\001\002\000\006\070\176\072\175\001\002\000\034\003" +
    "\023\006\010\020\006\025\012\026\020\027\015\033\025" +
    "\035\022\037\016\042\027\044\013\061\014\066\021\001" +
    "\002\000\064\003\ufffa\005\ufffa\006\ufffa\020\ufffa\022\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\061\ufffa\066\ufffa\067\ufffa\070\ufffa\072" +
    "\ufffa\001\002\000\036\003\023\006\010\020\006\025\012" +
    "\026\020\027\015\033\025\035\022\037\016\042\027\044" +
    "\013\061\014\066\021\067\174\001\002\000\064\003\ufff8" +
    "\005\ufff8\006\ufff8\020\ufff8\022\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\037\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\061" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\072\ufff8\001\002\000\034" +
    "\003\023\006\010\020\006\025\012\026\020\027\015\033" +
    "\025\035\022\037\016\042\027\044\013\061\014\066\021" +
    "\001\002\000\020\017\064\055\053\056\062\057\060\060" +
    "\063\061\055\063\054\001\002\000\004\071\200\001\002" +
    "\000\034\003\023\006\010\020\006\025\012\026\020\027" +
    "\015\033\025\035\022\037\016\042\027\044\013\061\014" +
    "\066\021\001\002\000\040\003\023\006\010\020\006\025" +
    "\012\026\020\027\015\033\025\035\022\037\016\042\027" +
    "\044\013\061\014\066\021\070\uffd6\072\uffd6\001\002\000" +
    "\036\003\023\006\010\020\006\025\012\026\020\027\015" +
    "\033\025\035\022\037\016\042\027\044\013\061\014\066" +
    "\021\067\203\001\002\000\064\003\ufff9\005\ufff9\006\ufff9" +
    "\020\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\061\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\072\ufff9\001\002\000\004\071\205\001\002" +
    "\000\034\003\023\006\010\020\006\025\012\026\020\027" +
    "\015\033\025\035\022\037\016\042\027\044\013\061\014" +
    "\066\021\001\002\000\040\003\023\006\010\020\006\025" +
    "\012\026\020\027\015\033\025\035\022\037\016\042\027" +
    "\044\013\061\014\066\021\070\uffd5\072\uffd5\001\002\000" +
    "\004\062\210\001\002\000\064\003\uffd1\005\uffd1\006\uffd1" +
    "\020\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\061\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\072\uffd1\001\002\000\004\002\000\001\002" +
    "\000\036\003\023\006\010\020\006\025\012\026\020\027" +
    "\015\033\025\035\022\037\016\040\214\042\027\044\013" +
    "\061\014\066\021\001\002\000\036\003\023\006\010\020" +
    "\006\025\012\026\020\027\015\033\025\035\022\037\016" +
    "\041\222\042\027\044\013\061\014\066\021\001\002\000" +
    "\004\063\215\001\002\000\004\061\042\001\002\000\006" +
    "\064\217\102\044\001\002\000\034\003\023\006\010\020" +
    "\006\025\012\026\020\027\015\033\025\035\022\037\016" +
    "\042\027\044\013\061\014\066\021\001\002\000\036\003" +
    "\023\006\010\020\006\025\012\026\020\027\015\033\025" +
    "\035\022\037\016\041\221\042\027\044\013\061\014\066" +
    "\021\001\002\000\064\003\uffed\005\uffed\006\uffed\020\uffed" +
    "\022\uffed\024\uffed\025\uffed\026\uffed\027\uffed\032\uffed\033" +
    "\uffed\034\uffed\035\uffed\036\uffed\037\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\061\uffed\066\uffed\067\uffed\070" +
    "\uffed\072\uffed\001\002\000\064\003\uffee\005\uffee\006\uffee" +
    "\020\uffee\022\uffee\024\uffee\025\uffee\026\uffee\027\uffee\032" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\061\uffee\066\uffee\067" +
    "\uffee\070\uffee\072\uffee\001\002\000\004\046\224\001\002" +
    "\000\016\055\053\056\062\057\060\060\063\061\055\063" +
    "\104\001\002\000\020\030\226\065\071\073\103\074\101" +
    "\075\076\076\070\077\100\001\002\000\016\055\053\056" +
    "\062\057\060\060\063\061\055\063\104\001\002\000\022" +
    "\021\230\031\231\065\071\073\103\074\101\075\076\076" +
    "\070\077\100\001\002\000\036\003\023\006\010\020\006" +
    "\025\012\026\020\027\015\032\236\033\025\035\022\037" +
    "\016\042\027\044\013\061\014\066\021\001\002\000\016" +
    "\055\053\056\062\057\060\060\063\061\055\063\104\001" +
    "\002\000\020\021\233\065\071\073\103\074\101\075\076" +
    "\076\070\077\100\001\002\000\034\003\023\006\010\020" +
    "\006\025\012\026\020\027\015\033\025\035\022\037\016" +
    "\042\027\044\013\061\014\066\021\001\002\000\036\003" +
    "\023\006\010\020\006\025\012\026\020\027\015\032\235" +
    "\033\025\035\022\037\016\042\027\044\013\061\014\066" +
    "\021\001\002\000\064\003\ufff1\005\ufff1\006\ufff1\020\ufff1" +
    "\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\044\ufff1\045\ufff1\061\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\072\ufff1\001\002\000\064\003\ufff2\005\ufff2\006\ufff2" +
    "\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\061\ufff2\066\ufff2\067" +
    "\ufff2\070\ufff2\072\ufff2\001\002\000\036\003\023\006\010" +
    "\020\006\025\012\026\020\027\015\032\240\033\025\035" +
    "\022\037\016\042\027\044\013\061\014\066\021\001\002" +
    "\000\064\003\ufff3\005\ufff3\006\ufff3\020\ufff3\022\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\061\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3" +
    "\001\002\000\004\063\242\001\002\000\022\017\064\055" +
    "\053\056\062\057\060\060\063\061\055\063\054\064\243" +
    "\001\002\000\004\062\252\001\002\000\006\064\247\102" +
    "\246\001\002\000\006\064\uffd7\102\uffd7\001\002\000\020" +
    "\017\064\055\053\056\062\057\060\060\063\061\055\063" +
    "\054\001\002\000\004\062\250\001\002\000\064\003\uffe7" +
    "\005\uffe7\006\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\061" +
    "\uffe7\066\uffe7\067\uffe7\070\uffe7\072\uffe7\001\002\000\006" +
    "\064\uffd8\102\uffd8\001\002\000\064\003\uffe8\005\uffe8\006" +
    "\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\061\uffe8\066\uffe8" +
    "\067\uffe8\070\uffe8\072\uffe8\001\002\000\004\062\254\001" +
    "\002\000\064\003\uffd2\005\uffd2\006\uffd2\020\uffd2\022\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\061\uffd2\066\uffd2\067\uffd2\070\uffd2\072" +
    "\uffd2\001\002\000\006\007\256\102\152\001\002\000\012" +
    "\047\034\050\031\051\033\052\035\001\002\000\004\010" +
    "\260\001\002\000\020\017\064\055\053\056\062\057\060" +
    "\060\063\061\055\063\054\001\002\000\004\062\262\001" +
    "\002\000\064\003\ufffc\005\ufffc\006\ufffc\020\ufffc\022\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\061\ufffc\066\ufffc\067\ufffc\070\ufffc\072" +
    "\ufffc\001\002\000\004\021\264\001\002\000\004\022\266" +
    "\001\002\000\010\022\275\024\274\072\273\001\002\000" +
    "\016\055\053\056\062\057\060\060\063\061\055\063\104" +
    "\001\002\000\020\023\270\065\071\073\103\074\101\075" +
    "\076\076\070\077\100\001\002\000\004\071\271\001\002" +
    "\000\034\003\023\006\010\020\006\025\012\026\020\027" +
    "\015\033\025\035\022\037\016\042\027\044\013\061\014" +
    "\066\021\001\002\000\042\003\023\006\010\020\006\022" +
    "\uffd3\024\uffd3\025\012\026\020\027\015\033\025\035\022" +
    "\037\016\042\027\044\013\061\014\066\021\072\uffd3\001" +
    "\002\000\004\071\302\001\002\000\064\003\ufff7\005\ufff7" +
    "\006\ufff7\020\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\061\ufff7\066" +
    "\ufff7\067\ufff7\070\ufff7\072\ufff7\001\002\000\016\055\053" +
    "\056\062\057\060\060\063\061\055\063\104\001\002\000" +
    "\020\023\277\065\071\073\103\074\101\075\076\076\070" +
    "\077\100\001\002\000\004\071\300\001\002\000\034\003" +
    "\023\006\010\020\006\025\012\026\020\027\015\033\025" +
    "\035\022\037\016\042\027\044\013\061\014\066\021\001" +
    "\002\000\042\003\023\006\010\020\006\022\uffd4\024\uffd4" +
    "\025\012\026\020\027\015\033\025\035\022\037\016\042" +
    "\027\044\013\061\014\066\021\072\uffd4\001\002\000\034" +
    "\003\023\006\010\020\006\025\012\026\020\027\015\033" +
    "\025\035\022\037\016\042\027\044\013\061\014\066\021" +
    "\001\002\000\036\003\023\006\010\020\006\024\304\025" +
    "\012\026\020\027\015\033\025\035\022\037\016\042\027" +
    "\044\013\061\014\066\021\001\002\000\064\003\ufff6\005" +
    "\ufff6\006\ufff6\020\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\061\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\072\ufff6\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\016\004\006\006\023\010\010\001\001\000\014" +
    "\005\056\007\055\012\064\014\262\015\051\001\001\000" +
    "\002\001\001\000\004\006\254\001\001\000\002\001\001" +
    "\000\014\005\056\007\055\012\064\014\252\015\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\046\006\023\010\010\001" +
    "\001\000\014\005\056\007\055\012\064\014\206\015\051" +
    "\001\001\000\014\005\056\007\055\012\064\014\163\015" +
    "\051\001\001\000\012\003\156\004\006\006\023\010\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\056\007\055\012\064\014\144\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\031\001\001\000" +
    "\002\001\001\000\012\003\035\004\006\006\023\010\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\046\006\023\010\010\001\001\000\002" +
    "\001\001\000\004\017\040\001\001\000\002\001\001\000" +
    "\004\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\045\004\006\006\023\010\010\001\001\000" +
    "\010\004\046\006\023\010\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\056\007\055\012\064\014" +
    "\060\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\133\007\132\012\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\066\007\065\012\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\120\012\064\001\001\000\006\005\117\012\064" +
    "\001\001\000\006\005\116\012\064\001\001\000\006\005" +
    "\115\012\064\001\001\000\006\005\114\012\064\001\001" +
    "\000\006\005\113\012\064\001\001\000\006\005\112\012" +
    "\064\001\001\000\006\005\111\012\064\001\001\000\006" +
    "\005\110\012\064\001\001\000\006\005\107\012\064\001" +
    "\001\000\006\005\104\012\064\001\001\000\006\005\105" +
    "\012\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\122\012\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\066\007\131\012\064\001\001\000" +
    "\010\005\066\007\130\012\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\056\007\055\012\064\014" +
    "\141\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\147\004" +
    "\006\006\023\010\010\001\001\000\002\001\001\000\010" +
    "\004\046\006\023\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\153\012\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\046\006\023\010\010\001\001\000\014\005\056\007\055" +
    "\012\064\014\160\015\051\001\001\000\002\001\001\000" +
    "\014\005\056\007\055\012\064\014\162\015\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\165\004" +
    "\006\006\023\010\010\001\001\000\012\004\046\006\023" +
    "\010\010\011\167\001\001\000\014\005\056\007\055\012" +
    "\064\014\203\015\051\001\001\000\002\001\001\000\012" +
    "\003\172\004\006\006\023\010\010\001\001\000\002\001" +
    "\001\000\010\004\046\006\023\010\010\001\001\000\002" +
    "\001\001\000\012\003\201\004\006\006\023\010\010\001" +
    "\001\000\014\005\056\007\055\012\064\014\176\015\051" +
    "\001\001\000\002\001\001\000\012\003\200\004\006\006" +
    "\023\010\010\001\001\000\010\004\046\006\023\010\010" +
    "\001\001\000\010\004\046\006\023\010\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\205\004\006" +
    "\006\023\010\010\001\001\000\010\004\046\006\023\010" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\212\004\006\006\023\010\010\001" +
    "\001\000\010\004\046\006\023\010\010\001\001\000\002" +
    "\001\001\000\004\017\215\001\001\000\002\001\001\000" +
    "\012\003\217\004\006\006\023\010\010\001\001\000\010" +
    "\004\046\006\023\010\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\224\012\064" +
    "\001\001\000\002\001\001\000\006\005\226\012\064\001" +
    "\001\000\002\001\001\000\012\003\236\004\006\006\023" +
    "\010\010\001\001\000\006\005\231\012\064\001\001\000" +
    "\002\001\001\000\012\003\233\004\006\006\023\010\010" +
    "\001\001\000\010\004\046\006\023\010\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\046\006\023" +
    "\010\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\056\007\055\012\064\014\244\015\051\020\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\056\007\055\012\064\014\250\015\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\256\001\001\000\002\001" +
    "\001\000\014\005\056\007\055\012\064\014\260\015\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\264\001\001\000\002\001\001\000\006" +
    "\005\266\012\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\271\004\006\006\023\010\010\001\001" +
    "\000\010\004\046\006\023\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\275\012\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\300\004" +
    "\006\006\023\010\010\001\001\000\010\004\046\006\023" +
    "\010\010\001\001\000\012\003\302\004\006\006\023\010" +
    "\010\001\001\000\010\004\046\006\023\010\010\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    public ArrayList<ErrorLexico> ErroresSintacticos = new ArrayList(); 
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            ErroresSintacticos.add(new ErrorLexico("Sintáctico", "Token no válido detectado: " +  s.value , s.left + "", s.right + ""));
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;
		 System.out.println("No hay intrucciones que procesar."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= INGRESAR var COMO tipo_dato CON_VALOR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Asignacion"), 
                                                                                new Asignacion(v.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                RESULT.addHijo(v);
                                                                RESULT.addHijo(a);
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(";");
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones osi DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                            RESULT.addHijo("Si");
                                                                                                            RESULT.addHijo(e);
                                                                                                            RESULT.addHijo("Entonces");
                                                                                                            RESULT.addHijo(l);
                                                                                                            RESULT.addHijo(o);
                                                                                                            RESULT.addHijo("DeLoContrario");
                                                                                                            RESULT.addHijo(l2);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), l2.getInstrucciones()));
                                                                                                        RESULT.addHijo("Si");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                        RESULT.addHijo(l2);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= SEGUN expresiones HACER casos FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Segun"), 
                                                            new Segun((Operacion)e.getInstruccion(), c.getInstrucciones()));
                                                    RESULT.addHijo("segun");
                                                    RESULT.addHijo(e);
                                                    RESULT.addHijo("Hacer");
                                                    RESULT.addHijo(c);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= SEGUN expresiones HACER casos DE_LO_CONTRARIO ENTONCES lista_instrucciones FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT = new Produccion(new Nodo("Segun"),
                                                                                                        new Segun((Operacion)e.getInstruccion(), c.getInstrucciones(), l.getInstrucciones()));
                                                                                                    RESULT.addHijo("segun");
                                                                                                    RESULT.addHijo(e);
                                                                                                    RESULT.addHijo("Hacer");
                                                                                                    RESULT.addHijo(c);
                                                                                                    RESULT.addHijo("DeLoContrario");
                                                                                                    RESULT.addHijo(l);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= MIENTRAS expresiones HACER lista_instrucciones FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Mientras"),
                                                                                new Mientras((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                            //RESULT.addHijo("Mientras");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo("Hacer");
                                                                            RESULT.addHijo(l);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= MIENTRAS expresiones HACER FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                        RESULT = new Produccion(new Nodo("Mientras"), 
                                                                new Mientras((Operacion)e.getInstruccion()));
                                                        RESULT.addHijo(e);
                                                        RESULT.addHijo("Hacer");
                                                    
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Para"),
                                                                                                            new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), l.getInstrucciones()));
                                                                                                        //RESULT.addHijo("Mientras");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Hasta");
                                                                                                        RESULT.addHijo(eh);
                                                                                                        RESULT.addHijo("Hacer");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                    RESULT = new Produccion(new Nodo("Para"),
                                                                                        new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion()));                                                                        
                                                                                    RESULT.addHijo(e);
                                                                                    RESULT.addHijo("Hasta");
                                                                                    RESULT.addHijo(eh);
                                                                                    RESULT.addHijo("Hacer");
                                                                            
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion CON_INCREMENTAL expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion incremento = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                            RESULT = new Produccion(new Nodo("Para"),
                                                                                                                                new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), (Operacion)incremento.getInstruccion(), li.getInstrucciones()));                                                                        
                                                                                                                            RESULT.addHijo(e);
                                                                                                                            RESULT.addHijo("Hasta");
                                                                                                                            RESULT.addHijo(eh);
                                                                                                                            RESULT.addHijo("Con_Incremento");
                                                                                                                            RESULT.addHijo(incremento);
                                                                                                                            RESULT.addHijo("Hacer");
                                                                                                                            RESULT.addHijo(li);
                                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= REPETIR lista_instrucciones HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Repetir"),
                                                                new Repetir(li.getInstrucciones(), (Operacion)e.getInstruccion()));                                                                        
                                                            RESULT.addHijo(li);
                                                            RESULT.addHijo("Hasta_Que");
                                                            RESULT.addHijo(e);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= REPETIR HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                        RESULT = new Produccion(new Nodo("Repetir"),
                                            new Repetir((Operacion)e.getInstruccion()));                                                                        
                                        RESULT.addHijo("Hasta_Que");
                                        RESULT.addHijo(e);
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciones ::= METODO VARIABLE lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Metodo"),
                                                                    new Metodo(v, li.getInstrucciones()));
                                                                RESULT.addHijo(v);                                                                        
                                                                RESULT.addHijo(li);
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= METODO VARIABLE CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                    RESULT = new Produccion(new Nodo("Metodo"),
                                                                                                                                        new Metodo(v, lp.getInstrucciones(), li.getInstrucciones()));  
                                                                                                                                    RESULT.addHijo(v);
                                                                                                                                    RESULT.addHijo("(");
                                                                                                                                    RESULT.addHijo(lp);
                                                                                                                                    RESULT.addHijo(")");                                                                      
                                                                                                                                    RESULT.addHijo(li);
                                                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= FUNCION VARIABLE tipo_dato lista_instrucciones FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Funcion"),
                                                                                new Funcion(v, li.getInstrucciones()));
                                                                            RESULT.addHijo(v);                                                                        
                                                                            RESULT.addHijo(li);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= FUNCION VARIABLE tipo_dato CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Funciones"),
                                                                                                                new Funcion(v, lp.getInstrucciones(), li.getInstrucciones()));  
                                                                                                            RESULT.addHijo(v);
                                                                                                            RESULT.addHijo("(");
                                                                                                            RESULT.addHijo(lp);
                                                                                                            RESULT.addHijo(")");                                                                      
                                                                                                            RESULT.addHijo(li);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= FUNCION VARIABLE tipo_dato lista_instrucciones RETORNAR expresiones PUNTO_COMA FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Funcion"),
                                                                                new Funcion(v, li.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                            RESULT.addHijo(v);                                                                        
                                                                            RESULT.addHijo(li);
                                                                            RESULT.addHijo("RETORNO");
                                                                            RESULT.addHijo(e);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= FUNCION VARIABLE tipo_dato CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones RETORNAR expresiones PUNTO_COMA FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Funciones"),
                                                                                                                new Funcion(v, lp.getInstrucciones(), li.getInstrucciones(), (Operacion)e.getInstruccion()));  
                                                                                                            RESULT.addHijo(v);
                                                                                                            RESULT.addHijo("(");
                                                                                                            RESULT.addHijo(lp);
                                                                                                            RESULT.addHijo(")");                                                                      
                                                                                                            RESULT.addHijo(li);
                                                                                                            RESULT.addHijo("RETORNO");
                                                                                                            RESULT.addHijo(e);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= EJECUTAR VARIABLE PARENTECIS_ABRE PARENTECIS_CIERRA PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                                                                            RESULT = new Produccion(new Nodo("EJECUTAR"),
                                                                                new Ejecutar(v));
                                                                            RESULT.addHijo(v);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones ::= EJECUTAR VARIABLE PARENTECIS_ABRE lista_parametros_ejecutar PARENTECIS_CIERRA PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                                RESULT = new Produccion(new Nodo("EJECUTAR"),
                                                                                                    new Ejecutar(v, lp.getInstrucciones()));
                                                                                                RESULT.addHijo(v);                                                                        
                                                                                                RESULT.addHijo(lp);
                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucciones ::= imprimir 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciones ::= error 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_dato ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_dato ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = car;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_dato ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literales ::= LIT_NUMERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literales ::= LIT_CADENA 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literales ::= LIT_CARACTER 
            {
              Produccion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literales ::= LIT_BOOLEAN 
            {
              Produccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                String a = "verdadero";
                                String c = "falso";

                                // son iguales
                                if (a.equalsIgnoreCase(b)) {
                                    b = "True";
                                } else if (c.equalsIgnoreCase(b)) {
                                    b = "False";
                               }
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // var ::= var COMA VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // var ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_parametros ::= lista_parametros COMA VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = v;
                                                                        RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                                                        RESULT.addHijo(vu);
/*Golan
                                                                    String temp2 = vu + " " + td;
                                                                    RESULT = v;
                                                                    RESULT.addInstruccion( new Operacion(temp2, Operacion.TipoOperacion.VARIABLE));
                                                                    RESULT.addHijo(temp2);*/
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_parametros ::= VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                                String temp = v;
                                RESULT = new Produccion(new Nodo("Con_Parametros"),
                                new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(v);
                                /* Golan
                                String temp = v + " " + td + ", ";
                                RESULT = new Produccion(new Nodo("Params"),
                                new Operacion(temp, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(temp);
                                */
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_parametros_ejecutar ::= lista_parametros_ejecutar COMA expresiones 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                RESULT = v;
                                                                                RESULT.addInstruccion((Operacion)e.getInstruccion());
                                                                                RESULT.addHijo(e);
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros_ejecutar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_parametros_ejecutar ::= expresiones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion(), new LinkedList<>());
                                                                RESULT.addInstruccion((Operacion)e.getInstruccion());
                                                                RESULT.addHijo(e);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros_ejecutar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // osi ::= osi O_SI expresiones ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones(), "nada"));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // osi ::= O_SI expresiones ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones(), "nada"));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // casos ::= casos INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Caso"), c.getInstrucciones());
                                                                                                        RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                        RESULT.addHijo(c);
                                                                                                        RESULT.addHijo("¿");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("?");
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // casos ::= INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                RESULT = new Produccion(new Nodo("Caso"), new LinkedList<>());
                                                                                                RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                RESULT.addHijo("¿");
                                                                                                RESULT.addHijo(e);
                                                                                                RESULT.addHijo("?");
                                                                                                RESULT.addHijo("Entonces");
                                                                                                RESULT.addHijo(l);
                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // imprimir ::= IMPRIMIR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new Imprimir((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // imprimir ::= IMPRIMIR_NL expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new ImprimirSaltoLinea((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresiones ::= expresion 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones ::= expresion_logica 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresiones ::= expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion SUMA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion RESTA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MULTIPLICACION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("*");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion DIVISION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.DIVISION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion MODULO expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MODULO));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("Modulo");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion POTENCIA CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                                new Operacion((Operacion)a.getInstruccion(), 
                                                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.POTENCIA));
                                                                                RESULT.addHijo(a);
                                                                                RESULT.addHijo("Potencia");
                                                                                RESULT.addHijo("[");
                                                                                RESULT.addHijo(b);
                                                                                RESULT.addHijo("]");
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= PARENTECIS_ABRE expresion PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    new Operacion((Operacion)e.getInstruccion(), Operacion.TipoOperacion.CON_PARENTECIS));
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= literales 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = li;
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_relacional ::= expresion MAYOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_relacional ::= expresion MENOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MENOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_relacional ::= expresion MAYOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR_O_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR_O_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_relacional ::= expresion MENOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR_O_IGUAL));
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_relacional ::= expresion ES_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_relacional ::= expresion ES_DIFERENTE expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_DIFERENTE));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_DIFERENTE");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_relacional ::= PARENTECIS_ABRE expresion_relacional PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_logica ::= expresion_relacional AND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.AND));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("AND");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion_logica ::= expresion_relacional OR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.OR));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("OR");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion_logica ::= NOT expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                    e.getInstruccion());
                                                    RESULT.addHijo("Not");
                                                    RESULT.addHijo(e);
                                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

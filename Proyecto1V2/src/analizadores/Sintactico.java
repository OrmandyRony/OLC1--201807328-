
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import Estructuras.Instrucciones.ImprimirSaltoLinea;
import Estructuras.Instrucciones.Segun;
import Estructuras.Instrucciones.Mientras;
import Estructuras.Instrucciones.Para;
import Estructuras.Instrucciones.Repetir;
import Estructuras.Instrucciones.Metodo;
import Estructuras.Instrucciones.Funcion;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\012\000" +
    "\002\004\011\000\002\004\007\000\002\004\012\000\002" +
    "\004\007\000\002\004\006\000\002\004\013\000\002\004" +
    "\012\000\002\004\015\000\002\004\006\000\002\004\005" +
    "\000\002\004\006\000\002\004\012\000\002\004\007\000" +
    "\002\004\013\000\002\004\012\000\002\004\016\000\002" +
    "\004\003\000\002\004\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\006\005\000\002\006\003\000\002\017\006\000\002" +
    "\017\004\000\002\011\007\000\002\011\006\000\002\016" +
    "\010\000\002\016\007\000\002\010\005\000\002\010\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\007\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\004\005\001\002\000\004\002\272\001" +
    "\002\000\034\003\014\005\010\006\015\020\007\025\017" +
    "\026\006\027\023\033\016\035\021\040\022\043\020\061" +
    "\012\066\024\001\002\000\020\017\072\055\034\056\035" +
    "\057\040\060\036\061\041\063\066\001\002\000\020\017" +
    "\072\055\034\056\035\057\040\060\036\061\041\063\066" +
    "\001\002\000\004\002\uffff\001\002\000\062\003\ufffd\005" +
    "\ufffd\006\ufffd\020\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\042\ufffd\043\ufffd\044\ufffd\061\ufffd\066\ufffd" +
    "\067\ufffd\070\ufffd\072\ufffd\001\002\000\010\007\uffdd\046" +
    "\uffdd\102\uffdd\001\002\000\062\003\uffe8\005\uffe8\006\uffe8" +
    "\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\061\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\072\uffe8\001\002\000\062\003\uffe7\005\uffe7\006\uffe7" +
    "\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\061\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\072\uffe7\001\002\000\004\061\012\001\002\000\020" +
    "\017\072\055\034\056\035\057\040\060\036\061\041\063" +
    "\066\001\002\000\020\017\072\055\034\056\035\057\040" +
    "\060\036\061\041\063\066\001\002\000\004\061\207\001" +
    "\002\000\034\003\014\006\015\020\007\025\017\026\006" +
    "\027\023\033\016\035\021\036\202\040\022\043\020\061" +
    "\012\066\024\001\002\000\004\061\160\001\002\000\004" +
    "\061\142\001\002\000\020\017\072\055\034\056\035\057" +
    "\040\060\036\061\041\063\066\001\002\000\006\046\032" +
    "\102\031\001\002\000\034\003\014\005\027\006\015\020" +
    "\007\025\017\026\006\027\023\033\016\035\021\040\022" +
    "\043\020\061\012\066\024\001\002\000\004\002\000\001" +
    "\002\000\062\003\ufffe\005\ufffe\006\ufffe\020\ufffe\022\ufffe" +
    "\024\ufffe\025\ufffe\026\ufffe\027\ufffe\032\ufffe\033\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\061\ufffe\066\ufffe\067\ufffe\070\ufffe\072\ufffe\001" +
    "\002\000\004\061\064\001\002\000\016\055\034\056\035" +
    "\057\040\060\036\061\041\063\033\001\002\000\016\055" +
    "\034\056\035\057\040\060\036\061\041\063\033\001\002" +
    "\000\136\003\uffe1\005\uffe1\006\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\042\uffe1\043\uffe1\044\uffe1\053\uffe1\054\uffe1\061" +
    "\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077" +
    "\uffe1\101\uffe1\001\002\000\136\003\uffe0\005\uffe0\006\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\053\uffe0\054\uffe0\061\uffe0\062\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\101\uffe0\001\002\000\136\003" +
    "\uffe2\005\uffe2\006\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\053\uffe2\054\uffe2\061\uffe2\062\uffe2" +
    "\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072" +
    "\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\101\uffe2" +
    "\001\002\000\136\003\uffca\005\uffca\006\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\053\uffca\054" +
    "\uffca\061\uffca\062\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076" +
    "\uffca\077\uffca\101\uffca\001\002\000\136\003\uffdf\005\uffdf" +
    "\006\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\053\uffdf\054\uffdf\061\uffdf\062\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf" +
    "\074\uffdf\075\uffdf\076\uffdf\077\uffdf\101\uffdf\001\002\000" +
    "\136\003\uffc9\005\uffc9\006\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\053\uffc9\054\uffc9\061\uffc9" +
    "\062\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\101\uffc9\001\002\000\020\062\047\065\050\073\044\074" +
    "\051\075\043\076\045\077\046\001\002\000\016\055\034" +
    "\056\035\057\040\060\036\061\041\063\033\001\002\000" +
    "\016\055\034\056\035\057\040\060\036\061\041\063\033" +
    "\001\002\000\004\100\055\001\002\000\016\055\034\056" +
    "\035\057\040\060\036\061\041\063\033\001\002\000\062" +
    "\003\ufffb\005\ufffb\006\ufffb\020\ufffb\022\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\061" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\072\ufffb\001\002\000\016" +
    "\055\034\056\035\057\040\060\036\061\041\063\033\001" +
    "\002\000\016\055\034\056\035\057\040\060\036\061\041" +
    "\063\033\001\002\000\136\003\uffce\005\uffce\006\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce\053" +
    "\uffce\054\uffce\061\uffce\062\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\076\045\077\046\101\uffce\001\002\000\136\003\uffd1" +
    "\005\uffd1\006\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\053\uffd1\054\uffd1\061\uffd1\062\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\051\075\043\076\045\077\046\101\uffd1\001" +
    "\002\000\136\003\uffcd\005\uffcd\006\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd\053\uffcd\054\uffcd" +
    "\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\101\uffcd\001\002\000\016\055\034\056\035\057" +
    "\040\060\036\061\041\063\033\001\002\000\020\065\050" +
    "\073\044\074\051\075\043\076\045\077\046\101\057\001" +
    "\002\000\136\003\uffcc\005\uffcc\006\uffcc\011\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\053\uffcc\054\uffcc" +
    "\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070" +
    "\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc" +
    "\077\uffcc\101\uffcc\001\002\000\136\003\uffd0\005\uffd0\006" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\053\uffd0\054\uffd0\061\uffd0\062\uffd0\064\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074" +
    "\051\075\043\076\045\077\046\101\uffd0\001\002\000\136" +
    "\003\uffcf\005\uffcf\006\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\053\uffcf\054\uffcf\061\uffcf\062" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076\045\077\046\101" +
    "\uffcf\001\002\000\020\064\063\065\050\073\044\074\051" +
    "\075\043\076\045\077\046\001\002\000\136\003\uffcb\005" +
    "\uffcb\006\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\053\uffcb\054\uffcb\061\uffcb\062\uffcb\064\uffcb" +
    "\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073" +
    "\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\101\uffcb\001\002" +
    "\000\010\007\uffde\046\uffde\102\uffde\001\002\000\070\003" +
    "\uffd3\005\uffd3\006\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3" +
    "\061\uffd3\062\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072" +
    "\uffd3\001\002\000\016\055\034\056\035\057\040\060\036" +
    "\061\041\063\066\001\002\000\074\003\uffd2\005\uffd2\006" +
    "\uffd2\015\134\016\133\020\uffd2\021\uffd2\022\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\061\uffd2\062\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072" +
    "\uffd2\001\002\000\120\003\uffd4\005\uffd4\006\uffd4\011\102" +
    "\012\077\013\100\014\076\020\uffd4\021\uffd4\022\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\053\101\054\075\061\uffd4\062\uffd4\065\050\066\uffd4" +
    "\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\044\074\051\075" +
    "\043\076\045\077\046\001\002\000\004\071\111\001\002" +
    "\000\016\055\034\056\035\057\040\060\036\061\041\063" +
    "\066\001\002\000\070\003\uffbf\005\uffbf\006\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\061\uffbf\062\uffbf\066\uffbf\067" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\001\002\000\032\011\102" +
    "\012\077\013\100\014\076\053\101\054\075\065\050\073" +
    "\044\074\051\075\043\076\045\077\046\001\002\000\016" +
    "\055\034\056\035\057\040\060\036\061\041\063\033\001" +
    "\002\000\016\055\034\056\035\057\040\060\036\061\041" +
    "\063\033\001\002\000\016\055\034\056\035\057\040\060" +
    "\036\061\041\063\033\001\002\000\016\055\034\056\035" +
    "\057\040\060\036\061\041\063\033\001\002\000\016\055" +
    "\034\056\035\057\040\060\036\061\041\063\033\001\002" +
    "\000\016\055\034\056\035\057\040\060\036\061\041\063" +
    "\033\001\002\000\112\003\uffc6\005\uffc6\006\uffc6\015\uffc6" +
    "\016\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6\061\uffc6\062" +
    "\uffc6\064\uffc6\065\050\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\044\074\051\075\043\076\045\077\046\001" +
    "\002\000\112\003\uffc8\005\uffc8\006\uffc8\015\uffc8\016\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\042\uffc8\043\uffc8\044\uffc8\061\uffc8\062\uffc8\064" +
    "\uffc8\065\050\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\044\074\051\075\043\076\045\077\046\001\002\000" +
    "\112\003\uffc4\005\uffc4\006\uffc4\015\uffc4\016\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\061\uffc4\062\uffc4\064\uffc4\065" +
    "\050\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\044" +
    "\074\051\075\043\076\045\077\046\001\002\000\112\003" +
    "\uffc5\005\uffc5\006\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\061\uffc5\062\uffc5\064\uffc5\065\050\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\044\074\051" +
    "\075\043\076\045\077\046\001\002\000\112\003\uffc3\005" +
    "\uffc3\006\uffc3\015\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\061\uffc3\062\uffc3\064\uffc3\065\050\066\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\044\074\051\075\043" +
    "\076\045\077\046\001\002\000\112\003\uffc7\005\uffc7\006" +
    "\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\061\uffc7\062\uffc7\064\uffc7\065\050\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\044\074\051\075\043\076\045" +
    "\077\046\001\002\000\032\003\014\006\015\020\007\025" +
    "\017\026\006\027\023\033\016\035\021\040\022\043\020" +
    "\061\012\066\024\001\002\000\040\003\014\006\015\020" +
    "\007\025\017\026\006\027\023\033\016\035\021\040\022" +
    "\043\020\061\012\066\024\067\116\070\113\072\115\001" +
    "\002\000\016\055\034\056\035\057\040\060\036\061\041" +
    "\063\066\001\002\000\006\070\122\072\121\001\002\000" +
    "\032\003\014\006\015\020\007\025\017\026\006\027\023" +
    "\033\016\035\021\040\022\043\020\061\012\066\024\001" +
    "\002\000\062\003\ufffa\005\ufffa\006\ufffa\020\ufffa\022\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\061\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\001" +
    "\002\000\034\003\014\006\015\020\007\025\017\026\006" +
    "\027\023\033\016\035\021\040\022\043\020\061\012\066" +
    "\024\067\120\001\002\000\062\003\ufff8\005\ufff8\006\ufff8" +
    "\020\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\061\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\072\ufff8\001\002\000\032\003\014\006\015\020\007" +
    "\025\017\026\006\027\023\033\016\035\021\040\022\043" +
    "\020\061\012\066\024\001\002\000\020\017\072\055\034" +
    "\056\035\057\040\060\036\061\041\063\066\001\002\000" +
    "\004\071\124\001\002\000\032\003\014\006\015\020\007" +
    "\025\017\026\006\027\023\033\016\035\021\040\022\043" +
    "\020\061\012\066\024\001\002\000\036\003\014\006\015" +
    "\020\007\025\017\026\006\027\023\033\016\035\021\040" +
    "\022\043\020\061\012\066\024\070\uffda\072\uffda\001\002" +
    "\000\034\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\035\021\040\022\043\020\061\012\066\024" +
    "\067\127\001\002\000\062\003\ufff9\005\ufff9\006\ufff9\020" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\032\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\061\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\072\ufff9\001\002\000\004\071\131\001\002\000\032\003" +
    "\014\006\015\020\007\025\017\026\006\027\023\033\016" +
    "\035\021\040\022\043\020\061\012\066\024\001\002\000" +
    "\036\003\014\006\015\020\007\025\017\026\006\027\023" +
    "\033\016\035\021\040\022\043\020\061\012\066\024\070" +
    "\uffd9\072\uffd9\001\002\000\016\055\034\056\035\057\040" +
    "\060\036\061\041\063\066\001\002\000\016\055\034\056" +
    "\035\057\040\060\036\061\041\063\066\001\002\000\070" +
    "\003\uffc0\005\uffc0\006\uffc0\020\uffc0\021\uffc0\022\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\061\uffc0\062\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\072\uffc0\001\002\000\070\003\uffc1\005\uffc1\006\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\061\uffc1\062\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\001\002\000\004\064" +
    "\141\001\002\000\034\011\102\012\077\013\100\014\076" +
    "\053\101\054\075\064\063\065\050\073\044\074\051\075" +
    "\043\076\045\077\046\001\002\000\076\003\uffc2\005\uffc2" +
    "\006\uffc2\015\uffc2\016\uffc2\020\uffc2\021\uffc2\022\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\061\uffc2\062\uffc2\064\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\071\uffc2\072\uffc2\001\002\000\004\046\143\001\002\000" +
    "\016\055\034\056\035\057\040\060\036\061\041\063\033" +
    "\001\002\000\020\030\145\065\050\073\044\074\051\075" +
    "\043\076\045\077\046\001\002\000\016\055\034\056\035" +
    "\057\040\060\036\061\041\063\033\001\002\000\022\021" +
    "\147\031\150\065\050\073\044\074\051\075\043\076\045" +
    "\077\046\001\002\000\034\003\014\006\015\020\007\025" +
    "\017\026\006\027\023\032\155\033\016\035\021\040\022" +
    "\043\020\061\012\066\024\001\002\000\016\055\034\056" +
    "\035\057\040\060\036\061\041\063\033\001\002\000\020" +
    "\021\152\065\050\073\044\074\051\075\043\076\045\077" +
    "\046\001\002\000\032\003\014\006\015\020\007\025\017" +
    "\026\006\027\023\033\016\035\021\040\022\043\020\061" +
    "\012\066\024\001\002\000\034\003\014\006\015\020\007" +
    "\025\017\026\006\027\023\032\154\033\016\035\021\040" +
    "\022\043\020\061\012\066\024\001\002\000\062\003\ufff1" +
    "\005\ufff1\006\ufff1\020\ufff1\022\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\037\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\061\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\072\ufff1\001\002\000\062\003\ufff2" +
    "\005\ufff2\006\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\040\ufff2\042\ufff2\043\ufff2\044\ufff2\061\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\072\ufff2\001\002\000\034\003\014" +
    "\006\015\020\007\025\017\026\006\027\023\032\157\033" +
    "\016\035\021\040\022\043\020\061\012\066\024\001\002" +
    "\000\062\003\ufff3\005\ufff3\006\ufff3\020\ufff3\022\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\061\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\001\002" +
    "\000\034\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\035\021\040\022\041\161\043\020\061\012" +
    "\066\024\001\002\000\004\063\164\001\002\000\034\003" +
    "\014\006\015\020\007\025\017\026\006\027\023\033\016" +
    "\035\021\040\022\042\163\043\020\061\012\066\024\001" +
    "\002\000\062\003\uffee\005\uffee\006\uffee\020\uffee\022\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\032\uffee\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\037\uffee\040\uffee\042\uffee\043\uffee" +
    "\044\uffee\061\uffee\066\uffee\067\uffee\070\uffee\072\uffee\001" +
    "\002\000\004\061\166\001\002\000\006\064\175\102\174" +
    "\001\002\000\012\047\172\050\167\051\171\052\173\001" +
    "\002\000\042\003\uffe5\006\uffe5\010\uffe5\020\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\033\uffe5\035\uffe5\040\uffe5\041\uffe5\043" +
    "\uffe5\061\uffe5\064\uffe5\066\uffe5\102\uffe5\001\002\000\006" +
    "\064\uffdb\102\uffdb\001\002\000\042\003\uffe4\006\uffe4\010" +
    "\uffe4\020\uffe4\025\uffe4\026\uffe4\027\uffe4\033\uffe4\035\uffe4" +
    "\040\uffe4\041\uffe4\043\uffe4\061\uffe4\064\uffe4\066\uffe4\102" +
    "\uffe4\001\002\000\042\003\uffe6\006\uffe6\010\uffe6\020\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\033\uffe6\035\uffe6\040\uffe6\041" +
    "\uffe6\043\uffe6\061\uffe6\064\uffe6\066\uffe6\102\uffe6\001\002" +
    "\000\042\003\uffe3\006\uffe3\010\uffe3\020\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\033\uffe3\035\uffe3\040\uffe3\041\uffe3\043\uffe3" +
    "\061\uffe3\064\uffe3\066\uffe3\102\uffe3\001\002\000\004\061" +
    "\200\001\002\000\032\003\014\006\015\020\007\025\017" +
    "\026\006\027\023\033\016\035\021\040\022\043\020\061" +
    "\012\066\024\001\002\000\034\003\014\006\015\020\007" +
    "\025\017\026\006\027\023\033\016\035\021\040\022\042" +
    "\177\043\020\061\012\066\024\001\002\000\062\003\uffed" +
    "\005\uffed\006\uffed\020\uffed\022\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed\061\uffed\066" +
    "\uffed\067\uffed\070\uffed\072\uffed\001\002\000\012\047\172" +
    "\050\167\051\171\052\173\001\002\000\006\064\uffdc\102" +
    "\uffdc\001\002\000\020\017\072\055\034\056\035\057\040" +
    "\060\036\061\041\063\066\001\002\000\034\003\014\006" +
    "\015\020\007\025\017\026\006\027\023\033\016\035\021" +
    "\036\204\040\022\043\020\061\012\066\024\001\002\000" +
    "\020\017\072\055\034\056\035\057\040\060\036\061\041" +
    "\063\066\001\002\000\062\003\ufff0\005\ufff0\006\ufff0\020" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\061\ufff0\066\ufff0\067\ufff0\070\ufff0" +
    "\072\ufff0\001\002\000\062\003\uffef\005\uffef\006\uffef\020" +
    "\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042" +
    "\uffef\043\uffef\044\uffef\061\uffef\066\uffef\067\uffef\070\uffef" +
    "\072\uffef\001\002\000\012\047\172\050\167\051\171\052" +
    "\173\001\002\000\034\003\014\006\015\020\007\025\017" +
    "\026\006\027\023\033\016\035\021\040\022\041\211\043" +
    "\020\061\012\066\024\001\002\000\004\063\220\001\002" +
    "\000\036\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\035\021\037\213\040\022\043\020\044\214" +
    "\061\012\066\024\001\002\000\020\017\072\055\034\056" +
    "\035\057\040\060\036\061\041\063\066\001\002\000\062" +
    "\003\uffec\005\uffec\006\uffec\020\uffec\022\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\044\uffec\061" +
    "\uffec\066\uffec\067\uffec\070\uffec\072\uffec\001\002\000\004" +
    "\062\216\001\002\000\004\044\217\001\002\000\062\003" +
    "\uffea\005\uffea\006\uffea\020\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\042\uffea\043\uffea\044\uffea\061\uffea" +
    "\066\uffea\067\uffea\070\uffea\072\uffea\001\002\000\004\061" +
    "\166\001\002\000\006\064\222\102\174\001\002\000\032" +
    "\003\014\006\015\020\007\025\017\026\006\027\023\033" +
    "\016\035\021\040\022\043\020\061\012\066\024\001\002" +
    "\000\036\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\035\021\037\224\040\022\043\020\044\225" +
    "\061\012\066\024\001\002\000\020\017\072\055\034\056" +
    "\035\057\040\060\036\061\041\063\066\001\002\000\062" +
    "\003\uffeb\005\uffeb\006\uffeb\020\uffeb\022\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\027\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\044\uffeb\061" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb\001\002\000\004" +
    "\062\227\001\002\000\004\044\230\001\002\000\062\003" +
    "\uffe9\005\uffe9\006\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\044\uffe9\061\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\072\uffe9\001\002\000\004\062" +
    "\232\001\002\000\062\003\uffd6\005\uffd6\006\uffd6\020\uffd6" +
    "\022\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\042\uffd6" +
    "\043\uffd6\044\uffd6\061\uffd6\066\uffd6\067\uffd6\070\uffd6\072" +
    "\uffd6\001\002\000\004\021\234\001\002\000\034\003\014" +
    "\006\015\020\007\025\017\026\006\027\023\033\016\034" +
    "\235\035\021\040\022\043\020\061\012\066\024\001\002" +
    "\000\062\003\ufff4\005\ufff4\006\ufff4\020\ufff4\022\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\061\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\001\002" +
    "\000\034\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\034\237\035\021\040\022\043\020\061\012" +
    "\066\024\001\002\000\062\003\ufff5\005\ufff5\006\ufff5\020" +
    "\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042" +
    "\ufff5\043\ufff5\044\ufff5\061\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\072\ufff5\001\002\000\006\007\241\102\031\001\002\000" +
    "\012\047\172\050\167\051\171\052\173\001\002\000\004" +
    "\010\243\001\002\000\020\017\072\055\034\056\035\057" +
    "\040\060\036\061\041\063\066\001\002\000\004\062\245" +
    "\001\002\000\062\003\ufffc\005\ufffc\006\ufffc\020\ufffc\022" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\042\ufffc\043" +
    "\ufffc\044\ufffc\061\ufffc\066\ufffc\067\ufffc\070\ufffc\072\ufffc" +
    "\001\002\000\004\021\247\001\002\000\004\022\251\001" +
    "\002\000\010\022\260\024\257\072\256\001\002\000\016" +
    "\055\034\056\035\057\040\060\036\061\041\063\033\001" +
    "\002\000\020\023\253\065\050\073\044\074\051\075\043" +
    "\076\045\077\046\001\002\000\004\071\254\001\002\000" +
    "\032\003\014\006\015\020\007\025\017\026\006\027\023" +
    "\033\016\035\021\040\022\043\020\061\012\066\024\001" +
    "\002\000\040\003\014\006\015\020\007\022\uffd7\024\uffd7" +
    "\025\017\026\006\027\023\033\016\035\021\040\022\043" +
    "\020\061\012\066\024\072\uffd7\001\002\000\004\071\265" +
    "\001\002\000\062\003\ufff7\005\ufff7\006\ufff7\020\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\061\ufff7\066\ufff7\067\ufff7\070\ufff7\072\ufff7" +
    "\001\002\000\016\055\034\056\035\057\040\060\036\061" +
    "\041\063\033\001\002\000\020\023\262\065\050\073\044" +
    "\074\051\075\043\076\045\077\046\001\002\000\004\071" +
    "\263\001\002\000\032\003\014\006\015\020\007\025\017" +
    "\026\006\027\023\033\016\035\021\040\022\043\020\061" +
    "\012\066\024\001\002\000\040\003\014\006\015\020\007" +
    "\022\uffd8\024\uffd8\025\017\026\006\027\023\033\016\035" +
    "\021\040\022\043\020\061\012\066\024\072\uffd8\001\002" +
    "\000\032\003\014\006\015\020\007\025\017\026\006\027" +
    "\023\033\016\035\021\040\022\043\020\061\012\066\024" +
    "\001\002\000\034\003\014\006\015\020\007\024\267\025" +
    "\017\026\006\027\023\033\016\035\021\040\022\043\020" +
    "\061\012\066\024\001\002\000\062\003\ufff6\005\ufff6\006" +
    "\ufff6\020\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\061\ufff6\066\ufff6\067\ufff6" +
    "\070\ufff6\072\ufff6\001\002\000\004\062\271\001\002\000" +
    "\062\003\uffd5\005\uffd5\006\uffd5\020\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\061\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\025\004\010\006\024\010\012\001\001\000\014" +
    "\005\067\007\066\012\036\014\267\015\064\001\001\000" +
    "\014\005\067\007\066\012\036\014\245\015\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\237\001\001" +
    "\000\014\005\067\007\066\012\036\014\232\015\064\001" +
    "\001\000\014\005\067\007\066\012\036\014\230\015\064" +
    "\001\001\000\002\001\001\000\012\003\202\004\010\006" +
    "\024\010\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\067\007\066\012\036\014\070\015\064\001" +
    "\001\000\002\001\001\000\010\004\027\006\024\010\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\041\012\036\001\001\000\006\005\061" +
    "\012\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\060\012\036\001" +
    "\001\000\006\005\057\012\036\001\001\000\002\001\001" +
    "\000\006\005\053\012\036\001\001\000\002\001\001\000" +
    "\006\005\052\012\036\001\001\000\006\005\051\012\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\055\012\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\137\007\136\012\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\073\007\072\012\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\107\012\036\001\001\000\006" +
    "\005\106\012\036\001\001\000\006\005\105\012\036\001" +
    "\001\000\006\005\104\012\036\001\001\000\006\005\103" +
    "\012\036\001\001\000\006\005\102\012\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\111\004\010\006\024\010\012\001\001\000\012\004\027" +
    "\006\024\010\012\011\113\001\001\000\010\005\073\007" +
    "\127\012\036\001\001\000\002\001\001\000\012\003\116" +
    "\004\010\006\024\010\012\001\001\000\002\001\001\000" +
    "\010\004\027\006\024\010\012\001\001\000\002\001\001" +
    "\000\012\003\125\004\010\006\024\010\012\001\001\000" +
    "\014\005\067\007\066\012\036\014\122\015\064\001\001" +
    "\000\002\001\001\000\012\003\124\004\010\006\024\010" +
    "\012\001\001\000\010\004\027\006\024\010\012\001\001" +
    "\000\010\004\027\006\024\010\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\131\004\010\006\024" +
    "\010\012\001\001\000\010\004\027\006\024\010\012\001" +
    "\001\000\010\005\073\007\135\012\036\001\001\000\010" +
    "\005\073\007\134\012\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\143\012\036\001" +
    "\001\000\002\001\001\000\006\005\145\012\036\001\001" +
    "\000\002\001\001\000\012\003\155\004\010\006\024\010" +
    "\012\001\001\000\006\005\150\012\036\001\001\000\002" +
    "\001\001\000\012\003\152\004\010\006\024\010\012\001" +
    "\001\000\010\004\027\006\024\010\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\027\006\024\010" +
    "\012\001\001\000\002\001\001\000\012\003\161\004\010" +
    "\006\024\010\012\001\001\000\002\001\001\000\010\004" +
    "\027\006\024\010\012\001\001\000\002\001\001\000\004" +
    "\017\164\001\001\000\002\001\001\000\004\013\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\175\004\010\006\024\010\012\001\001\000\010" +
    "\004\027\006\024\010\012\001\001\000\002\001\001\000" +
    "\004\013\200\001\001\000\002\001\001\000\014\005\067" +
    "\007\066\012\036\014\205\015\064\001\001\000\010\004" +
    "\027\006\024\010\012\001\001\000\014\005\067\007\066" +
    "\012\036\014\204\015\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\207\001\001\000\012\003\211" +
    "\004\010\006\024\010\012\001\001\000\002\001\001\000" +
    "\010\004\027\006\024\010\012\001\001\000\014\005\067" +
    "\007\066\012\036\014\214\015\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\220\001\001\000\002\001\001\000\012\003" +
    "\222\004\010\006\024\010\012\001\001\000\010\004\027" +
    "\006\024\010\012\001\001\000\014\005\067\007\066\012" +
    "\036\014\225\015\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\235" +
    "\004\010\006\024\010\012\001\001\000\002\001\001\000" +
    "\010\004\027\006\024\010\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\241\001\001\000\002\001" +
    "\001\000\014\005\067\007\066\012\036\014\243\015\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\247\001\001\000\002\001\001\000\006" +
    "\005\251\012\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\254\004\010\006\024\010\012\001\001" +
    "\000\010\004\027\006\024\010\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\260\012\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\263\004" +
    "\010\006\024\010\012\001\001\000\010\004\027\006\024" +
    "\010\012\001\001\000\012\003\265\004\010\006\024\010" +
    "\012\001\001\000\010\004\027\006\024\010\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;
		 System.out.println("No hay intrucciones que procesar."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= INGRESAR var COMO tipo_dato CON_VALOR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Asignacion"), 
                                                                                new Asignacion(v.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                RESULT.addHijo(v);
                                                                RESULT.addHijo(a);
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(";");
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones osi DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                            RESULT.addHijo("Si");
                                                                                                            RESULT.addHijo(e);
                                                                                                            RESULT.addHijo("Entonces");
                                                                                                            RESULT.addHijo(l);
                                                                                                            RESULT.addHijo(o);
                                                                                                            RESULT.addHijo("DeLoContrario");
                                                                                                            RESULT.addHijo(l2);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), l2.getInstrucciones()));
                                                                                                        RESULT.addHijo("Si");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                        RESULT.addHijo(l2);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= SEGUN expresiones HACER casos FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Segun"), 
                                                            new Segun((Operacion)e.getInstruccion(), c.getInstrucciones()));
                                                    RESULT.addHijo("segun");
                                                    RESULT.addHijo(e);
                                                    RESULT.addHijo("Hacer");
                                                    RESULT.addHijo(c);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= SEGUN expresiones HACER casos DE_LO_CONTRARIO ENTONCES lista_instrucciones FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT = new Produccion(new Nodo("Segun"),
                                                                                                        new SiEntonces((Operacion)e.getInstruccion(), c.getInstrucciones(), l.getInstrucciones()));
                                                                                                    RESULT.addHijo("segun");
                                                                                                    RESULT.addHijo(e);
                                                                                                    RESULT.addHijo("Hacer");
                                                                                                    RESULT.addHijo(c);
                                                                                                    RESULT.addHijo("DeLoContrario");
                                                                                                    RESULT.addHijo(l);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= MIENTRAS expresiones HACER lista_instrucciones FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Mientras"),
                                                                                new Mientras((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                            //RESULT.addHijo("Mientras");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo("Hacer");
                                                                            RESULT.addHijo(l);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= MIENTRAS expresiones HACER FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                        RESULT = new Produccion(new Nodo("Mientras"), 
                                                                new Mientras((Operacion)e.getInstruccion()));
                                                        RESULT.addHijo(e);
                                                        RESULT.addHijo("Hacer");
                                                    
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Para"),
                                                                                                            new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), l.getInstrucciones()));
                                                                                                        //RESULT.addHijo("Mientras");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Hasta");
                                                                                                        RESULT.addHijo(eh);
                                                                                                        RESULT.addHijo("Hacer");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                    RESULT = new Produccion(new Nodo("Para"),
                                                                                        new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion()));                                                                        
                                                                                    RESULT.addHijo(e);
                                                                                    RESULT.addHijo("Hasta");
                                                                                    RESULT.addHijo(eh);
                                                                                    RESULT.addHijo("Hacer");
                                                                            
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion CON_INCREMENTAL expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion incremento = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                            RESULT = new Produccion(new Nodo("Para"),
                                                                                                                                new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), (Operacion)incremento.getInstruccion(), li.getInstrucciones()));                                                                        
                                                                                                                            RESULT.addHijo(e);
                                                                                                                            RESULT.addHijo("Hasta");
                                                                                                                            RESULT.addHijo(eh);
                                                                                                                            RESULT.addHijo("Con_Incremento");
                                                                                                                            RESULT.addHijo(incremento);
                                                                                                                            RESULT.addHijo("Hacer");
                                                                                                                            RESULT.addHijo(li);
                                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= REPETIR lista_instrucciones HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Repetir"),
                                                                new Repetir(li.getInstrucciones(), (Operacion)e.getInstruccion()));                                                                        
                                                            RESULT.addHijo(li);
                                                            RESULT.addHijo("Hasta_Que");
                                                            RESULT.addHijo(e);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= REPETIR HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                        RESULT = new Produccion(new Nodo("Repetir"),
                                            new Repetir((Operacion)e.getInstruccion()));                                                                        
                                        RESULT.addHijo("Hasta_Que");
                                        RESULT.addHijo(e);
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciones ::= METODO VARIABLE lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Metodo"),
                                                                    new Metodo(v, li.getInstrucciones()));
                                                                RESULT.addHijo(v);                                                                        
                                                                RESULT.addHijo(li);
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= METODO VARIABLE CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                                    RESULT = new Produccion(new Nodo("Metodo"),
                                                                                                                                        new Metodo(v, lp.getInstrucciones(), li.getInstrucciones()));  
                                                                                                                                    RESULT.addHijo(v);
                                                                                                                                    RESULT.addHijo("(");
                                                                                                                                    RESULT.addHijo(lp);
                                                                                                                                    RESULT.addHijo(")");                                                                      
                                                                                                                                    RESULT.addHijo(li);
                                                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= FUNCION VARIABLE tipo_dato lista_instrucciones FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Funcion"),
                                                                                new Funcion(v, li.getInstrucciones()));
                                                                            RESULT.addHijo(v);                                                                        
                                                                            RESULT.addHijo(li);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= FUNCION VARIABLE tipo_dato CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Funciones"),
                                                                                                                new Funcion(v, lp.getInstrucciones(), li.getInstrucciones()));  
                                                                                                            RESULT.addHijo(v);
                                                                                                            RESULT.addHijo("(");
                                                                                                            RESULT.addHijo(lp);
                                                                                                            RESULT.addHijo(")");                                                                      
                                                                                                            RESULT.addHijo(li);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= FUNCION VARIABLE tipo_dato lista_instrucciones RETORNAR expresiones PUNTO_COMA FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Funcion"),
                                                                                new Funcion(v, li.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                            RESULT.addHijo(v);                                                                        
                                                                            RESULT.addHijo(li);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= FUNCION VARIABLE tipo_dato CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones RETORNAR expresiones PUNTO_COMA FIN_FUNCION 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
    //System.out.println("Se reconocio retonro y con parametros");                                            
    /*
                                                                                                            RESULT = new Produccion(new Nodo("Funciones"),
                                                                                                                new Funcion(v, lp.getInstrucciones(), li.getInstrucciones(), (Operacion)e.getInstruccion()));  
                                                                                                            RESULT.addHijo(v);
                                                                                                            RESULT.addHijo("(");
                                                                                                            RESULT.addHijo(lp);
                                                                                                            RESULT.addHijo(")");                                                                      
                                                                                                            RESULT.addHijo(li);*/
                                                                                                            
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucciones ::= imprimir 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucciones ::= error 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_dato ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_dato ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = car;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_dato ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // literales ::= LIT_NUMERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literales ::= LIT_CADENA 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literales ::= LIT_CARACTER 
            {
              Produccion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literales ::= LIT_BOOLEAN 
            {
              Produccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= var COMA VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_parametros ::= lista_parametros COMA VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = v;
                                                                        RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                                                        RESULT.addHijo(vu);
/*Golan
                                                                    String temp2 = vu + " " + td;
                                                                    RESULT = v;
                                                                    RESULT.addInstruccion( new Operacion(temp2, Operacion.TipoOperacion.VARIABLE));
                                                                    RESULT.addHijo(temp2);*/
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_parametros ::= VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                                String temp = v;
                                RESULT = new Produccion(new Nodo("Con_Parametros"),
                                new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(v);
                                /* Golan
                                String temp = v + " " + td + ", ";
                                RESULT = new Produccion(new Nodo("Params"),
                                new Operacion(temp, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(temp);
                                */
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // osi ::= osi O_SI expresiones ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // osi ::= O_SI expresion_relacional ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // casos ::= casos INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Caso"), c.getInstrucciones());
                                                                                                        RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                        RESULT.addHijo(c);
                                                                                                        RESULT.addHijo("¿");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("?");
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // casos ::= INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                RESULT = new Produccion(new Nodo("Caso"), new LinkedList<>());
                                                                                                RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                RESULT.addHijo("¿");
                                                                                                RESULT.addHijo(e);
                                                                                                RESULT.addHijo("?");
                                                                                                RESULT.addHijo("Entonces");
                                                                                                RESULT.addHijo(l);
                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // imprimir ::= IMPRIMIR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new Imprimir((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imprimir ::= IMPRIMIR_NL expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new ImprimirSaltoLinea((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= expresion 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones ::= expresion_logica 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresiones ::= expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion SUMA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion RESTA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MULTIPLICACION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("*");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion DIVISION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.DIVISION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MODULO expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MODULO));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("Modulo");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion POTENCIA CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                                new Operacion((Operacion)a.getInstruccion(), 
                                                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.POTENCIA));
                                                                                RESULT.addHijo(a);
                                                                                RESULT.addHijo("Potencia");
                                                                                RESULT.addHijo("[");
                                                                                RESULT.addHijo(b);
                                                                                RESULT.addHijo("]");
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= PARENTECIS_ABRE expresion PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= literales 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = li;
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_relacional ::= expresion MAYOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_relacional ::= expresion MENOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MENOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_relacional ::= expresion MAYOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR_O_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR_O_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_relacional ::= expresion MENOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR_O_IGUAL));
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_relacional ::= expresion ES_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_relacional ::= expresion ES_DIFERENTE expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_DIFERENTE));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_DIFERENTE");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion_relacional ::= PARENTECIS_ABRE expresion_relacional PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion_logica ::= expresion_relacional AND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.AND));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("AND");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion_logica ::= expresion_relacional OR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.OR));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("OR");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion_logica ::= NOT expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                    e.getInstruccion());
                                                    RESULT.addHijo("Not");
                                                    RESULT.addHijo(e);
                                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

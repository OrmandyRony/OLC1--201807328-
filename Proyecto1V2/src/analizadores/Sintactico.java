
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import Estructuras.Instrucciones.ImprimirSaltoLinea;
import Estructuras.Instrucciones.Segun;
import Estructuras.Instrucciones.Mientras;
import Estructuras.Instrucciones.Para;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\005\011" +
    "\000\002\005\006\000\002\005\007\000\002\005\012\000" +
    "\002\005\011\000\002\005\007\000\002\005\012\000\002" +
    "\005\007\000\002\005\006\000\002\005\013\000\002\005" +
    "\012\000\002\005\015\000\002\005\003\000\002\005\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\013\005\000\002\013" +
    "\003\000\002\016\007\000\002\016\006\000\002\023\010" +
    "\000\002\023\007\000\002\015\005\000\002\015\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\007\000\002\011\005" +
    "\000\002\011\003\000\002\011\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\004\005\001\002\000\004\002\222\001" +
    "\002\000\026\003\014\005\010\006\015\020\007\025\017" +
    "\026\006\027\020\033\016\061\013\066\022\001\002\000" +
    "\020\017\037\055\027\056\036\057\034\060\040\061\031" +
    "\063\030\001\002\000\020\017\037\055\027\056\036\057" +
    "\034\060\040\061\031\063\030\001\002\000\004\002\uffff" +
    "\001\002\000\044\003\ufffd\005\ufffd\006\ufffd\020\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\061\ufffd\066\ufffd\067\ufffd\070\ufffd\072\ufffd\001" +
    "\002\000\044\003\ufff0\005\ufff0\006\ufff0\020\ufff0\022\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\061\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0\001\002" +
    "\000\010\007\uffe5\046\uffe5\102\uffe5\001\002\000\044\003" +
    "\uffef\005\uffef\006\uffef\020\uffef\022\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\032\uffef\033\uffef\034\uffef\061\uffef\066" +
    "\uffef\067\uffef\070\uffef\072\uffef\001\002\000\004\061\013" +
    "\001\002\000\020\017\037\055\027\056\036\057\034\060" +
    "\040\061\031\063\030\001\002\000\020\017\037\055\027" +
    "\056\036\057\034\060\040\061\031\063\030\001\002\000" +
    "\004\061\137\001\002\000\006\046\133\102\132\001\002" +
    "\000\020\017\037\055\027\056\036\057\034\060\040\061" +
    "\031\063\030\001\002\000\026\003\014\005\024\006\015" +
    "\020\007\025\017\026\006\027\020\033\016\061\013\066" +
    "\022\001\002\000\004\002\000\001\002\000\044\003\ufffe" +
    "\005\ufffe\006\ufffe\020\ufffe\022\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe\061\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\072\ufffe\001\002\000\010\021\uffdd\062" +
    "\uffdd\071\uffdd\001\002\000\056\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\021\uffe9\023\uffe9\030\uffe9\031" +
    "\uffe9\053\uffe9\054\uffe9\062\uffe9\064\uffe9\065\uffe9\071\uffe9" +
    "\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\101\uffe9\001" +
    "\002\000\016\055\027\056\036\057\034\060\040\061\031" +
    "\063\030\001\002\000\056\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\021\uffd3\023\uffd3\030\uffd3\031\uffd3" +
    "\053\uffd3\054\uffd3\062\uffd3\064\uffd3\065\uffd3\071\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\101\uffd3\001\002" +
    "\000\014\015\124\016\123\021\uffdc\062\uffdc\071\uffdc\001" +
    "\002\000\040\011\056\012\050\013\051\014\047\021\uffde" +
    "\053\053\054\046\062\uffde\065\045\071\uffde\073\057\074" +
    "\055\075\052\076\044\077\054\001\002\000\056\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\021\uffe7\023" +
    "\uffe7\030\uffe7\031\uffe7\053\uffe7\054\uffe7\062\uffe7\064\uffe7" +
    "\065\uffe7\071\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077" +
    "\uffe7\101\uffe7\001\002\000\004\071\101\001\002\000\056" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\021" +
    "\uffe8\023\uffe8\030\uffe8\031\uffe8\053\uffe8\054\uffe8\062\uffe8" +
    "\064\uffe8\065\uffe8\071\uffe8\073\uffe8\074\uffe8\075\uffe8\076" +
    "\uffe8\077\uffe8\101\uffe8\001\002\000\016\055\027\056\036" +
    "\057\034\060\040\061\031\063\030\001\002\000\056\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\021\uffea" +
    "\023\uffea\030\uffea\031\uffea\053\uffea\054\uffea\062\uffea\064" +
    "\uffea\065\uffea\071\uffea\073\uffea\074\uffea\075\uffea\076\uffea" +
    "\077\uffea\101\uffea\001\002\000\056\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\021\uffd4\023\uffd4\030\uffd4" +
    "\031\uffd4\053\uffd4\054\uffd4\062\uffd4\064\uffd4\065\uffd4\071" +
    "\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\101\uffd4" +
    "\001\002\000\010\021\uffc9\062\uffc9\071\uffc9\001\002\000" +
    "\032\011\056\012\050\013\051\014\047\053\053\054\046" +
    "\065\045\073\057\074\055\075\052\076\044\077\054\001" +
    "\002\000\004\100\076\001\002\000\016\055\027\056\036" +
    "\057\034\060\040\061\031\063\060\001\002\000\016\055" +
    "\027\056\036\057\034\060\040\061\031\063\060\001\002" +
    "\000\016\055\027\056\036\057\034\060\040\061\031\063" +
    "\060\001\002\000\016\055\027\056\036\057\034\060\040" +
    "\061\031\063\060\001\002\000\016\055\027\056\036\057" +
    "\034\060\040\061\031\063\060\001\002\000\016\055\027" +
    "\056\036\057\034\060\040\061\031\063\060\001\002\000" +
    "\016\055\027\056\036\057\034\060\040\061\031\063\060" +
    "\001\002\000\016\055\027\056\036\057\034\060\040\061" +
    "\031\063\060\001\002\000\016\055\027\056\036\057\034" +
    "\060\040\061\031\063\060\001\002\000\016\055\027\056" +
    "\036\057\034\060\040\061\031\063\060\001\002\000\016" +
    "\055\027\056\036\057\034\060\040\061\031\063\060\001" +
    "\002\000\016\055\027\056\036\057\034\060\040\061\031" +
    "\063\060\001\002\000\056\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\021\uffda\023\uffda\030\uffda\031\uffda" +
    "\053\uffda\054\uffda\062\uffda\064\uffda\065\uffda\071\uffda\073" +
    "\uffda\074\055\075\052\076\044\077\054\101\uffda\001\002" +
    "\000\020\064\063\065\045\073\057\074\055\075\052\076" +
    "\044\077\054\001\002\000\056\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\021\uffd5\023\uffd5\030\uffd5\031" +
    "\uffd5\053\uffd5\054\uffd5\062\uffd5\064\uffd5\065\uffd5\071\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\101\uffd5\001" +
    "\002\000\032\015\uffd0\016\uffd0\021\uffd0\062\uffd0\064\uffd0" +
    "\065\045\071\uffd0\073\057\074\055\075\052\076\044\077" +
    "\054\001\002\000\056\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\021\uffd8\023\uffd8\030\uffd8\031\uffd8\053" +
    "\uffd8\054\uffd8\062\uffd8\064\uffd8\065\uffd8\071\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\044\077\054\101\uffd8\001\002\000" +
    "\056\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\021\uffd7\023\uffd7\030\uffd7\031\uffd7\053\uffd7\054\uffd7\062" +
    "\uffd7\064\uffd7\065\uffd7\071\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\101\uffd7\001\002\000\032\015\uffd2\016" +
    "\uffd2\021\uffd2\062\uffd2\064\uffd2\065\045\071\uffd2\073\057" +
    "\074\055\075\052\076\044\077\054\001\002\000\056\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\021\uffd9" +
    "\023\uffd9\030\uffd9\031\uffd9\053\uffd9\054\uffd9\062\uffd9\064" +
    "\uffd9\065\uffd9\071\uffd9\073\uffd9\074\uffd9\075\uffd9\076\044" +
    "\077\054\101\uffd9\001\002\000\032\015\uffce\016\uffce\021" +
    "\uffce\062\uffce\064\uffce\065\045\071\uffce\073\057\074\055" +
    "\075\052\076\044\077\054\001\002\000\032\015\uffcf\016" +
    "\uffcf\021\uffcf\062\uffcf\064\uffcf\065\045\071\uffcf\073\057" +
    "\074\055\075\052\076\044\077\054\001\002\000\032\015" +
    "\uffcd\016\uffcd\021\uffcd\062\uffcd\064\uffcd\065\045\071\uffcd" +
    "\073\057\074\055\075\052\076\044\077\054\001\002\000" +
    "\032\015\uffd1\016\uffd1\021\uffd1\062\uffd1\064\uffd1\065\045" +
    "\071\uffd1\073\057\074\055\075\052\076\044\077\054\001" +
    "\002\000\056\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\021\uffdb\023\uffdb\030\uffdb\031\uffdb\053\uffdb\054" +
    "\uffdb\062\uffdb\064\uffdb\065\uffdb\071\uffdb\073\uffdb\074\055" +
    "\075\052\076\044\077\054\101\uffdb\001\002\000\016\055" +
    "\027\056\036\057\034\060\040\061\031\063\060\001\002" +
    "\000\020\065\045\073\057\074\055\075\052\076\044\077" +
    "\054\101\100\001\002\000\056\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\021\uffd6\023\uffd6\030\uffd6\031" +
    "\uffd6\053\uffd6\054\uffd6\062\uffd6\064\uffd6\065\uffd6\071\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\101\uffd6\001" +
    "\002\000\024\003\014\006\015\020\007\025\017\026\006" +
    "\027\020\033\016\061\013\066\022\001\002\000\032\003" +
    "\014\006\015\020\007\025\017\026\006\027\020\033\016" +
    "\061\013\066\022\067\103\070\106\072\104\001\002\000" +
    "\044\003\ufffa\005\ufffa\006\ufffa\020\ufffa\022\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\032\ufffa\033\ufffa\034\ufffa\061" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\001\002\000\024" +
    "\003\014\006\015\020\007\025\017\026\006\027\020\033" +
    "\016\061\013\066\022\001\002\000\006\070\113\072\112" +
    "\001\002\000\016\055\027\056\036\057\034\060\040\061" +
    "\031\063\030\001\002\000\004\071\110\001\002\000\024" +
    "\003\014\006\015\020\007\025\017\026\006\027\020\033" +
    "\016\061\013\066\022\001\002\000\030\003\014\006\015" +
    "\020\007\025\017\026\006\027\020\033\016\061\013\066" +
    "\022\070\uffe3\072\uffe3\001\002\000\024\003\014\006\015" +
    "\020\007\025\017\026\006\027\020\033\016\061\013\066" +
    "\022\001\002\000\020\017\037\055\027\056\036\057\034" +
    "\060\040\061\031\063\030\001\002\000\004\071\115\001" +
    "\002\000\024\003\014\006\015\020\007\025\017\026\006" +
    "\027\020\033\016\061\013\066\022\001\002\000\030\003" +
    "\014\006\015\020\007\025\017\026\006\027\020\033\016" +
    "\061\013\066\022\070\uffe4\072\uffe4\001\002\000\026\003" +
    "\014\006\015\020\007\025\017\026\006\027\020\033\016" +
    "\061\013\066\022\067\120\001\002\000\044\003\ufff9\005" +
    "\ufff9\006\ufff9\020\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\032\ufff9\033\ufff9\034\ufff9\061\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\072\ufff9\001\002\000\026\003\014\006\015" +
    "\020\007\025\017\026\006\027\020\033\016\061\013\066" +
    "\022\067\122\001\002\000\044\003\ufff8\005\ufff8\006\ufff8" +
    "\020\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\061\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\072\ufff8\001\002\000\016\055\027\056\036\057\034\060" +
    "\040\061\031\063\030\001\002\000\016\055\027\056\036" +
    "\057\034\060\040\061\031\063\030\001\002\000\010\021" +
    "\uffca\062\uffca\071\uffca\001\002\000\010\021\uffcb\062\uffcb" +
    "\071\uffcb\001\002\000\004\064\131\001\002\000\034\011" +
    "\056\012\050\013\051\014\047\053\053\054\046\064\063" +
    "\065\045\073\057\074\055\075\052\076\044\077\054\001" +
    "\002\000\016\015\uffcc\016\uffcc\021\uffcc\062\uffcc\064\uffcc" +
    "\071\uffcc\001\002\000\004\061\136\001\002\000\016\055" +
    "\027\056\036\057\034\060\040\061\031\063\060\001\002" +
    "\000\020\062\135\065\045\073\057\074\055\075\052\076" +
    "\044\077\054\001\002\000\044\003\ufffb\005\ufffb\006\ufffb" +
    "\020\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\061\ufffb\066\ufffb\067\ufffb\070\ufffb" +
    "\072\ufffb\001\002\000\010\007\uffe6\046\uffe6\102\uffe6\001" +
    "\002\000\004\046\140\001\002\000\016\055\027\056\036" +
    "\057\034\060\040\061\031\063\060\001\002\000\020\030" +
    "\142\065\045\073\057\074\055\075\052\076\044\077\054" +
    "\001\002\000\016\055\027\056\036\057\034\060\040\061" +
    "\031\063\060\001\002\000\022\021\144\031\145\065\045" +
    "\073\057\074\055\075\052\076\044\077\054\001\002\000" +
    "\026\003\014\006\015\020\007\025\017\026\006\027\020" +
    "\032\152\033\016\061\013\066\022\001\002\000\016\055" +
    "\027\056\036\057\034\060\040\061\031\063\060\001\002" +
    "\000\020\021\147\065\045\073\057\074\055\075\052\076" +
    "\044\077\054\001\002\000\024\003\014\006\015\020\007" +
    "\025\017\026\006\027\020\033\016\061\013\066\022\001" +
    "\002\000\026\003\014\006\015\020\007\025\017\026\006" +
    "\027\020\032\151\033\016\061\013\066\022\001\002\000" +
    "\044\003\ufff1\005\ufff1\006\ufff1\020\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\034\ufff1\061" +
    "\ufff1\066\ufff1\067\ufff1\070\ufff1\072\ufff1\001\002\000\044" +
    "\003\ufff2\005\ufff2\006\ufff2\020\ufff2\022\ufff2\024\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\032\ufff2\033\ufff2\034\ufff2\061\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\072\ufff2\001\002\000\026\003" +
    "\014\006\015\020\007\025\017\026\006\027\020\032\154" +
    "\033\016\061\013\066\022\001\002\000\044\003\ufff3\005" +
    "\ufff3\006\ufff3\020\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\032\ufff3\033\ufff3\034\ufff3\061\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\072\ufff3\001\002\000\004\062\156\001\002" +
    "\000\044\003\uffe0\005\uffe0\006\uffe0\020\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\061\uffe0\066\uffe0\067\uffe0\070\uffe0\072\uffe0\001\002\000" +
    "\004\021\160\001\002\000\026\003\014\006\015\020\007" +
    "\025\017\026\006\027\020\033\016\034\161\061\013\066" +
    "\022\001\002\000\044\003\ufff4\005\ufff4\006\ufff4\020\ufff4" +
    "\022\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\061\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4" +
    "\001\002\000\026\003\014\006\015\020\007\025\017\026" +
    "\006\027\020\033\016\034\163\061\013\066\022\001\002" +
    "\000\044\003\ufff5\005\ufff5\006\ufff5\020\ufff5\022\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5" +
    "\061\ufff5\066\ufff5\067\ufff5\070\ufff5\072\ufff5\001\002\000" +
    "\006\007\165\102\132\001\002\000\012\047\171\050\166" +
    "\051\170\052\172\001\002\000\004\010\uffed\001\002\000" +
    "\004\010\173\001\002\000\004\010\uffec\001\002\000\004" +
    "\010\uffee\001\002\000\004\010\uffeb\001\002\000\020\017" +
    "\037\055\027\056\036\057\034\060\040\061\031\063\030" +
    "\001\002\000\004\062\175\001\002\000\044\003\ufffc\005" +
    "\ufffc\006\ufffc\020\ufffc\022\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\032\ufffc\033\ufffc\034\ufffc\061\ufffc\066\ufffc\067" +
    "\ufffc\070\ufffc\072\ufffc\001\002\000\004\021\177\001\002" +
    "\000\004\022\201\001\002\000\010\022\210\024\207\072" +
    "\206\001\002\000\016\055\027\056\036\057\034\060\040" +
    "\061\031\063\060\001\002\000\020\023\203\065\045\073" +
    "\057\074\055\075\052\076\044\077\054\001\002\000\004" +
    "\071\204\001\002\000\024\003\014\006\015\020\007\025" +
    "\017\026\006\027\020\033\016\061\013\066\022\001\002" +
    "\000\032\003\014\006\015\020\007\022\uffe1\024\uffe1\025" +
    "\017\026\006\027\020\033\016\061\013\066\022\072\uffe1" +
    "\001\002\000\004\071\215\001\002\000\044\003\ufff7\005" +
    "\ufff7\006\ufff7\020\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\032\ufff7\033\ufff7\034\ufff7\061\ufff7\066\ufff7\067" +
    "\ufff7\070\ufff7\072\ufff7\001\002\000\016\055\027\056\036" +
    "\057\034\060\040\061\031\063\060\001\002\000\020\023" +
    "\212\065\045\073\057\074\055\075\052\076\044\077\054" +
    "\001\002\000\004\071\213\001\002\000\024\003\014\006" +
    "\015\020\007\025\017\026\006\027\020\033\016\061\013" +
    "\066\022\001\002\000\032\003\014\006\015\020\007\022" +
    "\uffe2\024\uffe2\025\017\026\006\027\020\033\016\061\013" +
    "\066\022\072\uffe2\001\002\000\024\003\014\006\015\020" +
    "\007\025\017\026\006\027\020\033\016\061\013\066\022" +
    "\001\002\000\026\003\014\006\015\020\007\024\217\025" +
    "\017\026\006\027\020\033\016\061\013\066\022\001\002" +
    "\000\044\003\ufff6\005\ufff6\006\ufff6\020\ufff6\022\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\061\ufff6\066\ufff6\067\ufff6\070\ufff6\072\ufff6\001\002\000" +
    "\004\062\221\001\002\000\044\003\uffdf\005\uffdf\006\uffdf" +
    "\020\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\061\uffdf\066\uffdf\067\uffdf\070\uffdf" +
    "\072\uffdf\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\022\005\010\013\020\015\011\001\001\000\014" +
    "\011\032\014\031\017\040\021\217\022\025\001\001\000" +
    "\014\011\032\014\031\017\040\021\175\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\163\001\001" +
    "\000\014\011\032\014\031\017\040\021\156\022\025\001" +
    "\001\000\014\011\032\014\031\017\040\021\154\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\011" +
    "\032\014\031\017\040\021\034\022\025\001\001\000\010" +
    "\005\024\013\020\015\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\127\014\126\017\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\042\014\041\017" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\074\017\040\001\001\000\006\011\073\017\040\001\001" +
    "\000\006\011\072\017\040\001\001\000\006\011\071\017" +
    "\040\001\001\000\006\011\070\017\040\001\001\000\006" +
    "\011\067\017\040\001\001\000\006\011\066\017\040\001" +
    "\001\000\006\011\065\017\040\001\001\000\006\011\064" +
    "\017\040\001\001\000\006\011\063\017\040\001\001\000" +
    "\006\011\060\017\040\001\001\000\006\011\061\017\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\076\017\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\101\005\010\013\020" +
    "\015\011\001\001\000\012\005\024\013\020\015\011\016" +
    "\104\001\001\000\002\001\001\000\012\003\120\005\010" +
    "\013\020\015\011\001\001\000\002\001\001\000\010\011" +
    "\042\014\106\017\040\001\001\000\002\001\001\000\012" +
    "\003\110\005\010\013\020\015\011\001\001\000\010\005" +
    "\024\013\020\015\011\001\001\000\012\003\116\005\010" +
    "\013\020\015\011\001\001\000\014\011\032\014\031\017" +
    "\040\021\113\022\025\001\001\000\002\001\001\000\012" +
    "\003\115\005\010\013\020\015\011\001\001\000\010\005" +
    "\024\013\020\015\011\001\001\000\010\005\024\013\020" +
    "\015\011\001\001\000\002\001\001\000\010\005\024\013" +
    "\020\015\011\001\001\000\002\001\001\000\010\011\042" +
    "\014\125\017\040\001\001\000\010\011\042\014\124\017" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\133\017\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\140\017\040\001\001\000\002\001\001\000\006" +
    "\011\142\017\040\001\001\000\002\001\001\000\012\003" +
    "\152\005\010\013\020\015\011\001\001\000\006\011\145" +
    "\017\040\001\001\000\002\001\001\000\012\003\147\005" +
    "\010\013\020\015\011\001\001\000\010\005\024\013\020" +
    "\015\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\024\013\020\015\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\161\005\010\013\020\015\011\001\001\000\002" +
    "\001\001\000\010\005\024\013\020\015\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\032\014\031" +
    "\017\040\021\173\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\177\001\001" +
    "\000\002\001\001\000\006\011\201\017\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\204\005\010" +
    "\013\020\015\011\001\001\000\010\005\024\013\020\015" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\210\017\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\213\005\010\013\020\015\011\001\001" +
    "\000\010\005\024\013\020\015\011\001\001\000\012\003" +
    "\215\005\010\013\020\015\011\001\001\000\010\005\024" +
    "\013\020\015\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;
		 System.out.println("No hay intrucciones que procesar."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= INGRESAR var COMO tipo_dato CON_VALOR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Asignacion"), 
                                                                                new Asignacion(v.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                RESULT.addHijo(v);
                                                                RESULT.addHijo(a);
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(";");
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones osi DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                            RESULT.addHijo("Si");
                                                                                                            RESULT.addHijo(e);
                                                                                                            RESULT.addHijo("Entonces");
                                                                                                            RESULT.addHijo(l);
                                                                                                            RESULT.addHijo(o);
                                                                                                            RESULT.addHijo("DeLoContrario");
                                                                                                            RESULT.addHijo(l2);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), l2.getInstrucciones()));
                                                                                                        RESULT.addHijo("Si");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                        RESULT.addHijo(l2);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= SEGUN expresiones HACER casos FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Segun"), 
                                                            new Segun((Operacion)e.getInstruccion(), c.getInstrucciones()));
                                                    RESULT.addHijo("segun");
                                                    RESULT.addHijo(e);
                                                    RESULT.addHijo("Hacer");
                                                    RESULT.addHijo(c);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= SEGUN expresiones HACER casos DE_LO_CONTRARIO ENTONCES lista_instrucciones FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT = new Produccion(new Nodo("Segun"),
                                                                                                        new SiEntonces((Operacion)e.getInstruccion(), c.getInstrucciones(), l.getInstrucciones()));
                                                                                                    RESULT.addHijo("segun");
                                                                                                    RESULT.addHijo(e);
                                                                                                    RESULT.addHijo("Hacer");
                                                                                                    RESULT.addHijo(c);
                                                                                                    RESULT.addHijo("DeLoContrario");
                                                                                                    RESULT.addHijo(l);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= MIENTRAS expresiones HACER lista_instrucciones FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Mientras"),
                                                                                new Mientras((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                            //RESULT.addHijo("Mientras");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo("Hacer");
                                                                            RESULT.addHijo(l);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= MIENTRAS expresiones HACER FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                        RESULT = new Produccion(new Nodo("Mientras"), 
                                                                new Mientras((Operacion)e.getInstruccion()));
                                                        RESULT.addHijo(e);
                                                        RESULT.addHijo("Hacer");
                                                    
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Para"),
                                                                                                            new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), l.getInstrucciones()));
                                                                                                        //RESULT.addHijo("Mientras");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Hasta");
                                                                                                        RESULT.addHijo(eh);
                                                                                                        RESULT.addHijo("Hacer");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                    RESULT = new Produccion(new Nodo("Para"),
                                                                                        new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion()));                                                                        
                                                                                    RESULT.addHijo(e);
                                                                                    RESULT.addHijo("Hasta");
                                                                                    RESULT.addHijo(eh);
                                                                                    RESULT.addHijo("Hacer");
                                                                            
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion CON_INCREMENTAL expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion incremento = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                            RESULT = new Produccion(new Nodo("Para"),
                                                                                                                                new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), (Operacion)incremento.getInstruccion(), li.getInstrucciones()));                                                                        
                                                                                                                            RESULT.addHijo(e);
                                                                                                                            RESULT.addHijo("Hasta");
                                                                                                                            RESULT.addHijo(eh);
                                                                                                                            RESULT.addHijo("Con_Incremento");
                                                                                                                            RESULT.addHijo(incremento);
                                                                                                                            RESULT.addHijo("Hacer");
                                                                                                                            RESULT.addHijo(li);
                                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= imprimir 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= error 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_dato ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_dato ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = car;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_dato ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // literales ::= LIT_NUMERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // literales ::= LIT_CADENA 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // literales ::= LIT_CARACTER 
            {
              Produccion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // literales ::= LIT_BOOLEAN 
            {
              Produccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var ::= var COMA VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // osi ::= osi O_SI expresiones ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // osi ::= O_SI expresion_relacional ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // casos ::= casos INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Caso"), c.getInstrucciones());
                                                                                                        RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                        RESULT.addHijo(c);
                                                                                                        RESULT.addHijo("¿");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("?");
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // casos ::= INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                RESULT = new Produccion(new Nodo("Caso"), new LinkedList<>());
                                                                                                RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                RESULT.addHijo("¿");
                                                                                                RESULT.addHijo(e);
                                                                                                RESULT.addHijo("?");
                                                                                                RESULT.addHijo("Entonces");
                                                                                                RESULT.addHijo(l);
                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // imprimir ::= IMPRIMIR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new Imprimir((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // imprimir ::= IMPRIMIR_NL expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new ImprimirSaltoLinea((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresiones ::= expresion 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresiones ::= expresion_logica 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion SUMA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion RESTA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MULTIPLICACION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("*");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion DIVISION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.DIVISION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion MODULO expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MODULO));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("Modulo");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion POTENCIA CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                                new Operacion((Operacion)a.getInstruccion(), 
                                                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.POTENCIA));
                                                                                RESULT.addHijo(a);
                                                                                RESULT.addHijo("Potencia");
                                                                                RESULT.addHijo("[");
                                                                                RESULT.addHijo(b);
                                                                                RESULT.addHijo("]");
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= PARENTECIS_ABRE expresion PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= literales 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = li;
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion_relacional ::= expresion MAYOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_relacional ::= expresion MENOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MENOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_relacional ::= expresion MAYOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR_O_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR_O_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion_relacional ::= expresion MENOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR_O_IGUAL));
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion_relacional ::= expresion ES_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_relacional ::= expresion ES_DIFERENTE expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_DIFERENTE));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_DIFERENTE");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_relacional ::= PARENTECIS_ABRE expresion_relacional PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_logica ::= expresion_relacional AND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.AND));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("AND");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_logica ::= expresion_relacional OR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.OR));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("OR");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_logica ::= NOT expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                    e.getInstruccion());
                                                    RESULT.addHijo("Not");
                                                    RESULT.addHijo(e);
                                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

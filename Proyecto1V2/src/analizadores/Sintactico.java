
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import Estructuras.Produccion;
import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.Instrucciones.Asignacion;
import Estructuras.Instrucciones.Instruccion;
import Estructuras.Instrucciones.Operacion;
import Estructuras.Instrucciones.Evaluar;
import Estructuras.Instrucciones.SiEntonces;
import Estructuras.Instrucciones.Imprimir;
import Estructuras.Instrucciones.ImprimirSaltoLinea;
import Estructuras.Instrucciones.Segun;
import Estructuras.Instrucciones.Mientras;
import Estructuras.Instrucciones.Para;
import Estructuras.Instrucciones.Repetir;
import Estructuras.Instrucciones.Metodo;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\006\000\002\004\007\000\002\004\012\000" +
    "\002\004\011\000\002\004\007\000\002\004\012\000\002" +
    "\004\007\000\002\004\006\000\002\004\013\000\002\004" +
    "\012\000\002\004\015\000\002\004\006\000\002\004\005" +
    "\000\002\004\006\000\002\004\012\000\002\004\003\000" +
    "\002\004\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\006\005" +
    "\000\002\006\003\000\002\017\006\000\002\017\004\000" +
    "\002\011\007\000\002\011\006\000\002\016\010\000\002" +
    "\016\007\000\002\010\005\000\002\010\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\007\000\002\005\005\000\002" +
    "\005\003\000\002\005\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\004\005\001\002\000\004\002\247\001" +
    "\002\000\032\003\014\005\010\006\015\020\007\025\017" +
    "\026\006\027\022\033\016\035\020\040\021\061\012\066" +
    "\024\001\002\000\020\017\042\055\031\056\040\057\036" +
    "\060\041\061\033\063\032\001\002\000\020\017\042\055" +
    "\031\056\040\057\036\060\041\061\033\063\032\001\002" +
    "\000\004\002\uffff\001\002\000\054\003\ufffd\005\ufffd\006" +
    "\ufffd\020\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\042" +
    "\ufffd\061\ufffd\066\ufffd\067\ufffd\070\ufffd\072\ufffd\001\002" +
    "\000\010\007\uffe1\046\uffe1\102\uffe1\001\002\000\054\003" +
    "\uffec\005\uffec\006\uffec\020\uffec\022\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\040\uffec\042\uffec\061\uffec\066\uffec\067\uffec\070\uffec" +
    "\072\uffec\001\002\000\054\003\uffeb\005\uffeb\006\uffeb\020" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb\042\uffeb\061" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb\001\002\000\004" +
    "\061\012\001\002\000\020\017\042\055\031\056\040\057" +
    "\036\060\041\061\033\063\032\001\002\000\020\017\042" +
    "\055\031\056\040\057\036\060\041\061\033\063\032\001" +
    "\002\000\032\003\014\006\015\020\007\025\017\026\006" +
    "\027\022\033\016\035\020\036\201\040\021\061\012\066" +
    "\024\001\002\000\004\061\157\001\002\000\004\061\141" +
    "\001\002\000\006\046\135\102\134\001\002\000\020\017" +
    "\042\055\031\056\040\057\036\060\041\061\033\063\032" +
    "\001\002\000\032\003\014\005\026\006\015\020\007\025" +
    "\017\026\006\027\022\033\016\035\020\040\021\061\012" +
    "\066\024\001\002\000\004\002\000\001\002\000\054\003" +
    "\ufffe\005\ufffe\006\ufffe\020\ufffe\022\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\040\ufffe\042\ufffe\061\ufffe\066\ufffe\067\ufffe\070\ufffe" +
    "\072\ufffe\001\002\000\062\003\uffd7\005\uffd7\006\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\042" +
    "\uffd7\061\uffd7\062\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\001\002\000\130\003\uffe5\005\uffe5\006\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\042\uffe5\053\uffe5\054\uffe5\061\uffe5\062" +
    "\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\101" +
    "\uffe5\001\002\000\016\055\031\056\040\057\036\060\041" +
    "\061\033\063\032\001\002\000\130\003\uffcd\005\uffcd\006" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\040\uffcd\042\uffcd\053\uffcd\054\uffcd\061" +
    "\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd" +
    "\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077" +
    "\uffcd\101\uffcd\001\002\000\066\003\uffd6\005\uffd6\006\uffd6" +
    "\015\126\016\125\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\040\uffd6\042\uffd6\061\uffd6\062\uffd6\066\uffd6\067" +
    "\uffd6\070\uffd6\071\uffd6\072\uffd6\001\002\000\112\003\uffd8" +
    "\005\uffd8\006\uffd8\011\060\012\052\013\054\014\051\020" +
    "\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\042" +
    "\uffd8\053\055\054\047\061\uffd8\062\uffd8\065\050\066\uffd8" +
    "\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\061\074\057\075" +
    "\053\076\046\077\056\001\002\000\130\003\uffe3\005\uffe3" +
    "\006\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\053\uffe3\054\uffe3" +
    "\061\uffe3\062\uffe3\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070" +
    "\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\076\uffe3" +
    "\077\uffe3\101\uffe3\001\002\000\004\071\103\001\002\000" +
    "\130\003\uffe4\005\uffe4\006\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4\042" +
    "\uffe4\053\uffe4\054\uffe4\061\uffe4\062\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\076\uffe4\077\uffe4\101\uffe4\001\002\000\130" +
    "\003\uffe6\005\uffe6\006\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\040\uffe6\042\uffe6" +
    "\053\uffe6\054\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\075\uffe6\076\uffe6\077\uffe6\101\uffe6\001\002\000\016\055" +
    "\031\056\040\057\036\060\041\061\033\063\032\001\002" +
    "\000\130\003\uffce\005\uffce\006\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\040\uffce" +
    "\042\uffce\053\uffce\054\uffce\061\uffce\062\uffce\064\uffce\065" +
    "\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce\001\002\000" +
    "\062\003\uffc3\005\uffc3\006\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\040\uffc3\042\uffc3\061\uffc3\062\uffc3" +
    "\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\001\002\000" +
    "\032\011\060\012\052\013\054\014\051\053\055\054\047" +
    "\065\050\073\061\074\057\075\053\076\046\077\056\001" +
    "\002\000\004\100\100\001\002\000\016\055\031\056\040" +
    "\057\036\060\041\061\033\063\062\001\002\000\016\055" +
    "\031\056\040\057\036\060\041\061\033\063\062\001\002" +
    "\000\016\055\031\056\040\057\036\060\041\061\033\063" +
    "\062\001\002\000\016\055\031\056\040\057\036\060\041" +
    "\061\033\063\062\001\002\000\016\055\031\056\040\057" +
    "\036\060\041\061\033\063\062\001\002\000\016\055\031" +
    "\056\040\057\036\060\041\061\033\063\062\001\002\000" +
    "\016\055\031\056\040\057\036\060\041\061\033\063\062" +
    "\001\002\000\016\055\031\056\040\057\036\060\041\061" +
    "\033\063\062\001\002\000\016\055\031\056\040\057\036" +
    "\060\041\061\033\063\062\001\002\000\016\055\031\056" +
    "\040\057\036\060\041\061\033\063\062\001\002\000\016" +
    "\055\031\056\040\057\036\060\041\061\033\063\062\001" +
    "\002\000\016\055\031\056\040\057\036\060\041\061\033" +
    "\063\062\001\002\000\130\003\uffd4\005\uffd4\006\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\040\uffd4\042\uffd4\053\uffd4\054\uffd4\061\uffd4\062" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\071\uffd4" +
    "\072\uffd4\073\uffd4\074\057\075\053\076\046\077\056\101" +
    "\uffd4\001\002\000\020\064\065\065\050\073\061\074\057" +
    "\075\053\076\046\077\056\001\002\000\130\003\uffcf\005" +
    "\uffcf\006\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\040\uffcf\042\uffcf\053\uffcf\054" +
    "\uffcf\061\uffcf\062\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\076" +
    "\uffcf\077\uffcf\101\uffcf\001\002\000\104\003\uffca\005\uffca" +
    "\006\uffca\015\uffca\016\uffca\020\uffca\021\uffca\022\uffca\024" +
    "\uffca\025\uffca\026\uffca\027\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\040\uffca\042\uffca\061\uffca\062\uffca\064" +
    "\uffca\065\050\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca" +
    "\073\061\074\057\075\053\076\046\077\056\001\002\000" +
    "\130\003\uffd2\005\uffd2\006\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\016\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\042" +
    "\uffd2\053\uffd2\054\uffd2\061\uffd2\062\uffd2\064\uffd2\065\uffd2" +
    "\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\075\uffd2\076\046\077\056\101\uffd2\001\002\000\130" +
    "\003\uffd1\005\uffd1\006\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\042\uffd1" +
    "\053\uffd1\054\uffd1\061\uffd1\062\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\101\uffd1\001\002\000\104\003" +
    "\uffcc\005\uffcc\006\uffcc\015\uffcc\016\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\042\uffcc\061\uffcc" +
    "\062\uffcc\064\uffcc\065\050\066\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\061\074\057\075\053\076\046\077\056" +
    "\001\002\000\104\003\uffc8\005\uffc8\006\uffc8\015\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\040" +
    "\uffc8\042\uffc8\061\uffc8\062\uffc8\064\uffc8\065\050\066\uffc8" +
    "\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\061\074\057\075" +
    "\053\076\046\077\056\001\002\000\130\003\uffd3\005\uffd3" +
    "\006\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\040\uffd3\042\uffd3\053\uffd3\054\uffd3" +
    "\061\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070" +
    "\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\046" +
    "\077\056\101\uffd3\001\002\000\104\003\uffc9\005\uffc9\006" +
    "\uffc9\015\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\040\uffc9\042\uffc9\061\uffc9\062\uffc9\064\uffc9" +
    "\065\050\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073" +
    "\061\074\057\075\053\076\046\077\056\001\002\000\104" +
    "\003\uffc7\005\uffc7\006\uffc7\015\uffc7\016\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\042\uffc7\061" +
    "\uffc7\062\uffc7\064\uffc7\065\050\066\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\072\uffc7\073\061\074\057\075\053\076\046\077" +
    "\056\001\002\000\130\003\uffd5\005\uffd5\006\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\040\uffd5\042\uffd5\053\uffd5\054\uffd5\061\uffd5\062\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\071\uffd5\072" +
    "\uffd5\073\uffd5\074\057\075\053\076\046\077\056\101\uffd5" +
    "\001\002\000\104\003\uffcb\005\uffcb\006\uffcb\015\uffcb\016" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\040" +
    "\uffcb\042\uffcb\061\uffcb\062\uffcb\064\uffcb\065\050\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\061\074\057\075" +
    "\053\076\046\077\056\001\002\000\016\055\031\056\040" +
    "\057\036\060\041\061\033\063\062\001\002\000\020\065" +
    "\050\073\061\074\057\075\053\076\046\077\056\101\102" +
    "\001\002\000\130\003\uffd0\005\uffd0\006\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\042\uffd0\053\uffd0\054\uffd0\061\uffd0\062\uffd0\064" +
    "\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0" +
    "\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\101\uffd0\001" +
    "\002\000\030\003\014\006\015\020\007\025\017\026\006" +
    "\027\022\033\016\035\020\040\021\061\012\066\024\001" +
    "\002\000\036\003\014\006\015\020\007\025\017\026\006" +
    "\027\022\033\016\035\020\040\021\061\012\066\024\067" +
    "\110\070\105\072\107\001\002\000\016\055\031\056\040" +
    "\057\036\060\041\061\033\063\032\001\002\000\006\070" +
    "\114\072\113\001\002\000\030\003\014\006\015\020\007" +
    "\025\017\026\006\027\022\033\016\035\020\040\021\061" +
    "\012\066\024\001\002\000\054\003\ufffa\005\ufffa\006\ufffa" +
    "\020\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\032" +
    "\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa\042\ufffa" +
    "\061\ufffa\066\ufffa\067\ufffa\070\ufffa\072\ufffa\001\002\000" +
    "\032\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\033\016\035\020\040\021\061\012\066\024\067\112\001" +
    "\002\000\054\003\ufff8\005\ufff8\006\ufff8\020\ufff8\022\ufff8" +
    "\024\ufff8\025\ufff8\026\ufff8\027\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8\061\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\072\ufff8\001\002\000\030\003\014\006" +
    "\015\020\007\025\017\026\006\027\022\033\016\035\020" +
    "\040\021\061\012\066\024\001\002\000\020\017\042\055" +
    "\031\056\040\057\036\060\041\061\033\063\032\001\002" +
    "\000\004\071\116\001\002\000\030\003\014\006\015\020" +
    "\007\025\017\026\006\027\022\033\016\035\020\040\021" +
    "\061\012\066\024\001\002\000\034\003\014\006\015\020" +
    "\007\025\017\026\006\027\022\033\016\035\020\040\021" +
    "\061\012\066\024\070\uffde\072\uffde\001\002\000\032\003" +
    "\014\006\015\020\007\025\017\026\006\027\022\033\016" +
    "\035\020\040\021\061\012\066\024\067\121\001\002\000" +
    "\054\003\ufff9\005\ufff9\006\ufff9\020\ufff9\022\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\040\ufff9\042\ufff9\061\ufff9\066\ufff9\067\ufff9" +
    "\070\ufff9\072\ufff9\001\002\000\004\071\123\001\002\000" +
    "\030\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\033\016\035\020\040\021\061\012\066\024\001\002\000" +
    "\034\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\033\016\035\020\040\021\061\012\066\024\070\uffdd\072" +
    "\uffdd\001\002\000\016\055\031\056\040\057\036\060\041" +
    "\061\033\063\032\001\002\000\016\055\031\056\040\057" +
    "\036\060\041\061\033\063\032\001\002\000\062\003\uffc4" +
    "\005\uffc4\006\uffc4\020\uffc4\021\uffc4\022\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\040\uffc4\042\uffc4\061\uffc4\062\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\001\002\000\062\003\uffc5" +
    "\005\uffc5\006\uffc5\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\040\uffc5\042\uffc5\061\uffc5\062\uffc5\066\uffc5\067" +
    "\uffc5\070\uffc5\071\uffc5\072\uffc5\001\002\000\004\064\133" +
    "\001\002\000\034\011\060\012\052\013\054\014\051\053" +
    "\055\054\047\064\065\065\050\073\061\074\057\075\053" +
    "\076\046\077\056\001\002\000\070\003\uffc6\005\uffc6\006" +
    "\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\040\uffc6\042\uffc6\061\uffc6\062\uffc6\064\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\001\002\000" +
    "\004\061\140\001\002\000\016\055\031\056\040\057\036" +
    "\060\041\061\033\063\062\001\002\000\020\062\137\065" +
    "\050\073\061\074\057\075\053\076\046\077\056\001\002" +
    "\000\054\003\ufffb\005\ufffb\006\ufffb\020\ufffb\022\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\040\ufffb\042\ufffb\061\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\072\ufffb\001\002\000\010\007\uffe2\046\uffe2" +
    "\102\uffe2\001\002\000\004\046\142\001\002\000\016\055" +
    "\031\056\040\057\036\060\041\061\033\063\062\001\002" +
    "\000\020\030\144\065\050\073\061\074\057\075\053\076" +
    "\046\077\056\001\002\000\016\055\031\056\040\057\036" +
    "\060\041\061\033\063\062\001\002\000\022\021\146\031" +
    "\147\065\050\073\061\074\057\075\053\076\046\077\056" +
    "\001\002\000\032\003\014\006\015\020\007\025\017\026" +
    "\006\027\022\032\154\033\016\035\020\040\021\061\012" +
    "\066\024\001\002\000\016\055\031\056\040\057\036\060" +
    "\041\061\033\063\062\001\002\000\020\021\151\065\050" +
    "\073\061\074\057\075\053\076\046\077\056\001\002\000" +
    "\030\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\033\016\035\020\040\021\061\012\066\024\001\002\000" +
    "\032\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\032\153\033\016\035\020\040\021\061\012\066\024\001" +
    "\002\000\054\003\ufff1\005\ufff1\006\ufff1\020\ufff1\022\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1\061\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\072\ufff1\001\002\000\054\003\ufff2\005" +
    "\ufff2\006\ufff2\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\040" +
    "\ufff2\042\ufff2\061\ufff2\066\ufff2\067\ufff2\070\ufff2\072\ufff2" +
    "\001\002\000\032\003\014\006\015\020\007\025\017\026" +
    "\006\027\022\032\156\033\016\035\020\040\021\061\012" +
    "\066\024\001\002\000\054\003\ufff3\005\ufff3\006\ufff3\020" +
    "\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3\061" +
    "\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\001\002\000\032" +
    "\003\014\006\015\020\007\025\017\026\006\027\022\033" +
    "\016\035\020\040\021\041\160\061\012\066\024\001\002" +
    "\000\004\063\163\001\002\000\032\003\014\006\015\020" +
    "\007\025\017\026\006\027\022\033\016\035\020\040\021" +
    "\042\162\061\012\066\024\001\002\000\054\003\uffee\005" +
    "\uffee\006\uffee\020\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\027\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\040" +
    "\uffee\042\uffee\061\uffee\066\uffee\067\uffee\070\uffee\072\uffee" +
    "\001\002\000\004\061\165\001\002\000\006\064\174\102" +
    "\173\001\002\000\012\047\171\050\166\051\170\052\172" +
    "\001\002\000\010\010\uffe9\064\uffe9\102\uffe9\001\002\000" +
    "\006\064\uffdf\102\uffdf\001\002\000\010\010\uffe8\064\uffe8" +
    "\102\uffe8\001\002\000\010\010\uffea\064\uffea\102\uffea\001" +
    "\002\000\010\010\uffe7\064\uffe7\102\uffe7\001\002\000\004" +
    "\061\177\001\002\000\030\003\014\006\015\020\007\025" +
    "\017\026\006\027\022\033\016\035\020\040\021\061\012" +
    "\066\024\001\002\000\032\003\014\006\015\020\007\025" +
    "\017\026\006\027\022\033\016\035\020\040\021\042\176" +
    "\061\012\066\024\001\002\000\054\003\uffed\005\uffed\006" +
    "\uffed\020\uffed\022\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\040\uffed\042" +
    "\uffed\061\uffed\066\uffed\067\uffed\070\uffed\072\uffed\001\002" +
    "\000\012\047\171\050\166\051\170\052\172\001\002\000" +
    "\006\064\uffe0\102\uffe0\001\002\000\020\017\042\055\031" +
    "\056\040\057\036\060\041\061\033\063\032\001\002\000" +
    "\032\003\014\006\015\020\007\025\017\026\006\027\022" +
    "\033\016\035\020\036\203\040\021\061\012\066\024\001" +
    "\002\000\020\017\042\055\031\056\040\057\036\060\041" +
    "\061\033\063\032\001\002\000\054\003\ufff0\005\ufff0\006" +
    "\ufff0\020\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\042" +
    "\ufff0\061\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0\001\002" +
    "\000\054\003\uffef\005\uffef\006\uffef\020\uffef\022\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\040\uffef\042\uffef\061\uffef\066\uffef\067" +
    "\uffef\070\uffef\072\uffef\001\002\000\004\062\207\001\002" +
    "\000\054\003\uffda\005\uffda\006\uffda\020\uffda\022\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\032\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\040\uffda\042\uffda\061\uffda\066\uffda\067" +
    "\uffda\070\uffda\072\uffda\001\002\000\004\021\211\001\002" +
    "\000\032\003\014\006\015\020\007\025\017\026\006\027" +
    "\022\033\016\034\212\035\020\040\021\061\012\066\024" +
    "\001\002\000\054\003\ufff4\005\ufff4\006\ufff4\020\ufff4\022" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\040\ufff4\042\ufff4\061\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\072\ufff4\001\002\000\032\003\014" +
    "\006\015\020\007\025\017\026\006\027\022\033\016\034" +
    "\214\035\020\040\021\061\012\066\024\001\002\000\054" +
    "\003\ufff5\005\ufff5\006\ufff5\020\ufff5\022\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\040\ufff5\042\ufff5\061\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\072\ufff5\001\002\000\006\007\216\102\134\001\002" +
    "\000\012\047\171\050\166\051\170\052\172\001\002\000" +
    "\004\010\220\001\002\000\020\017\042\055\031\056\040" +
    "\057\036\060\041\061\033\063\032\001\002\000\004\062" +
    "\222\001\002\000\054\003\ufffc\005\ufffc\006\ufffc\020\ufffc" +
    "\022\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\032\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\042\ufffc\061\ufffc" +
    "\066\ufffc\067\ufffc\070\ufffc\072\ufffc\001\002\000\004\021" +
    "\224\001\002\000\004\022\226\001\002\000\010\022\235" +
    "\024\234\072\233\001\002\000\016\055\031\056\040\057" +
    "\036\060\041\061\033\063\062\001\002\000\020\023\230" +
    "\065\050\073\061\074\057\075\053\076\046\077\056\001" +
    "\002\000\004\071\231\001\002\000\030\003\014\006\015" +
    "\020\007\025\017\026\006\027\022\033\016\035\020\040" +
    "\021\061\012\066\024\001\002\000\036\003\014\006\015" +
    "\020\007\022\uffdb\024\uffdb\025\017\026\006\027\022\033" +
    "\016\035\020\040\021\061\012\066\024\072\uffdb\001\002" +
    "\000\004\071\242\001\002\000\054\003\ufff7\005\ufff7\006" +
    "\ufff7\020\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\042" +
    "\ufff7\061\ufff7\066\ufff7\067\ufff7\070\ufff7\072\ufff7\001\002" +
    "\000\016\055\031\056\040\057\036\060\041\061\033\063" +
    "\062\001\002\000\020\023\237\065\050\073\061\074\057" +
    "\075\053\076\046\077\056\001\002\000\004\071\240\001" +
    "\002\000\030\003\014\006\015\020\007\025\017\026\006" +
    "\027\022\033\016\035\020\040\021\061\012\066\024\001" +
    "\002\000\036\003\014\006\015\020\007\022\uffdc\024\uffdc" +
    "\025\017\026\006\027\022\033\016\035\020\040\021\061" +
    "\012\066\024\072\uffdc\001\002\000\030\003\014\006\015" +
    "\020\007\025\017\026\006\027\022\033\016\035\020\040" +
    "\021\061\012\066\024\001\002\000\032\003\014\006\015" +
    "\020\007\024\244\025\017\026\006\027\022\033\016\035" +
    "\020\040\021\061\012\066\024\001\002\000\054\003\ufff6" +
    "\005\ufff6\006\ufff6\020\ufff6\022\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\040\ufff6\042\ufff6\061\ufff6\066\ufff6\067\ufff6\070\ufff6\072" +
    "\ufff6\001\002\000\004\062\246\001\002\000\054\003\uffd9" +
    "\005\uffd9\006\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\040\uffd9\042\uffd9\061\uffd9\066\uffd9\067\uffd9\070\uffd9\072" +
    "\uffd9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\024\004\010\006\022\010\012\001\001\000\014" +
    "\005\034\007\033\012\042\014\244\015\027\001\001\000" +
    "\014\005\034\007\033\012\042\014\222\015\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\214\001\001" +
    "\000\014\005\034\007\033\012\042\014\207\015\027\001" +
    "\001\000\014\005\034\007\033\012\042\014\205\015\027" +
    "\001\001\000\012\003\201\004\010\006\022\010\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\034\007\033\012\042\014\036\015\027\001" +
    "\001\000\010\004\026\006\022\010\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\131\007\130\012\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\044\007\043\012\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\076\012\042\001\001\000\006\005\075\012" +
    "\042\001\001\000\006\005\074\012\042\001\001\000\006" +
    "\005\073\012\042\001\001\000\006\005\072\012\042\001" +
    "\001\000\006\005\071\012\042\001\001\000\006\005\070" +
    "\012\042\001\001\000\006\005\067\012\042\001\001\000" +
    "\006\005\066\012\042\001\001\000\006\005\065\012\042" +
    "\001\001\000\006\005\062\012\042\001\001\000\006\005" +
    "\063\012\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\100\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\103\004" +
    "\010\006\022\010\012\001\001\000\012\004\026\006\022" +
    "\010\012\011\105\001\001\000\010\005\044\007\121\012" +
    "\042\001\001\000\002\001\001\000\012\003\110\004\010" +
    "\006\022\010\012\001\001\000\002\001\001\000\010\004" +
    "\026\006\022\010\012\001\001\000\002\001\001\000\012" +
    "\003\117\004\010\006\022\010\012\001\001\000\014\005" +
    "\034\007\033\012\042\014\114\015\027\001\001\000\002" +
    "\001\001\000\012\003\116\004\010\006\022\010\012\001" +
    "\001\000\010\004\026\006\022\010\012\001\001\000\010" +
    "\004\026\006\022\010\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\123\004\010\006\022\010\012" +
    "\001\001\000\010\004\026\006\022\010\012\001\001\000" +
    "\010\005\044\007\127\012\042\001\001\000\010\005\044" +
    "\007\126\012\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\135\012\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\142\012\042\001\001\000\002\001" +
    "\001\000\006\005\144\012\042\001\001\000\002\001\001" +
    "\000\012\003\154\004\010\006\022\010\012\001\001\000" +
    "\006\005\147\012\042\001\001\000\002\001\001\000\012" +
    "\003\151\004\010\006\022\010\012\001\001\000\010\004" +
    "\026\006\022\010\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\026\006\022\010\012\001\001\000" +
    "\002\001\001\000\012\003\160\004\010\006\022\010\012" +
    "\001\001\000\002\001\001\000\010\004\026\006\022\010" +
    "\012\001\001\000\002\001\001\000\004\017\163\001\001" +
    "\000\002\001\001\000\004\013\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\174\004" +
    "\010\006\022\010\012\001\001\000\010\004\026\006\022" +
    "\010\012\001\001\000\002\001\001\000\004\013\177\001" +
    "\001\000\002\001\001\000\014\005\034\007\033\012\042" +
    "\014\204\015\027\001\001\000\010\004\026\006\022\010" +
    "\012\001\001\000\014\005\034\007\033\012\042\014\203" +
    "\015\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\212\004\010\006\022\010\012\001\001\000\002\001" +
    "\001\000\010\004\026\006\022\010\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\216\001\001\000" +
    "\002\001\001\000\014\005\034\007\033\012\042\014\220" +
    "\015\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\224\001\001\000\002\001\001" +
    "\000\006\005\226\012\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\231\004\010\006\022\010\012" +
    "\001\001\000\010\004\026\006\022\010\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\235\012\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\240\004\010\006\022\010\012\001\001\000\010\004\026" +
    "\006\022\010\012\001\001\000\012\003\242\004\010\006" +
    "\022\010\012\001\001\000\010\004\026\006\022\010\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> AST;
    public Arbol arbol;
    /*Aca puedo colocar una variable global para ir contado los numeros de ifs anidados  para dar saltos de linea */

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

    public Arbol getArbol() {
        return arbol;
    }

    public LinkedList<Instruccion> getAST() {
        return AST;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		                                                
                                                    parser.AST = a.getInstrucciones();
                                                    Nodo nodoRaiz = new Nodo("Iniciar"); nodoRaiz.addHijo(a.getNodo());
                                                    parser.arbol = new Arbol(nodoRaiz);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;
		 System.out.println("No hay intrucciones que procesar."); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                                                    RESULT = new Produccion(new Nodo("Lista Instrucciones"), a.getInstrucciones());
                                                                    RESULT.addInstruccion(b.getInstruccion());
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                            RESULT = new Produccion(new Nodo("Instrucciones"), new LinkedList<>()); 
                                            RESULT.addInstruccion(a.getInstruccion());
                                            RESULT.addHijo(a);
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= INGRESAR var COMO tipo_dato CON_VALOR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
                                                                            RESULT = new Produccion(new Nodo("Declaracion"), 
                                                                            new Evaluar(v.getInstrucciones(), (Operacion)e.getInstruccion()));

                                                                            RESULT.addHijo("Ingresar");
                                                                            RESULT.addHijo(v);
                                                                            RESULT.addHijo("Como");
                                                                            RESULT.addHijo(tp);
                                                                            RESULT.addHijo("Con_valor");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo(";");

                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Asignacion"), 
                                                                                new Asignacion(v.getInstrucciones(), (Operacion)e.getInstruccion()));
                                                                RESULT.addHijo(v);
                                                                RESULT.addHijo(a);
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(";");
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    RESULT = new Produccion(new Nodo("Condicional"), 
                                                                            new SiEntonces((Operacion)a.getInstruccion(), b.getInstrucciones()));
                                                                    RESULT.addHijo("Si");
                                                                    RESULT.addHijo(a);
                                                                    RESULT.addHijo("Entonces");
                                                                    RESULT.addHijo(b);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones osi DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                            RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                                new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), o.getInstrucciones(), l2.getInstrucciones()));
                                                                                                            RESULT.addHijo("Si");
                                                                                                            RESULT.addHijo(e);
                                                                                                            RESULT.addHijo("Entonces");
                                                                                                            RESULT.addHijo(l);
                                                                                                            RESULT.addHijo(o);
                                                                                                            RESULT.addHijo("DeLoContrario");
                                                                                                            RESULT.addHijo(l2);
                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= SI expresiones ENTONCES lista_instrucciones DE_LO_CONTRARIO lista_instrucciones FIN_SI 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l2 = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Condicional"),
                                                                                                            new SiEntonces((Operacion)e.getInstruccion(), l.getInstrucciones(), l2.getInstrucciones()));
                                                                                                        RESULT.addHijo("Si");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                        RESULT.addHijo("DeLoContrario");
                                                                                                        RESULT.addHijo(l2);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= SEGUN expresiones HACER casos FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Segun"), 
                                                            new Segun((Operacion)e.getInstruccion(), c.getInstrucciones()));
                                                    RESULT.addHijo("segun");
                                                    RESULT.addHijo(e);
                                                    RESULT.addHijo("Hacer");
                                                    RESULT.addHijo(c);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= SEGUN expresiones HACER casos DE_LO_CONTRARIO ENTONCES lista_instrucciones FIN_SEGUN 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                    RESULT = new Produccion(new Nodo("Segun"),
                                                                                                        new SiEntonces((Operacion)e.getInstruccion(), c.getInstrucciones(), l.getInstrucciones()));
                                                                                                    RESULT.addHijo("segun");
                                                                                                    RESULT.addHijo(e);
                                                                                                    RESULT.addHijo("Hacer");
                                                                                                    RESULT.addHijo(c);
                                                                                                    RESULT.addHijo("DeLoContrario");
                                                                                                    RESULT.addHijo(l);
                                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= MIENTRAS expresiones HACER lista_instrucciones FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                            RESULT = new Produccion(new Nodo("Mientras"),
                                                                                new Mientras((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                            //RESULT.addHijo("Mientras");
                                                                            RESULT.addHijo(e);
                                                                            RESULT.addHijo("Hacer");
                                                                            RESULT.addHijo(l);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= MIENTRAS expresiones HACER FIN_MIENTRAS 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                        RESULT = new Produccion(new Nodo("Mientras"), 
                                                                new Mientras((Operacion)e.getInstruccion()));
                                                        RESULT.addHijo(e);
                                                        RESULT.addHijo("Hacer");
                                                    
                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Para"),
                                                                                                            new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), l.getInstrucciones()));
                                                                                                        //RESULT.addHijo("Mientras");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("Hasta");
                                                                                                        RESULT.addHijo(eh);
                                                                                                        RESULT.addHijo("Hacer");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion HACER FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                                                    RESULT = new Produccion(new Nodo("Para"),
                                                                                        new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion()));                                                                        
                                                                                    RESULT.addHijo(e);
                                                                                    RESULT.addHijo("Hasta");
                                                                                    RESULT.addHijo(eh);
                                                                                    RESULT.addHijo("Hacer");
                                                                            
                                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucciones ::= PARA VARIABLE ASIGNACION expresion HASTA expresion CON_INCREMENTAL expresion HACER lista_instrucciones FIN_PARA 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int ehleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int ehright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion eh = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion incremento = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                                                            RESULT = new Produccion(new Nodo("Para"),
                                                                                                                                new Para(v, (Operacion)e.getInstruccion(), (Operacion)eh.getInstruccion(), (Operacion)incremento.getInstruccion(), li.getInstrucciones()));                                                                        
                                                                                                                            RESULT.addHijo(e);
                                                                                                                            RESULT.addHijo("Hasta");
                                                                                                                            RESULT.addHijo(eh);
                                                                                                                            RESULT.addHijo("Con_Incremento");
                                                                                                                            RESULT.addHijo(incremento);
                                                                                                                            RESULT.addHijo("Hacer");
                                                                                                                            RESULT.addHijo(li);
                                                                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciones ::= REPETIR lista_instrucciones HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Repetir"),
                                                                new Repetir(li.getInstrucciones(), (Operacion)e.getInstruccion()));                                                                        
                                                            RESULT.addHijo(li);
                                                            RESULT.addHijo("Hasta_Que");
                                                            RESULT.addHijo(e);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciones ::= REPETIR HASTA_QUE expresiones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                        RESULT = new Produccion(new Nodo("Repetir"),
                                            new Repetir((Operacion)e.getInstruccion()));                                                                        
                                        RESULT.addHijo("Hasta_Que");
                                        RESULT.addHijo(e);
                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciones ::= METODO VARIABLE lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Metodo"),
                                                                    new Metodo(v, li.getInstrucciones()));
                                                                RESULT.addHijo(v);                                                                        
                                                                RESULT.addHijo(li);
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucciones ::= METODO VARIABLE CON_PARAMETROS PARENTECIS_ABRE lista_parametros PARENTECIS_CIERRA lista_instrucciones FIN_METODO 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion lp = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Metodo"),
                                                                    new Metodo(v, lp.getInstrucciones(), li.getInstrucciones()));  
                                                                RESULT.addHijo(v);
                                                                RESULT.addHijo(lp);                                                                      
                                                                RESULT.addHijo(li);
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucciones ::= imprimir 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= error 
            {
              Produccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_dato ::= BOOLEAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_dato ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_dato ::= CARACTER 
            {
              String RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int carright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = car;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_dato ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = cad;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // literales ::= LIT_NUMERO 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                            RESULT = new Produccion(new Nodo(null, a), new Operacion(a, Operacion.TipoOperacion.NUMERO)); 
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // literales ::= LIT_CADENA 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, c),
                                 new Operacion(c, Operacion.TipoOperacion.CADENA)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // literales ::= LIT_CARACTER 
            {
              Produccion RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                    RESULT = new Produccion(new Nodo(null, ca), 
                                    new Operacion(ca, Operacion.TipoOperacion.CARACTER)); 
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // literales ::= LIT_BOOLEAN 
            {
              Produccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                                RESULT = new Produccion(new Nodo(null, b), 
                                new Operacion(b, Operacion.TipoOperacion.BOOLEAN)); 
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literales",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var ::= var COMA VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                    RESULT = v;
                                    RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                    RESULT.addHijo(vu);
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new LinkedList<>());
                                    RESULT.addInstruccion((Operacion)v.getInstruccion());

                                    System.out.println("Soy: " + RESULT.getInstrucciones());*/
                                    /*
                                    RESULT = new Produccion(new Nodo("Variables"), 
                                    v.getInstruccion);*/
                                    //RESULT.addInstruccion(vu.getInstruccion());
                                    //RESULT.addHijo(vu);
                                    
                                    /*Este jala
                                    RESULT = new Produccion(new Nodo("Variables"),
                                                 new Operacion((Operacion)v.getInstruccion(), Operacion.TipoOperacion.VARIABLE));
                                     System.out.println("Voy aca");
                                    Produccion TEM = new Produccion(new Nodo(null, vu),
                                        new Operacion(vu, Operacion.TipoOperacion.VARIABLE)); 
                                        System.out.println("Vu"  + vu);

                                    */
                                       // System.out.println("TEM: "  +  TEM.getInstruccion());
                                   // RESULT.addInstruccion((Operacion)TEM.getInstruccion());    
                                    //RESULT.addInstruccion(TEM.getInstruccion());
                                  // ESTO SE AGRA DE ULTIMO
                                 // System.out.println("Voy aca hijo");
                                  
                                   //     System.out.println("no trono");
                                    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // var ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("var",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_parametros ::= lista_parametros COMA VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion v = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int vuleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vuright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String vu = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = v;
                                                                        RESULT.addInstruccion( new Operacion(vu, Operacion.TipoOperacion.VARIABLE));
                                                                        RESULT.addHijo(vu);
/*Golan
                                                                    String temp2 = vu + " " + td;
                                                                    RESULT = v;
                                                                    RESULT.addInstruccion( new Operacion(temp2, Operacion.TipoOperacion.VARIABLE));
                                                                    RESULT.addHijo(temp2);*/
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_parametros ::= VARIABLE tipo_dato 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                                String temp = v;
                                RESULT = new Produccion(new Nodo("Params"),
                                new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(v);
                                /* Golan
                                String temp = v + " " + td + ", ";
                                RESULT = new Produccion(new Nodo("Params"),
                                new Operacion(temp, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                                RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                                RESULT.addHijo(temp);
                                */
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // osi ::= osi O_SI expresiones ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion o = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), o.getInstrucciones());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo(o);
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // osi ::= O_SI expresion_relacional ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion i = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                        RESULT = new Produccion(new Nodo("O_si"), new LinkedList<>());
                                                                        RESULT.addInstruccion(new SiEntonces((Operacion)e.getInstruccion(), i.getInstrucciones()));
                                                                        RESULT.addHijo("o_si");
                                                                        RESULT.addHijo(e);
                                                                        RESULT.addHijo("entonces");
                                                                        RESULT.addHijo(i);
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("osi",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // casos ::= casos INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Produccion c = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                        RESULT = new Produccion(new Nodo("Caso"), c.getInstrucciones());
                                                                                                        RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                        RESULT.addHijo(c);
                                                                                                        RESULT.addHijo("¿");
                                                                                                        RESULT.addHijo(e);
                                                                                                        RESULT.addHijo("?");
                                                                                                        RESULT.addHijo("Entonces");
                                                                                                        RESULT.addHijo(l);
                                                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // casos ::= INTERROGACION_ABRE expresion INTERROGACION_CIERRA ENTONCES lista_instrucciones 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion l = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                                                RESULT = new Produccion(new Nodo("Caso"), new LinkedList<>());
                                                                                                RESULT.addInstruccion(new Segun((Operacion)e.getInstruccion(), l.getInstrucciones()));
                                                                                                RESULT.addHijo("¿");
                                                                                                RESULT.addHijo(e);
                                                                                                RESULT.addHijo("?");
                                                                                                RESULT.addHijo("Entonces");
                                                                                                RESULT.addHijo(l);
                                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // imprimir ::= IMPRIMIR expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new Imprimir((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // imprimir ::= IMPRIMIR_NL expresiones PUNTO_COMA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                    RESULT = new Produccion(new Nodo("Imprimir"), 
                                                                            new ImprimirSaltoLinea((Operacion)e.getInstruccion()));
                                                    RESULT.addHijo(e);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresiones ::= expresion 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones ::= expresion_logica 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones ::= expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = e;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= expresion SUMA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Arimetica"),
                                                 new Operacion((Operacion)a.getInstruccion(),
                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.SUMA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("+");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= expresion RESTA expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.RESTA));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("-");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MULTIPLICACION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("*");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion DIVISION expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.DIVISION));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("/");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MODULO expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                 new Operacion((Operacion)a.getInstruccion(), 
                                                 (Operacion)b.getInstruccion(), Operacion.TipoOperacion.MODULO));
                                                RESULT.addHijo(a);
                                                RESULT.addHijo("Modulo");
                                                RESULT.addHijo(b);
                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion POTENCIA CORCHETE_ABRE expresion CORCHETE_CIERRA 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                                new Operacion((Operacion)a.getInstruccion(), 
                                                                                (Operacion)b.getInstruccion(), Operacion.TipoOperacion.POTENCIA));
                                                                                RESULT.addHijo(a);
                                                                                RESULT.addHijo("Potencia");
                                                                                RESULT.addHijo("[");
                                                                                RESULT.addHijo(b);
                                                                                RESULT.addHijo("]");
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= PARENTECIS_ABRE expresion PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Aritmetica"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= literales 
            {
              Produccion RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion li = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = li;
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= VARIABLE 
            {
              Produccion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
                        //System.out.println(v);
                        RESULT = new Produccion(new Nodo("VARS"),
                        new Operacion(v, Operacion.TipoOperacion.VARIABLE), new LinkedList<>()); 
                         RESULT.addInstruccion( new Operacion(v, Operacion.TipoOperacion.VARIABLE));
                         RESULT.addHijo(v);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_relacional ::= expresion MAYOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_relacional ::= expresion MENOR expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MENOR");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_relacional ::= expresion MAYOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MAYOR_O_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("MAYOR_O_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_relacional ::= expresion MENOR_O_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.MENOR_O_IGUAL));
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_relacional ::= expresion ES_IGUAL expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_IGUAL));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_IGUAL");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_relacional ::= expresion ES_DIFERENTE expresion 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                            RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                    Operacion.TipoOperacion.ES_DIFERENTE));
                                                            RESULT.addHijo(a);
                                                            RESULT.addHijo("ES_DIFERENTE");
                                                            RESULT.addHijo(b);
                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_relacional ::= PARENTECIS_ABRE expresion_relacional PARENTECIS_CIERRA 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                RESULT = new Produccion(new Nodo("Expresion Relacional"),
                                                                    e.getInstruccion());
                                                                RESULT.addHijo("(");
                                                                RESULT.addHijo(e);
                                                                RESULT.addHijo(")");
                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_relacional",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion_logica ::= expresion_relacional AND expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.AND));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("AND");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion_logica ::= expresion_relacional OR expresion_relacional 
            {
              Produccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Produccion a = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion b = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                            RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                                    new Operacion((Operacion)a.getInstruccion(), (Operacion)b.getInstruccion(),
                                                                                    Operacion.TipoOperacion.OR));
                                                                            RESULT.addHijo(a);
                                                                            RESULT.addHijo("OR");
                                                                            RESULT.addHijo(b);
                                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion_logica ::= NOT expresion_relacional 
            {
              Produccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Produccion e = (Produccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                    RESULT = new Produccion(new Nodo("Expresion logica"),
                                                                    e.getInstruccion());
                                                    RESULT.addHijo("Not");
                                                    RESULT.addHijo(e);
                                                                
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

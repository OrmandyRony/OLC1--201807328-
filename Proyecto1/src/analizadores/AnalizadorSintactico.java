
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java.beans.Statement;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\007\000\002\020\005\000\002\020\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\023\006\000" +
    "\002\024\005\000\002\024\003\000\002\025\006\000\002" +
    "\025\006\000\002\025\006\000\002\005\011\000\002\007" +
    "\006\000\002\004\003\000\002\004\003\000\002\010\007" +
    "\000\002\010\011\000\002\010\012\000\002\010\007\000" +
    "\002\013\005\000\002\013\003\000\002\016\010\000\002" +
    "\016\007\000\002\016\005\000\002\014\007\000\002\014" +
    "\006\000\002\017\013\000\002\017\012\000\002\017\015" +
    "\000\002\017\007\000\002\017\006\000\002\017\006\000" +
    "\002\017\005\000\002\026\005\000\002\026\005\000\002" +
    "\027\006\000\002\027\007\000\002\030\007\000\002\030" +
    "\010\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\031\007\000\002\015\005\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\004\005\001\002\000\004\002\254\001" +
    "\002\000\034\005\035\006\012\007\016\035\031\042\007" +
    "\047\015\050\026\051\017\055\034\057\032\062\023\066" +
    "\036\070\014\001\002\000\060\005\ufff7\006\ufff7\007\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\041\ufff7\042\ufff7\044\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\062\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\001\002\000\014\007\060\016\057\031\056\032\055" +
    "\077\054\001\002\000\034\005\ufffd\006\ufffd\007\ufffd\035" +
    "\ufffd\042\ufffd\047\ufffd\050\ufffd\051\ufffd\055\ufffd\057\ufffd" +
    "\062\ufffd\066\ufffd\070\ufffd\001\002\000\060\005\ufff6\006" +
    "\ufff6\007\ufff6\035\ufff6\036\ufff6\037\ufff6\041\ufff6\042\ufff6" +
    "\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\054\ufff6\055" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6\065\ufff6\066\ufff6" +
    "\067\ufff6\070\ufff6\001\002\000\004\007\016\001\002\000" +
    "\060\005\ufff4\006\ufff4\007\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\041\ufff4\042\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\062\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\001\002\000\004\063" +
    "\206\001\002\000\002\001\002\000\010\010\uffdd\034\uffdd" +
    "\103\uffdd\001\002\000\004\007\166\001\002\000\060\005" +
    "\ufffa\006\ufffa\007\ufffa\035\ufffa\036\ufffa\037\ufffa\041\ufffa" +
    "\042\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\062\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\001\002\000\060\005\ufff9\006" +
    "\ufff9\007\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\042\ufff9" +
    "\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\001\002\000\060\005\ufffc\006\ufffc\007" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\041\ufffc\042\ufffc\044\ufffc" +
    "\046\ufffc\047\ufffc\050\ufffc\051\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\062\ufffc\065\ufffc\066\ufffc\067\ufffc" +
    "\070\ufffc\001\002\000\004\063\160\001\002\000\060\005" +
    "\ufffb\006\ufffb\007\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb" +
    "\042\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\062\ufffb\065\ufffb" +
    "\066\ufffb\067\ufffb\070\ufffb\001\002\000\034\005\157\006" +
    "\012\007\016\035\031\042\007\047\015\050\026\051\017" +
    "\055\034\057\032\062\023\066\036\070\014\001\002\000" +
    "\002\001\002\000\060\005\ufff8\006\ufff8\007\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\041\ufff8\042\ufff8\044\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\062\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\001" +
    "\002\000\060\005\ufff5\006\ufff5\007\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\041\ufff5\042\ufff5\044\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\051\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\062\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\001\002\000" +
    "\014\007\060\016\057\031\056\032\055\077\054\001\002" +
    "\000\034\006\012\007\016\035\031\042\007\047\015\050" +
    "\026\051\017\055\034\057\032\060\125\062\023\066\036" +
    "\070\014\001\002\000\006\034\116\103\115\001\002\000" +
    "\014\007\060\016\057\031\056\032\055\077\054\001\002" +
    "\000\004\002\uffff\001\002\000\004\063\037\001\002\000" +
    "\012\012\043\013\040\014\042\015\044\001\002\000\034" +
    "\006\uffbc\007\uffbc\035\uffbc\042\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\055\uffbc\057\uffbc\062\uffbc\064\uffbc\066\uffbc\070\uffbc" +
    "\001\002\000\034\006\012\007\016\035\031\042\007\047" +
    "\015\050\026\051\017\055\034\057\032\062\023\064\046" +
    "\066\036\070\014\001\002\000\034\006\uffbb\007\uffbb\035" +
    "\uffbb\042\uffbb\047\uffbb\050\uffbb\051\uffbb\055\uffbb\057\uffbb" +
    "\062\uffbb\064\uffbb\066\uffbb\070\uffbb\001\002\000\034\006" +
    "\uffbd\007\uffbd\035\uffbd\042\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\055\uffbd\057\uffbd\062\uffbd\064\uffbd\066\uffbd\070\uffbd\001" +
    "\002\000\034\006\uffba\007\uffba\035\uffba\042\uffba\047\uffba" +
    "\050\uffba\051\uffba\055\uffba\057\uffba\062\uffba\064\uffba\066" +
    "\uffba\070\uffba\001\002\000\004\067\051\001\002\000\032" +
    "\006\012\007\016\035\031\042\007\047\015\050\026\051" +
    "\017\055\034\057\032\062\023\066\036\070\014\001\002" +
    "\000\004\067\050\001\002\000\060\005\uffbe\006\uffbe\007" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe\042\uffbe\044\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\062\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\001\002\000\060\005\uffbf\006\uffbf\007\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\062\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\001\002\000\020\017\107\020\106\021\101\022\104\023" +
    "\110\024\105\043\102\001\002\000\114\005\uffd0\006\uffd0" +
    "\007\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\062\uffd0\065\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\071\062\072\066\073\067\074" +
    "\063\075\064\076\065\001\002\000\014\007\060\016\057" +
    "\031\056\032\055\077\054\001\002\000\130\005\ufff2\006" +
    "\ufff2\007\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\030\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\057\ufff2\060\ufff2\062\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076" +
    "\ufff2\100\ufff2\102\ufff2\001\002\000\130\005\ufff1\006\ufff1" +
    "\007\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\030\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\062\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1" +
    "\100\ufff1\102\ufff1\001\002\000\130\005\ufff3\006\ufff3\007" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\030\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\062\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3" +
    "\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\100" +
    "\ufff3\102\ufff3\001\002\000\130\005\ufff0\006\ufff0\007\ufff0" +
    "\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\030" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\062\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100\ufff0" +
    "\102\ufff0\001\002\000\020\071\062\072\066\073\067\074" +
    "\063\075\064\076\065\100\070\001\002\000\014\007\060" +
    "\016\057\031\056\032\055\077\054\001\002\000\014\007" +
    "\060\016\057\031\056\032\055\077\054\001\002\000\004" +
    "\101\074\001\002\000\014\007\060\016\057\031\056\032" +
    "\055\077\054\001\002\000\014\007\060\016\057\031\056" +
    "\032\055\077\054\001\002\000\014\007\060\016\057\031" +
    "\056\032\055\077\054\001\002\000\130\005\uffe9\006\uffe9" +
    "\007\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\030\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050" +
    "\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9" +
    "\057\uffe9\060\uffe9\062\uffe9\065\uffe9\066\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9" +
    "\100\uffe9\102\uffe9\001\002\000\130\005\uffec\006\uffec\007" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\030\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\062\uffec\065\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\075\064\076\065\100" +
    "\uffec\102\uffec\001\002\000\130\005\uffef\006\uffef\007\uffef" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\030" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\044\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef" +
    "\060\uffef\062\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\073\067\074\063\075\064\076\065\100\uffef" +
    "\102\uffef\001\002\000\130\005\uffea\006\uffea\007\uffea\017" +
    "\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\030\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060" +
    "\uffea\062\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea" +
    "\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\100\uffea\102" +
    "\uffea\001\002\000\014\007\060\016\057\031\056\032\055" +
    "\077\054\001\002\000\020\071\062\072\066\073\067\074" +
    "\063\075\064\076\065\102\076\001\002\000\130\005\uffeb" +
    "\006\uffeb\007\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\030\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\062\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb" +
    "\076\uffeb\100\uffeb\102\uffeb\001\002\000\130\005\uffed\006" +
    "\uffed\007\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\030\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed" +
    "\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\062\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\064\076" +
    "\065\100\uffed\102\uffed\001\002\000\130\005\uffee\006\uffee" +
    "\007\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\030\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\062\uffee\065\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\067\074\063\075\064\076\065" +
    "\100\uffee\102\uffee\001\002\000\014\007\uffe6\016\uffe6\031" +
    "\uffe6\032\uffe6\077\uffe6\001\002\000\034\006\012\007\016" +
    "\035\031\042\007\047\015\050\026\051\017\055\034\056" +
    "\113\057\032\062\023\066\036\070\014\001\002\000\014" +
    "\007\060\016\057\031\056\032\055\077\054\001\002\000" +
    "\014\007\uffe5\016\uffe5\031\uffe5\032\uffe5\077\uffe5\001\002" +
    "\000\014\007\uffe3\016\uffe3\031\uffe3\032\uffe3\077\uffe3\001" +
    "\002\000\014\007\uffe7\016\uffe7\031\uffe7\032\uffe7\077\uffe7" +
    "\001\002\000\014\007\uffe8\016\uffe8\031\uffe8\032\uffe8\077" +
    "\uffe8\001\002\000\014\007\uffe4\016\uffe4\031\uffe4\032\uffe4" +
    "\077\uffe4\001\002\000\114\005\uffd1\006\uffd1\007\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\062\uffd1\065\uffd1\066\uffd1\067" +
    "\uffd1\070\uffd1\071\062\072\066\073\067\074\063\075\064" +
    "\076\065\001\002\000\004\056\114\001\002\000\060\005" +
    "\uffc6\006\uffc6\007\uffc6\035\uffc6\036\uffc6\037\uffc6\041\uffc6" +
    "\042\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\065\uffc6" +
    "\066\uffc6\067\uffc6\070\uffc6\001\002\000\060\005\uffc7\006" +
    "\uffc7\007\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042\uffc7" +
    "\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\001\002\000\004\007\123\001\002\000" +
    "\016\007\060\016\057\031\056\032\055\033\120\077\054" +
    "\001\002\000\020\030\uffd7\071\062\072\066\073\067\074" +
    "\063\075\064\076\065\001\002\000\004\030\uffd6\001\002" +
    "\000\004\030\122\001\002\000\060\005\uffd8\006\uffd8\007" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\051\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\062\uffd8\065\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\001\002\000\010\010\uffde\034\uffde\103\uffde\001" +
    "\002\000\004\060\127\001\002\000\014\007\060\016\057" +
    "\031\056\032\055\077\054\001\002\000\074\005\uffc4\006" +
    "\uffc4\007\uffc4\017\107\020\106\021\101\022\104\023\110" +
    "\024\105\035\uffc4\036\uffc4\037\uffc4\041\uffc4\042\uffc4\044" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\062\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\001\002\000\014\007\060\016\057\031\056" +
    "\032\055\077\054\001\002\000\074\005\uffc5\006\uffc5\007" +
    "\uffc5\017\107\020\106\021\101\022\104\023\110\024\105" +
    "\035\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\062\uffc5\065\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\001\002\000\020\017\107\020\106\021\101\022\104" +
    "\023\110\024\105\040\132\001\002\000\032\006\012\007" +
    "\016\035\031\042\007\047\015\050\026\051\017\055\034" +
    "\057\032\062\023\066\036\070\014\001\002\000\010\036" +
    "\134\037\136\041\135\001\002\000\060\005\uffd5\006\uffd5" +
    "\007\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\044" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\062\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\001\002\000\032\006\012\007\016\035\031" +
    "\042\007\047\015\050\026\051\017\055\034\057\032\062" +
    "\023\066\036\070\014\001\002\000\014\007\060\016\057" +
    "\031\056\032\055\077\054\001\002\000\006\037\141\041" +
    "\140\001\002\000\032\006\012\007\016\035\031\042\007" +
    "\047\015\050\026\051\017\055\034\057\032\062\023\066" +
    "\036\070\014\001\002\000\014\007\060\016\057\031\056" +
    "\032\055\077\054\001\002\000\020\017\107\020\106\021" +
    "\101\022\104\023\110\024\105\040\143\001\002\000\032" +
    "\006\012\007\016\035\031\042\007\047\015\050\026\051" +
    "\017\055\034\057\032\062\023\066\036\070\014\001\002" +
    "\000\006\037\uffcc\041\uffcc\001\002\000\004\036\146\001" +
    "\002\000\060\005\uffd3\006\uffd3\007\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\041\uffd3\042\uffd3\044\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3" +
    "\062\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3\001\002\000" +
    "\020\017\107\020\106\021\101\022\104\023\110\024\105" +
    "\040\150\001\002\000\032\006\012\007\016\035\031\042" +
    "\007\047\015\050\026\051\017\055\034\057\032\062\023" +
    "\066\036\070\014\001\002\000\006\037\uffcb\041\uffcb\001" +
    "\002\000\004\036\153\001\002\000\060\005\uffd4\006\uffd4" +
    "\007\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\062\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\001\002\000\004\030\155\001\002\000\060" +
    "\005\uffb7\006\uffb7\007\uffb7\035\uffb7\036\uffb7\037\uffb7\041" +
    "\uffb7\042\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\062\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\001\002\000\034\005\ufffe" +
    "\006\ufffe\007\ufffe\035\ufffe\042\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\055\ufffe\057\ufffe\062\ufffe\066\ufffe\070\ufffe\001\002" +
    "\000\004\002\000\001\002\000\034\006\012\007\016\035" +
    "\031\042\007\047\015\050\026\051\017\055\034\057\032" +
    "\062\023\064\162\066\036\070\014\001\002\000\004\065" +
    "\165\001\002\000\032\006\012\007\016\035\031\042\007" +
    "\047\015\050\026\051\017\055\034\057\032\062\023\066" +
    "\036\070\014\001\002\000\004\065\164\001\002\000\060" +
    "\005\uffc0\006\uffc0\007\uffc0\035\uffc0\036\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002\000\060\005\uffc1" +
    "\006\uffc1\007\uffc1\035\uffc1\036\uffc1\037\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\062\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\070\uffc1\001\002\000\004\034\167\001\002" +
    "\000\014\007\060\016\057\031\056\032\055\077\054\001" +
    "\002\000\020\052\171\071\062\072\066\073\067\074\063" +
    "\075\064\076\065\001\002\000\014\007\060\016\057\031" +
    "\056\032\055\077\054\001\002\000\022\043\173\053\174" +
    "\071\062\072\066\073\067\074\063\075\064\076\065\001" +
    "\002\000\034\006\012\007\016\035\031\042\007\047\015" +
    "\050\026\051\017\054\202\055\034\057\032\062\023\066" +
    "\036\070\014\001\002\000\014\007\060\016\057\031\056" +
    "\032\055\077\054\001\002\000\020\043\176\071\062\072" +
    "\066\073\067\074\063\075\064\076\065\001\002\000\032" +
    "\006\012\007\016\035\031\042\007\047\015\050\026\051" +
    "\017\055\034\057\032\062\023\066\036\070\014\001\002" +
    "\000\004\054\200\001\002\000\060\005\uffc8\006\uffc8\007" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\044\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\062\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\070\uffc8\001\002\000\004\054\203\001\002\000\060\005" +
    "\uffc9\006\uffc9\007\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9" +
    "\042\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\062\uffc9\065\uffc9" +
    "\066\uffc9\067\uffc9\070\uffc9\001\002\000\060\005\uffca\006" +
    "\uffca\007\uffca\035\uffca\036\uffca\037\uffca\041\uffca\042\uffca" +
    "\044\uffca\046\uffca\047\uffca\050\uffca\051\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\062\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\001\002\000\004\030\205\001\002\000" +
    "\060\005\uffb8\006\uffb8\007\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\062\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\070\uffb8\001\002\000\004\077" +
    "\207\001\002\000\004\100\210\001\002\000\004\030\211" +
    "\001\002\000\060\005\uffb9\006\uffb9\007\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\041\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\062\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\001\002" +
    "\000\006\010\214\103\115\001\002\000\004\030\232\001" +
    "\002\000\012\012\217\013\215\014\216\015\220\001\002" +
    "\000\004\011\227\001\002\000\004\011\225\001\002\000" +
    "\004\011\223\001\002\000\004\011\221\001\002\000\004" +
    "\032\222\001\002\000\004\030\uffdb\001\002\000\004\033" +
    "\224\001\002\000\004\030\uffda\001\002\000\004\031\226" +
    "\001\002\000\004\030\uffdc\001\002\000\014\007\060\016" +
    "\057\031\056\032\055\077\054\001\002\000\020\030\231" +
    "\071\062\072\066\073\067\074\063\075\064\076\065\001" +
    "\002\000\060\005\uffd9\006\uffd9\007\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\041\uffd9\042\uffd9\044\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\062\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\001\002\000" +
    "\060\005\uffdf\006\uffdf\007\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\041\uffdf\042\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\062\uffdf" +
    "\065\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000\020\043" +
    "\234\071\062\072\066\073\067\074\063\075\064\076\065" +
    "\001\002\000\006\041\235\044\237\001\002\000\004\040" +
    "\252\001\002\000\006\044\245\046\244\001\002\000\014" +
    "\007\060\016\057\031\056\032\055\077\054\001\002\000" +
    "\020\045\241\071\062\072\066\073\067\074\063\075\064" +
    "\076\065\001\002\000\004\040\242\001\002\000\032\006" +
    "\012\007\016\035\031\042\007\047\015\050\026\051\017" +
    "\055\034\057\032\062\023\066\036\070\014\001\002\000" +
    "\006\044\uffce\046\uffce\001\002\000\060\005\uffd2\006\uffd2" +
    "\007\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\044" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\062\uffd2\065\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\001\002\000\014\007\060\016\057\031\056" +
    "\032\055\077\054\001\002\000\020\045\247\071\062\072" +
    "\066\073\067\074\063\075\064\076\065\001\002\000\004" +
    "\040\250\001\002\000\032\006\012\007\016\035\031\042" +
    "\007\047\015\050\026\051\017\055\034\057\032\062\023" +
    "\066\036\070\014\001\002\000\006\044\uffcf\046\uffcf\001" +
    "\002\000\032\006\012\007\016\035\031\042\007\047\015" +
    "\050\026\051\017\055\034\057\032\062\023\066\036\070" +
    "\014\001\002\000\006\044\uffcd\046\uffcd\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\002\003\001\001\000\002\001\001\000" +
    "\032\003\024\005\021\006\007\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\005\030\010\031\027\001" +
    "\001\000\002\001\001\000\004\020\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\021\006\155\007\017\010\020\015" +
    "\012\017\026\023\023\024\032\027\005\030\010\031\027" +
    "\001\001\000\004\011\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\130\020\052\001\001\000\030" +
    "\005\021\006\123\007\017\010\020\015\012\017\026\023" +
    "\023\024\032\027\005\030\010\031\027\001\001\000\002" +
    "\001\001\000\006\013\051\020\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\040\001\001\000\002" +
    "\001\001\000\030\005\021\006\044\007\017\010\020\015" +
    "\012\017\026\023\023\024\032\027\005\030\010\031\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\021\006\046\007\017" +
    "\010\020\015\012\017\026\023\023\024\032\027\005\030" +
    "\010\031\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\102\001\001\000\002\001" +
    "\001\000\004\020\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\077\001\001\000\004\020\076\001\001" +
    "\000\002\001\001\000\004\020\072\001\001\000\004\020" +
    "\071\001\001\000\004\020\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\021\006\111\007\017\010\020\015\012\017\026" +
    "\023\023\024\032\027\005\030\010\031\027\001\001\000" +
    "\004\020\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\120\020\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\125\020\052\001\001\000\004\012\102\001\001" +
    "\000\006\013\127\020\052\001\001\000\004\012\102\001" +
    "\001\000\004\012\102\001\001\000\030\005\021\006\132" +
    "\007\017\010\020\015\012\017\026\023\023\024\032\027" +
    "\005\030\010\031\027\001\001\000\004\014\136\001\001" +
    "\000\002\001\001\000\030\005\021\006\151\007\017\010" +
    "\020\015\012\017\026\023\023\024\032\027\005\030\010" +
    "\031\027\001\001\000\006\013\146\020\052\001\001\000" +
    "\002\001\001\000\030\005\021\006\144\007\017\010\020" +
    "\015\012\017\026\023\023\024\032\027\005\030\010\031" +
    "\027\001\001\000\006\013\141\020\052\001\001\000\004" +
    "\012\102\001\001\000\030\005\021\006\143\007\017\010" +
    "\020\015\012\017\026\023\023\024\032\027\005\030\010" +
    "\031\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\102\001\001\000\030\005\021" +
    "\006\150\007\017\010\020\015\012\017\026\023\023\024" +
    "\032\027\005\030\010\031\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\021\006\160\007\017\010\020\015\012\017\026\023" +
    "\023\024\032\027\005\030\010\031\027\001\001\000\002" +
    "\001\001\000\030\005\021\006\162\007\017\010\020\015" +
    "\012\017\026\023\023\024\032\027\005\030\010\031\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\167\001\001\000\002" +
    "\001\001\000\004\020\171\001\001\000\002\001\001\000" +
    "\030\005\021\006\200\007\017\010\020\015\012\017\026" +
    "\023\023\024\032\027\005\030\010\031\027\001\001\000" +
    "\004\020\174\001\001\000\002\001\001\000\030\005\021" +
    "\006\176\007\017\010\020\015\012\017\026\023\023\024" +
    "\032\027\005\030\010\031\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\021\006\242\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\005\030\010\031\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\021\006\250\007\017\010\020\015\012\017\026\023\023" +
    "\024\032\027\005\030\010\031\027\001\001\000\002\001" +
    "\001\000\030\005\021\006\252\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\005\030\010\031\027\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String codigoTraducido = "";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		 System.out.println("codigo traducido");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= declaracion1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= condicionales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= funciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= ejecutar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= imprimir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_aritmetica ::= LIT_NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_aritmetica ::= LIT_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_aritmetica ::= LIT_CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_aritmetica ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_aritmetica ::= expresion_aritmetica SUMA expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_aritmetica ::= expresion_aritmetica RESTA expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_aritmetica ::= expresion_aritmetica MULTIPLICACION expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_aritmetica ::= expresion_aritmetica DIVISION expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_aritmetica ::= expresion_aritmetica POTENCIA CORCHETE_ABRE expresion_aritmetica CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_aritmetica ::= expresion_aritmetica MODULO expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_aritmetica ::= PARENTECIS_ABRE expresion_aritmetica PARENTECIS_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operador_relacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador_relacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador_relacionales ::= MAYOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador_relacionales ::= MENOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_relacionales ::= ES_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_relacionales ::= ES_DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion1 ::= INGRESAR var tipo_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion1",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= var COMA VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_valor ::= COMO CARACTER CON_VALOR LIT_CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_valor ::= COMO CADENA CON_VALOR LIT_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_valor ::= COMO BOOLEAN CON_VALOR LIT_BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion ::= INGRESAR var COMO NUMERO CON_VALOR expresion_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Reconoci una asignacion");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= LIT_BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicionales ::= SI expresion_booleana ENTONCES instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicionales ::= SI expresion_booleana ENTONCES instrucciones DE_LO_CONTRARIO instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicionales ::= SI expresion_booleana ENTONCES instrucciones osi DE_LO_CONTRARIO instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicionales ::= SEGUN expresion_aritmetica HACER casos FIN_SEGUN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion_booleana ::= expresion_booleana operador_relacionales expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_booleana",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion_booleana ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_booleana",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // casos ::= casos INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // casos ::= INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // casos ::= DE_LO_CONTRARIO ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // osi ::= osi O_SI expresion_booleana ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // osi ::= O_SI expresion_booleana ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER instrucciones FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica CON_INCREMENTAL expresion_aritmetica HACER instrucciones FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclos ::= MIENTRAS expresion_booleana HACER instrucciones FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ciclos ::= MIENTRAS expresion_booleana HACER FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ciclos ::= REPETIR instrucciones HASTA_QUE expresion_booleana 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ciclos ::= REPETIR HASTA_QUE expresion_booleana 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // retorno ::= RETORNAR expresion_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // retorno ::= RETORNAR expresion_booleana PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // metodo ::= METODO NOMBRE instrucciones FIN_METODO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // metodo ::= METODO NOMBRE CON_PARAMETROS instrucciones FIN_METODO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funciones ::= FUNCION NOMBRE tipo_dato instrucciones FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funciones ::= FUNCION NOMBRE tipo_dato CON_PARAMETROS instrucciones FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ejecutar ::= EJECUTAR NOMBRE PARENTECIS_ABRE PARENTECIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // imprimir ::= IMPRIMIR literal_booleana PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // imprimir ::= IMPRIMIR_NL literal_booleana PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java.beans.Statement;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\007\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\023\006\000\002\024\005" +
    "\000\002\024\003\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\005\011\000\002\005\011\000\002" +
    "\007\006\000\002\004\003\000\002\004\003\000\002\010" +
    "\007\000\002\010\011\000\002\010\012\000\002\010\007" +
    "\000\002\013\005\000\002\013\003\000\002\016\010\000" +
    "\002\016\007\000\002\016\005\000\002\014\007\000\002" +
    "\014\006\000\002\017\013\000\002\017\012\000\002\017" +
    "\015\000\002\017\007\000\002\017\006\000\002\017\006" +
    "\000\002\017\005\000\002\026\005\000\002\026\005\000" +
    "\002\027\006\000\002\027\007\000\002\030\007\000\002" +
    "\030\010\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\031\007\000\002\015\005" +
    "\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\004\005\001\002\000\004\002\300\001" +
    "\002\000\034\005\035\006\012\007\016\035\031\042\006" +
    "\047\015\050\025\051\017\055\034\057\032\062\023\065" +
    "\036\067\014\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\060\005\ufff7\006" +
    "\ufff7\007\ufff7\035\ufff7\036\ufff7\037\ufff7\041\ufff7\042\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\062\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\001\002\000\034\005\ufffd\006\ufffd\007" +
    "\ufffd\035\ufffd\042\ufffd\047\ufffd\050\ufffd\051\ufffd\055\ufffd" +
    "\057\ufffd\062\ufffd\065\ufffd\067\ufffd\001\002\000\060\005" +
    "\ufff6\006\ufff6\007\ufff6\035\ufff6\036\ufff6\037\ufff6\041\ufff6" +
    "\042\ufff6\044\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\054" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\062\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\067\ufff6\001\002\000\004\007\016\001" +
    "\002\000\060\005\ufff4\006\ufff4\007\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\041\ufff4\042\ufff4\044\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4" +
    "\062\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\001\002\000" +
    "\004\007\230\001\002\000\020\007\061\016\057\027\055" +
    "\031\060\032\056\033\142\076\054\001\002\000\010\010" +
    "\uffd4\034\uffd4\102\uffd4\001\002\000\004\007\210\001\002" +
    "\000\060\005\ufffa\006\ufffa\007\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\041\ufffa\042\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\062" +
    "\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\001\002\000\060" +
    "\005\ufff9\006\ufff9\007\ufff9\035\ufff9\036\ufff9\037\ufff9\041" +
    "\ufff9\042\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\062\ufff9\064" +
    "\ufff9\065\ufff9\066\ufff9\067\ufff9\001\002\000\060\005\ufffc" +
    "\006\ufffc\007\ufffc\035\ufffc\036\ufffc\037\ufffc\041\ufffc\042" +
    "\ufffc\044\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\057\ufffc\060\ufffc\062\ufffc\064\ufffc\065" +
    "\ufffc\066\ufffc\067\ufffc\001\002\000\004\007\202\001\002" +
    "\000\060\005\ufffb\006\ufffb\007\ufffb\035\ufffb\036\ufffb\037" +
    "\ufffb\041\ufffb\042\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\062" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\001\002\000\020" +
    "\007\061\016\057\027\055\031\060\032\056\033\142\076" +
    "\054\001\002\000\034\005\177\006\012\007\016\035\031" +
    "\042\006\047\015\050\025\051\017\055\034\057\032\062" +
    "\023\065\036\067\014\001\002\000\060\005\ufff8\006\ufff8" +
    "\007\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\062\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\001\002\000\060\005\ufff5\006\ufff5\007\ufff5" +
    "\035\ufff5\036\ufff5\037\ufff5\041\ufff5\042\ufff5\044\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\054\ufff5\055\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\062\ufff5\064\ufff5\065\ufff5\066\ufff5\067" +
    "\ufff5\001\002\000\016\007\061\016\057\027\055\031\060" +
    "\032\056\076\054\001\002\000\034\006\012\007\016\035" +
    "\031\042\006\047\015\050\025\051\017\055\034\057\032" +
    "\060\147\062\023\065\036\067\014\001\002\000\006\034" +
    "\140\102\137\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\004\002\uffff\001" +
    "\002\000\004\007\037\001\002\000\012\012\043\013\040" +
    "\014\042\015\044\001\002\000\034\006\uffb2\007\uffb2\035" +
    "\uffb2\042\uffb2\047\uffb2\050\uffb2\051\uffb2\055\uffb2\057\uffb2" +
    "\062\uffb2\063\uffb2\065\uffb2\067\uffb2\001\002\000\034\006" +
    "\012\007\016\035\031\042\006\047\015\050\025\051\017" +
    "\055\034\057\032\062\023\063\046\065\036\067\014\001" +
    "\002\000\034\006\uffb1\007\uffb1\035\uffb1\042\uffb1\047\uffb1" +
    "\050\uffb1\051\uffb1\055\uffb1\057\uffb1\062\uffb1\063\uffb1\065" +
    "\uffb1\067\uffb1\001\002\000\034\006\uffb3\007\uffb3\035\uffb3" +
    "\042\uffb3\047\uffb3\050\uffb3\051\uffb3\055\uffb3\057\uffb3\062" +
    "\uffb3\063\uffb3\065\uffb3\067\uffb3\001\002\000\034\006\uffb0" +
    "\007\uffb0\035\uffb0\042\uffb0\047\uffb0\050\uffb0\051\uffb0\055" +
    "\uffb0\057\uffb0\062\uffb0\063\uffb0\065\uffb0\067\uffb0\001\002" +
    "\000\004\066\051\001\002\000\032\006\012\007\016\035" +
    "\031\042\006\047\015\050\025\051\017\055\034\057\032" +
    "\062\023\065\036\067\014\001\002\000\004\066\050\001" +
    "\002\000\060\005\uffb4\006\uffb4\007\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\041\uffb4\042\uffb4\044\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\062\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\001\002\000" +
    "\060\005\uffb5\006\uffb5\007\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\041\uffb5\042\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5\051" +
    "\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\062\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\067\uffb5\001\002\000\020\017" +
    "\131\020\130\021\123\022\126\023\132\024\127\043\124" +
    "\001\002\000\120\005\uffc6\006\uffc6\007\uffc6\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\054\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\062\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\077\071\066\072\075\073\072" +
    "\074\064\075\074\001\002\000\016\007\061\016\057\027" +
    "\055\031\060\032\056\076\054\001\002\000\016\007\061" +
    "\016\057\027\055\031\060\032\056\076\054\001\002\000" +
    "\134\005\ufff2\006\ufff2\007\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\030\ufff2\035" +
    "\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\062\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\077\ufff2\101\ufff2" +
    "\001\002\000\134\005\ufff3\006\ufff3\007\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\030\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\062\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\077" +
    "\ufff3\101\ufff3\001\002\000\134\005\ufff1\006\ufff1\007\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\062\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1" +
    "\075\ufff1\077\ufff1\101\ufff1\001\002\000\134\005\ufff0\006" +
    "\ufff0\007\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\030\ufff0\035\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\062\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073" +
    "\ufff0\074\ufff0\075\ufff0\077\ufff0\101\ufff0\001\002\000\134" +
    "\005\uffef\006\uffef\007\uffef\017\073\020\065\021\076\022" +
    "\070\023\071\024\067\025\100\026\063\030\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\045\uffef\046\uffef\047\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\062" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\077\071\066" +
    "\072\075\073\072\074\064\075\074\077\uffef\101\uffef\001" +
    "\002\000\016\007\061\016\057\027\055\031\060\032\056" +
    "\076\054\001\002\000\004\100\115\001\002\000\016\007" +
    "\061\016\057\027\055\031\060\032\056\076\054\001\002" +
    "\000\016\007\061\016\057\027\055\031\060\032\056\076" +
    "\054\001\002\000\016\007\061\016\057\027\055\031\060" +
    "\032\056\076\054\001\002\000\016\007\061\016\057\027" +
    "\055\031\060\032\056\076\054\001\002\000\016\007\061" +
    "\016\057\027\055\031\060\032\056\076\054\001\002\000" +
    "\016\007\061\016\057\027\055\031\060\032\056\076\054" +
    "\001\002\000\016\007\061\016\057\027\055\031\060\032" +
    "\056\076\054\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\016\007\061\016" +
    "\057\027\055\031\060\032\056\076\054\001\002\000\016" +
    "\007\061\016\057\027\055\031\060\032\056\076\054\001" +
    "\002\000\016\007\061\016\057\027\055\031\060\032\056" +
    "\076\054\001\002\000\016\007\061\016\057\027\055\031" +
    "\060\032\056\076\054\001\002\000\134\005\uffe1\006\uffe1" +
    "\007\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\030\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\060\uffe1\062\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\070\077\071\066\072\075\073\072" +
    "\074\064\075\074\077\uffe1\101\uffe1\001\002\000\134\005" +
    "\uffed\006\uffed\007\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed\062\uffed" +
    "\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072" +
    "\075\073\072\074\064\075\074\077\uffed\101\uffed\001\002" +
    "\000\134\005\uffe6\006\uffe6\007\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\100\026\063\030\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\077" +
    "\071\066\072\075\073\072\074\064\075\074\077\uffe6\101" +
    "\uffe6\001\002\000\134\005\uffeb\006\uffeb\007\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\030\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\062\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\064\075\074" +
    "\077\uffeb\101\uffeb\001\002\000\134\005\uffe9\006\uffe9\007" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\030\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9\064\uffe9\065\uffe9" +
    "\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074" +
    "\uffe9\075\uffe9\077\uffe9\101\uffe9\001\002\000\134\005\uffe8" +
    "\006\uffe8\007\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\100\026\063\030\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\077\071\066\072\075" +
    "\073\072\074\064\075\074\077\uffe8\101\uffe8\001\002\000" +
    "\134\005\uffec\006\uffec\007\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\030\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\062\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071" +
    "\uffec\072\uffec\073\uffec\074\064\075\074\077\uffec\101\uffec" +
    "\001\002\000\134\005\uffe4\006\uffe4\007\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\100\026\063" +
    "\030\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\062\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4" +
    "\070\077\071\066\072\075\073\072\074\064\075\074\077" +
    "\uffe4\101\uffe4\001\002\000\134\005\uffe5\006\uffe5\007\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\100\026\063\030\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\062\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\067\uffe5\070\077\071\066\072\075\073\072\074\064" +
    "\075\074\077\uffe5\101\uffe5\001\002\000\134\005\uffe3\006" +
    "\uffe3\007\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\100\026\063\030\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\062\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\070\077\071\066\072\075\073" +
    "\072\074\064\075\074\077\uffe3\101\uffe3\001\002\000\134" +
    "\005\uffee\006\uffee\007\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee\035\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\062" +
    "\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\075\073\072\074\064\075\074\077\uffee\101\uffee\001" +
    "\002\000\134\005\uffe7\006\uffe7\007\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\100\026\063\030" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\062\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070" +
    "\077\071\066\072\075\073\072\074\064\075\074\077\uffe7" +
    "\101\uffe7\001\002\000\016\007\061\016\057\027\055\031" +
    "\060\032\056\076\054\001\002\000\040\017\073\020\065" +
    "\021\076\022\070\023\071\024\067\025\100\026\063\070" +
    "\077\071\066\072\075\073\072\074\064\075\074\101\117" +
    "\001\002\000\134\005\uffea\006\uffea\007\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea" +
    "\030\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\062\uffea\064\uffea\065\uffea\066\uffea\067\uffea" +
    "\070\uffea\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\077" +
    "\uffea\101\uffea\001\002\000\134\005\uffe2\006\uffe2\007\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\030\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\062\uffe2\064\uffe2\065\uffe2\066" +
    "\uffe2\067\uffe2\070\077\071\066\072\075\073\072\074\064" +
    "\075\074\077\uffe2\101\uffe2\001\002\000\040\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\070\077\071\066\072\075\073\072\074\064\075\074\077" +
    "\122\001\002\000\134\005\uffe0\006\uffe0\007\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\062\uffe0\064\uffe0\065\uffe0\066\uffe0\067" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\077\uffe0\101\uffe0\001\002\000\016\007\uffdd\016\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\076\uffdd\001\002\000\034\006\012" +
    "\007\016\035\031\042\006\047\015\050\025\051\017\055" +
    "\034\056\135\057\032\062\023\065\036\067\014\001\002" +
    "\000\016\007\061\016\057\027\055\031\060\032\056\076" +
    "\054\001\002\000\016\007\uffdc\016\uffdc\027\uffdc\031\uffdc" +
    "\032\uffdc\076\uffdc\001\002\000\016\007\uffda\016\uffda\027" +
    "\uffda\031\uffda\032\uffda\076\uffda\001\002\000\016\007\uffde" +
    "\016\uffde\027\uffde\031\uffde\032\uffde\076\uffde\001\002\000" +
    "\016\007\uffdf\016\uffdf\027\uffdf\031\uffdf\032\uffdf\076\uffdf" +
    "\001\002\000\016\007\uffdb\016\uffdb\027\uffdb\031\uffdb\032" +
    "\uffdb\076\uffdb\001\002\000\120\005\uffc7\006\uffc7\007\uffc7" +
    "\017\073\020\065\021\076\022\070\023\071\024\067\025" +
    "\100\026\063\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7" +
    "\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\077\071\066\072" +
    "\075\073\072\074\064\075\074\001\002\000\004\056\136" +
    "\001\002\000\060\005\uffbc\006\uffbc\007\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\041\uffbc\042\uffbc\044\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\062\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\001\002" +
    "\000\060\005\uffbd\006\uffbd\007\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\062" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\001\002\000\004" +
    "\007\145\001\002\000\020\007\061\016\057\027\055\031" +
    "\060\032\056\033\142\076\054\001\002\000\004\030\144" +
    "\001\002\000\004\030\uffcc\001\002\000\040\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\030\uffcd\070\077\071\066\072\075\073\072\074\064\075" +
    "\074\001\002\000\060\005\uffce\006\uffce\007\uffce\035\uffce" +
    "\036\uffce\037\uffce\041\uffce\042\uffce\044\uffce\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\001" +
    "\002\000\010\010\uffd5\034\uffd5\102\uffd5\001\002\000\004" +
    "\060\151\001\002\000\016\007\061\016\057\027\055\031" +
    "\060\032\056\076\054\001\002\000\074\005\uffba\006\uffba" +
    "\007\uffba\017\131\020\130\021\123\022\126\023\132\024" +
    "\127\035\uffba\036\uffba\037\uffba\041\uffba\042\uffba\044\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\062\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\001\002\000\016\007\061\016\057\027\055\031" +
    "\060\032\056\076\054\001\002\000\074\005\uffbb\006\uffbb" +
    "\007\uffbb\017\131\020\130\021\123\022\126\023\132\024" +
    "\127\035\uffbb\036\uffbb\037\uffbb\041\uffbb\042\uffbb\044\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\001\002\000\020\017\131\020\130\021\123\022" +
    "\126\023\132\024\127\040\154\001\002\000\032\006\012" +
    "\007\016\035\031\042\006\047\015\050\025\051\017\055" +
    "\034\057\032\062\023\065\036\067\014\001\002\000\010" +
    "\036\156\037\160\041\157\001\002\000\060\005\uffcb\006" +
    "\uffcb\007\uffcb\035\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\054\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\062\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\001\002\000\032\006\012\007\016\035" +
    "\031\042\006\047\015\050\025\051\017\055\034\057\032" +
    "\062\023\065\036\067\014\001\002\000\016\007\061\016" +
    "\057\027\055\031\060\032\056\076\054\001\002\000\006" +
    "\037\163\041\162\001\002\000\032\006\012\007\016\035" +
    "\031\042\006\047\015\050\025\051\017\055\034\057\032" +
    "\062\023\065\036\067\014\001\002\000\016\007\061\016" +
    "\057\027\055\031\060\032\056\076\054\001\002\000\020" +
    "\017\131\020\130\021\123\022\126\023\132\024\127\040" +
    "\165\001\002\000\032\006\012\007\016\035\031\042\006" +
    "\047\015\050\025\051\017\055\034\057\032\062\023\065" +
    "\036\067\014\001\002\000\006\037\uffc2\041\uffc2\001\002" +
    "\000\004\036\170\001\002\000\060\005\uffc9\006\uffc9\007" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\044\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\062\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\001\002\000\020\017\131\020\130\021\123\022" +
    "\126\023\132\024\127\040\172\001\002\000\032\006\012" +
    "\007\016\035\031\042\006\047\015\050\025\051\017\055" +
    "\034\057\032\062\023\065\036\067\014\001\002\000\006" +
    "\037\uffc1\041\uffc1\001\002\000\004\036\175\001\002\000" +
    "\060\005\uffca\006\uffca\007\uffca\035\uffca\036\uffca\037\uffca" +
    "\041\uffca\042\uffca\044\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\001\002\000\034\005" +
    "\ufffe\006\ufffe\007\ufffe\035\ufffe\042\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\055\ufffe\057\ufffe\062\ufffe\065\ufffe\067\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\030\201\001\002" +
    "\000\060\005\uffad\006\uffad\007\uffad\035\uffad\036\uffad\037" +
    "\uffad\041\uffad\042\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\062" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\001\002\000\034" +
    "\006\012\007\016\035\031\042\006\047\015\050\025\051" +
    "\017\055\034\057\032\062\023\063\204\065\036\067\014" +
    "\001\002\000\004\064\207\001\002\000\032\006\012\007" +
    "\016\035\031\042\006\047\015\050\025\051\017\055\034" +
    "\057\032\062\023\065\036\067\014\001\002\000\004\064" +
    "\206\001\002\000\060\005\uffb6\006\uffb6\007\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\041\uffb6\042\uffb6\044\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\001" +
    "\002\000\060\005\uffb7\006\uffb7\007\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\041\uffb7\042\uffb7\044\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\062\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\001\002\000" +
    "\004\034\211\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\040\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\052\213\070\077\071\066\072\075\073\072\074\064\075" +
    "\074\001\002\000\016\007\061\016\057\027\055\031\060" +
    "\032\056\076\054\001\002\000\042\017\073\020\065\021" +
    "\076\022\070\023\071\024\067\025\100\026\063\043\216" +
    "\053\215\070\077\071\066\072\075\073\072\074\064\075" +
    "\074\001\002\000\016\007\061\016\057\027\055\031\060" +
    "\032\056\076\054\001\002\000\034\006\012\007\016\035" +
    "\031\042\006\047\015\050\025\051\017\054\220\055\034" +
    "\057\032\062\023\065\036\067\014\001\002\000\004\054" +
    "\221\001\002\000\060\005\uffbf\006\uffbf\007\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\062\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\001" +
    "\002\000\060\005\uffc0\006\uffc0\007\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\062\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\001\002\000" +
    "\040\017\073\020\065\021\076\022\070\023\071\024\067" +
    "\025\100\026\063\043\223\070\077\071\066\072\075\073" +
    "\072\074\064\075\074\001\002\000\032\006\012\007\016" +
    "\035\031\042\006\047\015\050\025\051\017\055\034\057" +
    "\032\062\023\065\036\067\014\001\002\000\004\054\225" +
    "\001\002\000\060\005\uffbe\006\uffbe\007\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\062\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\001\002" +
    "\000\004\030\227\001\002\000\060\005\uffae\006\uffae\007" +
    "\uffae\035\uffae\036\uffae\037\uffae\041\uffae\042\uffae\044\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\054\uffae\055\uffae\056" +
    "\uffae\057\uffae\060\uffae\062\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\001\002\000\004\076\231\001\002\000\004\077" +
    "\232\001\002\000\004\030\233\001\002\000\060\005\uffaf" +
    "\006\uffaf\007\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\042" +
    "\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\060\uffaf\062\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\001\002\000\006\010\235\102\137" +
    "\001\002\000\012\012\242\013\240\014\241\015\243\001" +
    "\002\000\004\030\237\001\002\000\060\005\uffd6\006\uffd6" +
    "\007\uffd6\035\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\044" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\062\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\067\uffd6\001\002\000\004\011\254\001\002\000\004" +
    "\011\252\001\002\000\004\011\246\001\002\000\004\011" +
    "\244\001\002\000\004\032\245\001\002\000\004\030\uffd2" +
    "\001\002\000\020\007\061\016\057\027\055\031\060\032" +
    "\056\033\250\076\054\001\002\000\040\017\073\020\065" +
    "\021\076\022\070\023\071\024\067\025\100\026\063\030" +
    "\251\070\077\071\066\072\075\073\072\074\064\075\074" +
    "\001\002\000\004\030\uffd1\001\002\000\060\005\uffcf\006" +
    "\uffcf\007\uffcf\035\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\062\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\001\002\000\004\031\253\001\002\000" +
    "\004\030\uffd3\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\040\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\030\256\070\077\071\066\072\075\073\072\074\064\075" +
    "\074\001\002\000\060\005\uffd0\006\uffd0\007\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\041\uffd0\042\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\001" +
    "\002\000\040\017\073\020\065\021\076\022\070\023\071" +
    "\024\067\025\100\026\063\043\260\070\077\071\066\072" +
    "\075\073\072\074\064\075\074\001\002\000\006\041\261" +
    "\044\263\001\002\000\004\040\276\001\002\000\006\044" +
    "\271\046\270\001\002\000\016\007\061\016\057\027\055" +
    "\031\060\032\056\076\054\001\002\000\040\017\073\020" +
    "\065\021\076\022\070\023\071\024\067\025\100\026\063" +
    "\045\265\070\077\071\066\072\075\073\072\074\064\075" +
    "\074\001\002\000\004\040\266\001\002\000\032\006\012" +
    "\007\016\035\031\042\006\047\015\050\025\051\017\055" +
    "\034\057\032\062\023\065\036\067\014\001\002\000\006" +
    "\044\uffc4\046\uffc4\001\002\000\060\005\uffc8\006\uffc8\007" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\041\uffc8\042\uffc8\044\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\062\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\001\002\000\016\007\061\016\057\027\055\031" +
    "\060\032\056\076\054\001\002\000\040\017\073\020\065" +
    "\021\076\022\070\023\071\024\067\025\100\026\063\045" +
    "\273\070\077\071\066\072\075\073\072\074\064\075\074" +
    "\001\002\000\004\040\274\001\002\000\032\006\012\007" +
    "\016\035\031\042\006\047\015\050\025\051\017\055\034" +
    "\057\032\062\023\065\036\067\014\001\002\000\006\044" +
    "\uffc5\046\uffc5\001\002\000\032\006\012\007\016\035\031" +
    "\042\006\047\015\050\025\051\017\055\034\057\032\062" +
    "\023\065\036\067\014\001\002\000\006\044\uffc3\046\uffc3" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\002\003\001\001\000\002\001\001\000" +
    "\032\003\025\005\021\006\007\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\006\030\010\031\027\001" +
    "\001\000\004\020\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\225\020\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\177\020\142\001\001\000" +
    "\030\005\021\006\175\007\017\010\020\015\012\017\026" +
    "\023\023\024\032\027\006\030\010\031\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\152\020\052" +
    "\001\001\000\030\005\021\006\145\007\017\010\020\015" +
    "\012\017\026\023\023\024\032\027\006\030\010\031\027" +
    "\001\001\000\002\001\001\000\006\013\051\020\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\040" +
    "\001\001\000\002\001\001\000\030\005\021\006\044\007" +
    "\017\010\020\015\012\017\026\023\023\024\032\027\006" +
    "\030\010\031\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\021" +
    "\006\046\007\017\010\020\015\012\017\026\023\023\024" +
    "\032\027\006\030\010\031\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\124\001" +
    "\001\000\002\001\001\000\004\020\120\001\001\000\004" +
    "\020\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\117\001\001\000\002\001\001\000\004\020\113\001" +
    "\001\000\004\020\112\001\001\000\004\020\111\001\001" +
    "\000\004\020\110\001\001\000\004\020\107\001\001\000" +
    "\004\020\106\001\001\000\004\020\105\001\001\000\004" +
    "\020\104\001\001\000\004\020\103\001\001\000\004\020" +
    "\102\001\001\000\004\020\101\001\001\000\004\020\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\021\006\133\007\017\010\020\015" +
    "\012\017\026\023\023\024\032\027\006\030\010\031\027" +
    "\001\001\000\004\020\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\140" +
    "\020\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\147\020\052\001\001\000\004\012" +
    "\124\001\001\000\006\013\151\020\052\001\001\000\004" +
    "\012\124\001\001\000\004\012\124\001\001\000\030\005" +
    "\021\006\154\007\017\010\020\015\012\017\026\023\023" +
    "\024\032\027\006\030\010\031\027\001\001\000\004\014" +
    "\160\001\001\000\002\001\001\000\030\005\021\006\173" +
    "\007\017\010\020\015\012\017\026\023\023\024\032\027" +
    "\006\030\010\031\027\001\001\000\006\013\170\020\052" +
    "\001\001\000\002\001\001\000\030\005\021\006\166\007" +
    "\017\010\020\015\012\017\026\023\023\024\032\027\006" +
    "\030\010\031\027\001\001\000\006\013\163\020\052\001" +
    "\001\000\004\012\124\001\001\000\030\005\021\006\165" +
    "\007\017\010\020\015\012\017\026\023\023\024\032\027" +
    "\006\030\010\031\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\124\001\001\000" +
    "\030\005\021\006\172\007\017\010\020\015\012\017\026" +
    "\023\023\024\032\027\006\030\010\031\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\021\006\202\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\006\030\010\031\027\001" +
    "\001\000\002\001\001\000\030\005\021\006\204\007\017" +
    "\010\020\015\012\017\026\023\023\024\032\027\006\030" +
    "\010\031\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\211\001" +
    "\001\000\002\001\001\000\004\020\213\001\001\000\002" +
    "\001\001\000\004\020\221\001\001\000\030\005\021\006" +
    "\216\007\017\010\020\015\012\017\026\023\023\024\032" +
    "\027\006\030\010\031\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\021\006\223\007\017\010\020\015\012\017\026\023" +
    "\023\024\032\027\006\030\010\031\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\261\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\021\006\266\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\006\030\010\031\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\021\006\274\007\017\010\020\015\012\017\026\023\023" +
    "\024\032\027\006\030\010\031\027\001\001\000\002\001" +
    "\001\000\030\005\021\006\276\007\017\010\020\015\012" +
    "\017\026\023\023\024\032\027\006\030\010\031\027\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String codigoTraducido = "";

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // iniciar ::= INICIO lista_instrucciones FIN 
            {
              Object RESULT =null;
		 System.out.println("codigo traducido");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // iniciar ::= INICIO FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_instrucciones ::= lista_instrucciones instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_instrucciones ::= instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= declaracion1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= condicionales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= ciclos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= metodo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= funciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucciones ::= ejecutar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucciones ::= imprimir 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresion_aritmetica ::= LIT_NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion_aritmetica ::= LIT_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion_aritmetica ::= LIT_CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion_aritmetica ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion_aritmetica ::= NOT expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion_aritmetica ::= expresion_aritmetica SUMA expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion_aritmetica ::= expresion_aritmetica RESTA expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion_aritmetica ::= expresion_aritmetica MULTIPLICACION expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion_aritmetica ::= expresion_aritmetica DIVISION expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_aritmetica ::= expresion_aritmetica POTENCIA CORCHETE_ABRE expresion_aritmetica CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_aritmetica ::= expresion_aritmetica MODULO expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_aritmetica ::= expresion_aritmetica MAYOR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_aritmetica ::= expresion_aritmetica MENOR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_aritmetica ::= expresion_aritmetica MAYOR_O_IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_aritmetica ::= expresion_aritmetica MENOR_O_IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_aritmetica ::= expresion_aritmetica ES_IGUAL expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_aritmetica ::= expresion_aritmetica ES_DIFERENTE expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_aritmetica ::= expresion_aritmetica AND expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_aritmetica ::= expresion_aritmetica OR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_aritmetica ::= PARENTECIS_ABRE expresion_aritmetica PARENTECIS_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operador_relacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operador_relacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operador_relacionales ::= MAYOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operador_relacionales ::= MENOR_O_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operador_relacionales ::= ES_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operador_relacionales ::= ES_DIFERENTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operador_relacionales",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operadores_logicos ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operadores_logicos ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operadores_logicos ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("operadores_logicos",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion1 ::= INGRESAR var tipo_valor PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion1",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= var COMA VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("var",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipo_valor ::= COMO CARACTER CON_VALOR LIT_CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipo_valor ::= COMO CADENA CON_VALOR LIT_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipo_valor ::= COMO BOOLEAN CON_VALOR LIT_BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_valor",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion ::= INGRESAR var COMO NUMERO CON_VALOR expresion_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion ::= INGRESAR var COMO BOOLEAN CON_VALOR expresion_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion ::= var ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;
		 System.out.println("Reconoci una asignacion");
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= LIT_BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicionales ::= SI expresion_booleana ENTONCES instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicionales ::= SI expresion_booleana ENTONCES instrucciones DE_LO_CONTRARIO instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicionales ::= SI expresion_booleana ENTONCES instrucciones osi DE_LO_CONTRARIO instrucciones FIN_SI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicionales ::= SEGUN expresion_aritmetica HACER casos FIN_SEGUN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("condicionales",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_booleana ::= expresion_booleana operador_relacionales expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_booleana",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_booleana ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("expresion_booleana",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // casos ::= casos INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // casos ::= INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // casos ::= DE_LO_CONTRARIO ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("casos",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // osi ::= osi O_SI expresion_booleana ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // osi ::= O_SI expresion_booleana ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("osi",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER instrucciones FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica CON_INCREMENTAL expresion_aritmetica HACER instrucciones FIN_PARA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-10)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ciclos ::= MIENTRAS expresion_booleana HACER instrucciones FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ciclos ::= MIENTRAS expresion_booleana HACER FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ciclos ::= REPETIR instrucciones HASTA_QUE expresion_booleana 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ciclos ::= REPETIR HASTA_QUE expresion_booleana 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ciclos",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // retorno ::= RETORNAR expresion_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // retorno ::= RETORNAR expresion_booleana PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("retorno",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // metodo ::= METODO VARIABLE instrucciones FIN_METODO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // metodo ::= METODO VARIABLE CON_PARAMETROS instrucciones FIN_METODO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("metodo",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // funciones ::= FUNCION VARIABLE tipo_dato instrucciones FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // funciones ::= FUNCION VARIABLE tipo_dato CON_PARAMETROS instrucciones FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("funciones",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_dato ::= NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ejecutar ::= EJECUTAR VARIABLE PARENTECIS_ABRE PARENTECIS_CIERRA PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // imprimir ::= IMPRIMIR expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // imprimir ::= IMPRIMIR_NL expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("imprimir",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}

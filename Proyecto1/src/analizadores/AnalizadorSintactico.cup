/**
 * Implementacion de la gramatica del pseudo parser, el archivo de disenio esta en Gramatica.md
 * @author ormandyrony
 */
package analizadores;


import arbol.*;

import java.beans.Statement;
import java.util.LinkedList;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

parser code {:
    public String codigoTraducido = "";

    /**
    * Arbol sintactico
    */
    public LinkedList<Instruccion> AST;

    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la linea: " + (s.left) + " y columna : " + s.right + ". No se esperaba este token: " + s.value + "."); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la línea " + (s.left) + " y columna " + s.right + ". Componente " + s.value + " no reconocido."); 
    }  

:}

/* Terminals */
terminal INICIO, FIN, INGRESAR, VARIABLE, COMO, CON_VALOR, 
BOOLEAN, NUMERO, CARACTER, CADENA, LIT_NUMERO, MAYOR, MENOR, 
MAYOR_O_IGUAL, MENOR_O_IGUAL, ES_IGUAL, ES_DIFERENTE, OR, AND, NOT, PUNTO_COMA;


terminal LIT_CARACTER, LIT_CADENA, LIT_BOOLEAN, ASIGNACION, SI, FIN_SI, O_SI,
ENTONCES, DE_LO_CONTRARIO, SEGUN, HACER, INTERROGACION_ABRE, INTERROGACION_CIERRA,
FIN_SEGUN, IMPRIMIR, IMPRIMIR_NL, PARA, HASTA, CON_INCREMENTAL, FIN_PARA, MIENTRAS, FIN_MIENTRAS, 
REPETIR, HASTA_QUE, RETORNAR, METODO, CON_PARAMETROS, FIN_METODO, FUNCION, FIN_FUNCION, EJECUTAR;

// Simbolos para operaciones basicas
terminal RESTA, SUMA, DIVISION, MULTIPLICACION, POTENCIA, MODULO, PARENTECIS_ABRE,
PARENTECIS_CIERRA, CORCHETE_ABRE, CORCHETE_CIERRA, COMA;

/* Non terminals */
non terminal iniciar, lista_instrucciones, declaracion;
non terminal instrucciones, asignacion, condicionales,
osi, imprimir, casos, ciclos, expresion_aritmetica, tipo_dato;

/*test*/
non terminal declaracion1, var, tipo_valor, retorno, metodo, funciones, ejecutar;

/* Precedences */
precedence left MAYOR, MENOR, MAYOR_O_IGUAL, MENOR_O_IGUAL, ES_IGUAL, ES_DIFERENTE;
precedence left AND, OR;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;
precedence left POTENCIA, MODULO;

/* The grammar rules */
start with iniciar;


iniciar ::= INICIO lista_instrucciones:a FIN {: parser.AST = a;:}
            | INICIO FIN {: System.out.println("No hay intrucciones que procesar."); :}
;

lista_instrucciones ::= lista_instrucciones:a instrucciones:b {: RESULT = a, RESULT.add(b); :}
                    | instrucciones: a{:RESULT=new LinkedList<>(); RESULT.add(a);:} 
;

instrucciones ::= declaracion
            | declaracion1
            | asignacion
            | condicionales
            | ciclos
            | metodo
            | funciones
            | ejecutar
            | imprimir

;

/* Operaciones basicas */
expresion_aritmetica ::= LIT_NUMERO
                        | LIT_CADENA
                        | LIT_CARACTER
                        | LIT_BOOLEAN
                        | VARIABLE 
                        | NOT expresion_aritmetica

                        
                        | expresion_aritmetica SUMA expresion_aritmetica
                        | expresion_aritmetica RESTA expresion_aritmetica
                        | expresion_aritmetica MULTIPLICACION expresion_aritmetica
                        | expresion_aritmetica DIVISION expresion_aritmetica



                        | expresion_aritmetica POTENCIA CORCHETE_ABRE expresion_aritmetica CORCHETE_CIERRA
                        | expresion_aritmetica MODULO expresion_aritmetica



                        | expresion_aritmetica MAYOR expresion_aritmetica
                        | expresion_aritmetica MENOR  expresion_aritmetica
                        | expresion_aritmetica MAYOR_O_IGUAL expresion_aritmetica
                        | expresion_aritmetica MENOR_O_IGUAL expresion_aritmetica
                        | expresion_aritmetica ES_IGUAL expresion_aritmetica
                        | expresion_aritmetica ES_DIFERENTE expresion_aritmetica



                        | expresion_aritmetica AND expresion_aritmetica
                        | expresion_aritmetica OR expresion_aritmetica
                        | PARENTECIS_ABRE expresion_aritmetica PARENTECIS_CIERRA
;

/* operadores relacionales */
/*
operador_relacionales ::= MAYOR
            | MENOR
            | MAYOR_O_IGUAL
            | MENOR_O_IGUAL
            | ES_IGUAL 
            | ES_DIFERENTE
;
*/

/* operadores logicos */
/*
operadores_logicos ::= OR
                    | AND
                    | NOT
;
*/

declaracion1 ::= INGRESAR var tipo_valor PUNTO_COMA
;

var ::= var:var COMA VARIABLE:v {: RESULT = var; RESULT.add(v);:}
    | VARIABLE:v
;

tipo_valor ::= COMO CARACTER CON_VALOR LIT_CARACTER
            | COMO CADENA CON_VALOR LIT_CADENA
;

/* Declaracion de variables con operaciones basicas */
declaracion ::= INGRESAR var COMO NUMERO CON_VALOR expresion_aritmetica PUNTO_COMA
            | INGRESAR var COMO BOOLEAN CON_VALOR expresion_aritmetica PUNTO_COMA
;

asignacion ::= var ASIGNACION expresion_aritmetica PUNTO_COMA {: System.out.println("Reconoci una asignacion");:}
; 


/*Expresion booleana o verdadero o falso trbodsd rl entonces*/
condicionales ::= SI expresion_aritmetica ENTONCES instrucciones FIN_SI
                | SI expresion_aritmetica ENTONCES instrucciones DE_LO_CONTRARIO instrucciones FIN_SI
                | SI expresion_aritmetica ENTONCES instrucciones osi DE_LO_CONTRARIO instrucciones FIN_SI
                | SEGUN expresion_aritmetica HACER casos FIN_SEGUN
;



casos ::= casos INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
        | INTERROGACION_ABRE expresion_aritmetica INTERROGACION_CIERRA ENTONCES instrucciones 
        | DE_LO_CONTRARIO ENTONCES instrucciones
;

osi ::= osi O_SI expresion_aritmetica ENTONCES instrucciones
    | O_SI expresion_aritmetica ENTONCES instrucciones
;

ciclos ::= PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER instrucciones FIN_PARA
        | PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica HACER FIN_PARA
        | PARA VARIABLE ASIGNACION expresion_aritmetica HASTA expresion_aritmetica CON_INCREMENTAL expresion_aritmetica HACER instrucciones FIN_PARA
        | MIENTRAS expresion_aritmetica HACER instrucciones FIN_MIENTRAS
        | MIENTRAS expresion_aritmetica HACER FIN_MIENTRAS
        | REPETIR instrucciones HASTA_QUE expresion_aritmetica
        | REPETIR HASTA_QUE expresion_aritmetica
;

retorno ::= RETORNAR expresion_aritmetica PUNTO_COMA
        | RETORNAR expresion_aritmetica PUNTO_COMA
;

metodo ::= METODO VARIABLE instrucciones FIN_METODO
        | METODO VARIABLE CON_PARAMETROS instrucciones FIN_METODO
;

funciones ::= FUNCION VARIABLE tipo_dato instrucciones FIN_FUNCION
            | FUNCION VARIABLE tipo_dato CON_PARAMETROS instrucciones FIN_FUNCION
           /* | FUNCION VARIABLE tipo_dato instrucciones retorno FIN_FUNCION
            | FUNCION VARIABLE tipo_dato CON_PARAMETROS instrucciones retorno FIN_FUNCION*/
;

tipo_dato ::= BOOLEAN
            | NUMERO
            | CARACTER
            | CADENA
;


ejecutar ::= EJECUTAR VARIABLE PARENTECIS_ABRE PARENTECIS_CIERRA PUNTO_COMA
;

imprimir ::= IMPRIMIR expresion_aritmetica PUNTO_COMA
            | IMPRIMIR_NL expresion_aritmetica PUNTO_COMA
;

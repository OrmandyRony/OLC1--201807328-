/* The following code was generated by JFlex 1.7.0 */

/* Analizador lexico */
package analizadores;
import java_cup.runtime.*;

/* Seccion de declaraciones*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.jflex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\70\1\1\1\2\22\0\1\4\1\0\1\26"+
    "\1\0\1\23\2\0\1\22\1\64\1\65\1\6\1\63\1\55\1\41"+
    "\1\12\1\5\1\17\1\20\1\21\2\7\1\14\1\13\2\15\1\16"+
    "\1\0\1\54\2\0\1\42\1\61\1\0\1\33\1\10\1\46\1\32"+
    "\1\30\1\35\1\47\1\57\1\44\1\10\1\10\1\36\1\50\1\45"+
    "\1\34\1\52\1\62\1\31\1\40\1\51\1\53\1\27\2\10\1\56"+
    "\1\10\1\66\1\0\1\67\1\0\1\11\1\0\1\33\1\10\1\46"+
    "\1\32\1\30\1\35\1\47\1\57\1\44\1\10\1\10\1\36\1\50"+
    "\1\45\1\34\1\52\1\62\1\31\1\40\1\51\1\53\1\27\2\10"+
    "\1\56\1\10\1\24\1\0\1\25\7\0\1\70\71\0\1\60\160\0"+
    "\2\43\115\0\1\37\u1ea8\0\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\3\1"+
    "\5\6\1\1\1\6\1\7\1\1\4\6\1\10\1\11"+
    "\1\6\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\6\0\1\22\1\0\4\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\23\1\24\2\0\5\6\1\0\3\6"+
    "\2\21\2\0\1\5\1\25\1\26\2\0\2\6\2\0"+
    "\1\6\1\27\2\6\4\0\6\6\1\0\2\6\1\0"+
    "\1\6\7\0\2\6\1\0\1\30\2\0\1\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\1\0\1\6\4\0"+
    "\2\6\1\0\1\31\5\0\1\32\3\0\2\6\3\0"+
    "\2\6\1\0\2\6\1\33\1\6\2\0\1\6\4\0"+
    "\1\34\4\0\1\35\2\0\1\6\6\0\2\6\3\0"+
    "\1\6\1\36\6\0\1\37\2\0\1\6\6\0\1\6"+
    "\3\0\1\40\1\41\5\0\1\42\1\43\1\44\1\6"+
    "\5\0\1\45\1\46\4\0\1\47\4\0\1\50\3\0"+
    "\1\51\3\0\1\52\10\0\1\53\1\0\1\54\4\0"+
    "\1\55\1\0\1\56\7\0\1\57\1\60\2\0\1\61"+
    "\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\71\0\344\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\71\0\71\0\u04e6\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u01c8\0\71\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\71\0\71\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\71\0\u0b94\0\u0bcd\0\u0591\0\71"+
    "\0\71\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\u1398\0\71\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\71"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\71\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\71\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\71\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\71\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\71\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685"+
    "\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\71\0\71"+
    "\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\71\0\71\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\71\0\71"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\71\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\71\0\u2c88\0\u2cc1\0\u2cfa\0\71\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\71\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\71\0\u2fa6\0\71\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\71\0\u30c3\0\71\0\u30fc\0\u3135\0\u316e\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\71\0\71\0\u328b\0\u32c4\0\71"+
    "\0\71\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\7\7\1\12\3\2\1\13\1\10\1\14"+
    "\1\15\1\16\1\10\1\17\1\20\1\10\1\21\1\22"+
    "\1\23\1\2\1\24\1\25\1\10\1\26\1\10\1\27"+
    "\1\10\1\30\1\10\1\31\1\32\1\10\1\33\1\34"+
    "\1\35\1\10\1\36\1\37\1\40\1\41\1\42\75\0"+
    "\1\3\72\0\1\43\1\44\71\0\1\7\2\0\1\45"+
    "\7\7\56\0\2\10\2\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\16\0"+
    "\1\46\16\0\10\46\1\0\1\46\3\0\10\46\2\0"+
    "\2\46\2\0\1\46\6\0\23\47\1\50\45\47\26\51"+
    "\1\52\42\51\7\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\53\1\54\3\0\1\10\1\55\6\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\56\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\57\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\1\60\1\0\7\10\5\0"+
    "\10\10\1\0\1\10\3\0\10\10\2\0\2\10\2\0"+
    "\1\10\15\0\2\10\2\0\7\10\5\0\4\10\1\61"+
    "\3\10\1\0\1\10\2\0\1\62\1\63\6\10\1\64"+
    "\2\0\2\10\2\0\1\10\36\0\1\65\12\0\2\66"+
    "\33\0\2\10\2\0\7\10\5\0\10\10\1\0\1\10"+
    "\2\0\1\66\10\10\2\0\2\10\2\0\1\10\50\0"+
    "\1\67\73\0\1\70\2\0\1\71\27\0\2\10\2\0"+
    "\7\10\5\0\10\10\1\0\1\10\3\0\1\10\1\72"+
    "\2\10\1\73\3\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\5\10\1\74\2\10\1\0"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\1\10\1\75\2\10\1\76"+
    "\3\10\1\0\1\10\2\0\1\77\1\100\7\10\2\0"+
    "\2\10\2\0\1\10\15\0\2\10\2\0\7\10\5\0"+
    "\5\10\1\101\2\10\1\0\1\10\3\0\10\10\2\0"+
    "\2\10\2\0\1\10\15\0\2\10\2\0\7\10\5\0"+
    "\4\10\1\102\3\10\1\0\1\10\3\0\10\10\2\0"+
    "\2\10\2\0\1\10\6\0\2\43\1\103\1\104\65\43"+
    "\6\105\1\106\62\105\7\0\1\107\3\0\7\107\56\0"+
    "\2\46\1\110\1\0\7\46\5\0\10\46\1\0\1\46"+
    "\3\0\10\46\2\0\2\46\2\0\1\46\30\0\1\111"+
    "\70\0\1\111\1\0\1\112\55\0\1\113\66\0\2\10"+
    "\1\113\1\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\10\10\2\0\2\10\2\0\1\10\15\0\2\10\2\0"+
    "\7\10\5\0\10\10\1\0\1\10\3\0\5\10\1\114"+
    "\2\10\2\0\2\10\2\0\1\10\15\0\2\10\2\0"+
    "\7\10\5\0\10\10\1\0\1\10\3\0\6\10\1\115"+
    "\1\10\2\0\2\10\2\0\1\10\15\0\2\10\1\116"+
    "\1\0\7\10\5\0\10\10\1\0\1\10\3\0\10\10"+
    "\2\0\2\10\2\0\1\10\45\0\2\117\37\0\2\10"+
    "\2\0\7\10\5\0\7\10\1\120\1\0\1\10\3\0"+
    "\10\10\2\0\2\10\2\0\1\10\53\0\1\121\32\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\1\10\1\122\6\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\1\10\1\123\6\10\2\0\2\10\2\0\1\10\55\0"+
    "\1\124\64\0\2\125\2\0\1\126\73\0\1\127\25\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\2\0"+
    "\1\125\1\130\2\10\1\131\4\10\2\0\2\10\2\0"+
    "\1\10\15\0\2\10\2\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\6\10\1\132\1\10\2\0\2\10\2\0"+
    "\1\10\15\0\2\10\2\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\1\10\1\133\6\10\2\0\2\10\2\0"+
    "\1\10\15\0\2\10\2\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\1\10\1\134\6\10\2\0\2\10\2\0"+
    "\1\10\15\0\2\10\2\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\10\10\2\0\1\135\1\10\2\0\1\10"+
    "\36\0\1\136\47\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\137\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\5\10\1\140\2\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\141\1\142\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\11\0\1\104\65\0\6\105\1\143\62\105\5\0\1\104"+
    "\1\106\75\0\1\144\1\0\1\145\1\146\1\0\1\147"+
    "\102\0\1\150\10\0\2\151\33\0\2\10\2\0\7\10"+
    "\5\0\5\10\1\152\2\10\1\0\1\10\3\0\10\10"+
    "\2\0\2\10\2\0\1\10\15\0\2\10\2\0\7\10"+
    "\5\0\1\10\1\153\6\10\1\0\1\10\3\0\10\10"+
    "\2\0\2\10\2\0\1\10\44\0\1\154\75\0\2\155"+
    "\33\0\2\10\2\0\7\10\5\0\10\10\1\156\1\10"+
    "\3\0\10\10\2\0\2\10\2\0\1\10\17\0\1\157"+
    "\66\0\2\10\1\157\1\0\7\10\5\0\10\10\1\0"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\2\10\1\160\5\10\2\0\2\10\2\0\1\10\61\0"+
    "\1\161\63\0\1\162\53\0\1\163\70\0\1\164\46\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\2\10\1\165\5\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\2\10\1\166\5\10\1\0"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\2\10\1\167\5\10\1\0"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\12\0"+
    "\1\170\2\0\2\10\1\171\1\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\15\0\2\10\2\0\7\10\5\0\5\10\1\172\2\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\15\0\2\10\2\0\7\10\5\0\5\10\1\173\2\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\53\0\1\174\32\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\1\10\1\175\6\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\176\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\57\0\1\177\26\0\2\10\2\0\7\10"+
    "\5\0\10\10\1\0\1\10\3\0\5\10\1\200\2\10"+
    "\2\0\2\10\2\0\1\10\6\0\5\105\1\104\1\143"+
    "\62\105\13\0\4\201\61\0\1\201\3\0\7\201\64\0"+
    "\3\201\70\0\2\145\1\202\112\0\2\203\73\0\1\204"+
    "\30\0\2\10\2\0\7\10\5\0\10\10\1\0\1\10"+
    "\3\0\1\10\1\205\6\10\2\0\2\10\2\0\1\10"+
    "\15\0\2\10\2\0\7\10\5\0\10\10\1\0\1\10"+
    "\3\0\5\10\1\206\2\10\2\0\2\10\2\0\1\10"+
    "\42\0\1\207\70\0\1\210\71\0\1\211\1\0\2\212"+
    "\7\0\1\213\1\0\1\214\25\0\2\10\2\0\7\10"+
    "\5\0\10\10\1\0\1\10\2\0\1\215\10\10\2\0"+
    "\2\10\2\0\1\10\53\0\1\216\66\0\2\217\54\0"+
    "\1\220\103\0\2\221\33\0\2\10\2\0\7\10\5\0"+
    "\10\10\1\0\1\10\2\0\1\217\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\222\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\2\0\1\221\1\223\7\10\2\0\2\10"+
    "\2\0\1\10\51\0\2\224\53\0\1\225\22\0\1\226"+
    "\25\0\2\10\2\0\7\10\5\0\2\10\1\227\5\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\15\0\2\10\2\0\7\10\5\0\2\10\1\230\5\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\57\0\1\231\26\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\5\10\1\232\2\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\1\10\1\233\6\10\2\0\2\10"+
    "\2\0\1\10\41\0\1\234\44\0\2\10\2\0\7\10"+
    "\5\0\4\10\1\235\3\10\1\0\1\10\3\0\10\10"+
    "\2\0\2\10\2\0\1\10\33\0\1\47\62\0\3\201"+
    "\104\0\1\236\106\0\1\237\24\0\2\10\2\0\7\10"+
    "\5\0\10\10\1\0\1\10\3\0\2\10\1\240\5\10"+
    "\2\0\2\10\2\0\1\10\15\0\2\10\2\0\7\10"+
    "\5\0\10\10\1\0\1\10\2\0\1\241\10\10\2\0"+
    "\2\10\2\0\1\10\17\0\1\242\132\0\1\243\45\0"+
    "\1\244\12\0\2\245\54\0\1\246\12\0\2\247\57\0"+
    "\1\250\71\0\1\251\70\0\1\252\73\0\2\253\100\0"+
    "\1\254\27\0\2\10\2\0\7\10\5\0\10\10\1\253"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\15\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\0\1\10\3\0"+
    "\4\10\1\255\3\10\2\0\2\10\2\0\1\10\53\0"+
    "\1\256\56\0\1\257\70\0\1\260\44\0\2\10\1\261"+
    "\1\0\7\10\5\0\10\10\1\0\1\10\3\0\10\10"+
    "\2\0\2\10\2\0\1\10\15\0\2\10\1\262\1\0"+
    "\7\10\5\0\10\10\1\0\1\10\3\0\10\10\2\0"+
    "\2\10\2\0\1\10\37\0\1\263\46\0\2\10\2\0"+
    "\7\10\5\0\2\10\1\264\5\10\1\0\1\10\3\0"+
    "\10\10\2\0\2\10\2\0\1\10\15\0\2\10\2\0"+
    "\7\10\5\0\10\10\1\0\1\10\3\0\2\10\1\265"+
    "\5\10\2\0\2\10\2\0\1\10\17\0\1\266\66\0"+
    "\2\10\1\266\1\0\7\10\5\0\10\10\1\0\1\10"+
    "\3\0\10\10\2\0\2\10\2\0\1\10\36\0\1\267"+
    "\73\0\1\270\44\0\2\10\2\0\7\10\5\0\1\10"+
    "\1\271\6\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\37\0\1\272\105\0\1\273\67\0\1\274"+
    "\72\0\1\275\72\0\1\276\47\0\1\277\71\0\1\300"+
    "\104\0\1\301\56\0\1\302\100\0\2\303\33\0\2\10"+
    "\2\0\7\10\5\0\10\10\1\0\1\10\2\0\1\303"+
    "\1\304\7\10\2\0\2\10\2\0\1\10\54\0\1\305"+
    "\60\0\1\306\63\0\1\307\73\0\1\310\70\0\1\311"+
    "\67\0\1\312\44\0\2\10\2\0\7\10\5\0\4\10"+
    "\1\313\3\10\1\0\1\10\3\0\10\10\2\0\2\10"+
    "\2\0\1\10\15\0\2\10\2\0\7\10\5\0\10\10"+
    "\1\0\1\10\2\0\1\314\10\10\2\0\2\10\2\0"+
    "\1\10\70\0\1\315\37\0\1\316\75\0\1\317\41\0"+
    "\2\10\2\0\7\10\5\0\10\10\1\320\1\10\3\0"+
    "\10\10\2\0\2\10\2\0\1\10\42\0\1\321\102\0"+
    "\1\322\75\0\1\323\51\0\1\324\101\0\1\325\56\0"+
    "\1\326\66\0\1\327\70\0\1\330\46\0\2\10\2\0"+
    "\7\10\5\0\2\10\1\331\5\10\1\0\1\10\3\0"+
    "\10\10\2\0\2\10\2\0\1\10\37\0\1\332\73\0"+
    "\1\333\67\0\1\334\46\0\1\335\70\0\1\336\116\0"+
    "\2\337\37\0\2\10\2\0\7\10\5\0\10\10\1\337"+
    "\1\10\3\0\10\10\2\0\2\10\2\0\1\10\41\0"+
    "\1\340\110\0\1\341\45\0\1\342\105\0\1\343\66\0"+
    "\2\344\71\0\1\345\55\0\1\346\107\0\1\347\30\0"+
    "\1\350\66\0\2\10\1\350\1\0\7\10\5\0\10\10"+
    "\1\0\1\10\3\0\10\10\2\0\2\10\2\0\1\10"+
    "\36\0\1\351\71\0\1\352\107\0\1\353\63\0\2\354"+
    "\67\0\2\355\54\0\1\356\105\0\1\357\74\0\1\360"+
    "\53\0\1\361\70\0\1\362\65\0\1\363\104\0\1\364"+
    "\73\0\1\365\50\0\1\366\107\0\1\367\70\0\1\370"+
    "\72\0\1\371\50\0\1\372\104\0\1\373\56\0\1\374"+
    "\73\0\1\375\62\0\1\376\111\0\1\377\72\0\1\u0100"+
    "\70\0\1\u0101\45\0\1\u0102\73\0\1\u0103\74\0\2\u0104"+
    "\75\0\1\u0105\54\0\1\u0106\72\0\1\u0107\70\0\1\u0108"+
    "\66\0\1\u0109\110\0\1\u010a\53\0\1\u010b\72\0\1\u010c"+
    "\70\0\1\u010d\75\0\2\u010e\57\0\1\u010f\74\0\2\u0110"+
    "\64\0\1\u0111\72\0\1\u0112\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13053];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\22\1\2\11\1\1\7\11"+
    "\1\1\6\0\1\11\1\0\4\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\11\2\0\5\1\1\0\4\1\1\11"+
    "\2\0\1\1\2\11\2\0\2\1\2\0\4\1\4\0"+
    "\6\1\1\0\2\1\1\0\1\1\7\0\2\1\1\0"+
    "\1\11\2\0\1\1\4\0\3\1\2\0\2\1\1\0"+
    "\2\1\1\0\1\1\4\0\2\1\1\0\1\11\5\0"+
    "\1\11\3\0\2\1\3\0\2\1\1\0\4\1\2\0"+
    "\1\1\4\0\1\11\4\0\1\11\2\0\1\1\6\0"+
    "\2\1\3\0\1\1\1\11\6\0\1\11\2\0\1\1"+
    "\6\0\1\1\3\0\2\11\5\0\2\11\2\1\5\0"+
    "\2\11\4\0\1\11\4\0\1\11\3\0\1\11\3\0"+
    "\1\11\10\0\1\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\11\7\0\2\11\2\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : " +yytext() + " Linea: " + (yyline + 1) + 
        " Columna: " + (yycolumn + 1));
            } 
            // fall through
          case 52: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 53: break;
          case 3: 
            { return new Symbol(sym.DIVISION);
            } 
            // fall through
          case 54: break;
          case 4: 
            { return new Symbol(sym.MULTIPLICACION);
            } 
            // fall through
          case 55: break;
          case 5: 
            { System.out.println("Se reconocio literalNumero"); return new Symbol(sym.LIT_NUMERO);
            } 
            // fall through
          case 56: break;
          case 6: 
            { System.out.println("Se reconocio inicio"); return new Symbol(sym.NOMBRE);
            } 
            // fall through
          case 57: break;
          case 7: 
            { return new Symbol(sym.RESTA);
            } 
            // fall through
          case 58: break;
          case 8: 
            { System.out.println("Se reconocio punto y coma"); return new Symbol(sym.PUNTO_COMA);
            } 
            // fall through
          case 59: break;
          case 9: 
            { System.out.println("Se reconocio coma"); return new Symbol(sym.COMA);
            } 
            // fall through
          case 60: break;
          case 10: 
            { System.out.println("Se reconocio ¿"); return new Symbol(sym.INTERROGACION_ABRE);
            } 
            // fall through
          case 61: break;
          case 11: 
            { System.out.println("Se reconocio ?"); return new Symbol(sym.INTERROGACION_CIERRA);
            } 
            // fall through
          case 62: break;
          case 12: 
            { return new Symbol(sym.SUMA);
            } 
            // fall through
          case 63: break;
          case 13: 
            { return new Symbol(sym.PARENTECIS_ABRE);
            } 
            // fall through
          case 64: break;
          case 14: 
            { return new Symbol(sym.PARENTECIS_CIERRA);
            } 
            // fall through
          case 65: break;
          case 15: 
            { return new Symbol(sym.CORCHETE_ABRE);
            } 
            // fall through
          case 66: break;
          case 16: 
            { return new Symbol(sym.CORCHETE_CIERRA);
            } 
            // fall through
          case 67: break;
          case 17: 
            { System.out.println("Se reconocio el comentario");/*ignore*/
            } 
            // fall through
          case 68: break;
          case 18: 
            { System.out.println("Se reconocio el LITERAL CADENA: " + yytext()); return new Symbol(sym.LIT_CADENA);
            } 
            // fall through
          case 69: break;
          case 19: 
            { System.out.println("Se reconocio el Si"); return new Symbol(sym.SI);
            } 
            // fall through
          case 70: break;
          case 20: 
            { System.out.println("Se reconocio con_valor"); return new Symbol(sym.ASIGNACION);
            } 
            // fall through
          case 71: break;
          case 21: 
            { System.out.println("Se reconocio variable"); return new Symbol(sym.VARIABLE);
            } 
            // fall through
          case 72: break;
          case 22: 
            { System.out.println("Se reconocio el LITERAL caracter"); return new Symbol(sym.LIT_CARACTER);
            } 
            // fall through
          case 73: break;
          case 23: 
            { System.out.println("Se reconocio fin"); return new Symbol(sym.FIN);
            } 
            // fall through
          case 74: break;
          case 24: 
            { return new Symbol(sym.O_SI);
            } 
            // fall through
          case 75: break;
          case 25: 
            { System.out.println("Se reconocio el LITERAL booleana"); return new Symbol(sym.LIT_BOOLEAN);
            } 
            // fall through
          case 76: break;
          case 26: 
            { System.out.println("Se reconocio Segun"); return new Symbol(sym.SEGUN);
            } 
            // fall through
          case 77: break;
          case 27: 
            { System.out.println("Se reconocio hasta"); return new Symbol(sym.HASTA);
            } 
            // fall through
          case 78: break;
          case 28: 
            { System.out.println("Se reconocio el FinSi"); return new Symbol(sym.FIN_SI);
            } 
            // fall through
          case 79: break;
          case 29: 
            { System.out.println("Se reconocio inicio"); return new Symbol(sym.INICIO);
            } 
            // fall through
          case 80: break;
          case 30: 
            { System.out.println("Se reconocio el repetir"); return new Symbol(sym.REPETIR);
            } 
            // fall through
          case 81: break;
          case 31: 
            { System.out.println("Se reconocio metodo"); return new Symbol(sym.FUNCION);
            } 
            // fall through
          case 82: break;
          case 32: 
            { System.out.println("Se reconocio es igual"); return new Symbol(sym.ES_IGUAL);
            } 
            // fall through
          case 83: break;
          case 33: 
            { return new Symbol(sym.ENTONCES);
            } 
            // fall through
          case 84: break;
          case 34: 
            { System.out.println("Se reconocio el fin para"); return new Symbol(sym.FIN_PARA);
            } 
            // fall through
          case 85: break;
          case 35: 
            { System.out.println("Se reconocio ingresar"); return new Symbol(sym.INGRESAR);
            } 
            // fall through
          case 86: break;
          case 36: 
            { System.out.println("Se reconocio\"imprimir\""); return new Symbol(sym.IMPRIMIR);
            } 
            // fall through
          case 87: break;
          case 37: 
            { System.out.println("Se reconocio el mientras"); return new Symbol(sym.MIENTRAS);
            } 
            // fall through
          case 88: break;
          case 38: 
            { return new Symbol(sym.POTENCIA);
            } 
            // fall through
          case 89: break;
          case 39: 
            { System.out.println("Se reconocio fin_segun"); return new Symbol(sym.FIN_SEGUN);
            } 
            // fall through
          case 90: break;
          case 40: 
            { System.out.println("Se reconocio con_valor"); return new Symbol(sym.CON_VALOR);
            } 
            // fall through
          case 91: break;
          case 41: 
            { System.out.println("Se reconocio el hasta_que"); return new Symbol(sym.HASTA_QUE);
            } 
            // fall through
          case 92: break;
          case 42: 
            { System.out.println("Se reconocio fin_metodo"); return new Symbol(sym.FIN_METODO);
            } 
            // fall through
          case 93: break;
          case 43: 
            { System.out.println("Se reconocio metodo"); return new Symbol(sym.FIN_FUNCION);
            } 
            // fall through
          case 94: break;
          case 44: 
            { System.out.println("Se reconocio\"imprimir_nl\""); return new Symbol(sym.IMPRIMIR_NL);
            } 
            // fall through
          case 95: break;
          case 45: 
            { return new Symbol(sym.ES_DIFERENTE);
            } 
            // fall through
          case 96: break;
          case 46: 
            { System.out.println("Se reconocio el fin_mientras"); return new Symbol(sym.FIN_MIENTRAS);
            } 
            // fall through
          case 97: break;
          case 47: 
            { System.out.println("Se reconocio Menor o igual "); return new Symbol(sym.MENOR_O_IGUAL);
            } 
            // fall through
          case 98: break;
          case 48: 
            { return new Symbol(sym.MAYOR_O_IGUAL);
            } 
            // fall through
          case 99: break;
          case 49: 
            { System.out.println("Se reconocio con_parametros"); return new Symbol(sym.CON_PARAMETROS);
            } 
            // fall through
          case 100: break;
          case 50: 
            { return new Symbol(sym.DE_LO_CONTRARIO);
            } 
            // fall through
          case 101: break;
          case 51: 
            { System.out.println("Se reconocio: con incremental"); return new Symbol(sym.CON_INCREMENTAL);
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

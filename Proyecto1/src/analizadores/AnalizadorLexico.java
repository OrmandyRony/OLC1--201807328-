/* The following code was generated by JFlex 1.7.0 */

/* Analizador lexico */
package analizadores;
import java_cup.runtime.*;

/* Seccion de declaraciones*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexico.jflex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\61\1\1\1\2\22\0\1\1\1\0\1\25"+
    "\1\0\1\22\2\0\1\21\2\0\1\5\2\0\1\40\1\11\1\4"+
    "\1\16\1\17\1\20\2\6\1\13\1\12\2\14\1\15\1\0\1\53"+
    "\2\0\1\41\1\57\1\0\1\32\1\50\1\45\1\31\1\27\1\34"+
    "\1\46\1\55\1\43\2\7\1\35\1\47\1\44\1\33\1\60\1\7"+
    "\1\30\1\37\1\52\1\51\1\26\2\7\1\54\1\7\4\0\1\10"+
    "\1\0\1\32\1\50\1\45\1\31\1\27\1\34\1\46\1\55\1\43"+
    "\2\7\1\35\1\47\1\44\1\33\1\60\1\7\1\30\1\37\1\52"+
    "\1\51\1\26\2\7\1\54\1\7\1\23\1\0\1\24\7\0\1\61"+
    "\71\0\1\56\160\0\2\42\115\0\1\36\u1ea8\0\1\61\1\61\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\17\1\1\4\1\1"+
    "\1\5\1\6\1\7\6\0\1\10\10\0\1\11\1\12"+
    "\11\0\2\7\2\0\1\3\1\13\1\14\7\0\1\15"+
    "\27\0\1\16\12\0\1\17\13\0\1\20\1\0\1\21"+
    "\7\0\1\22\1\23\1\0\1\24\6\0\1\25\1\26"+
    "\2\0\1\27\1\0\1\30\20\0\1\31\1\0\1\32"+
    "\1\33\2\0\1\34\1\35\1\36\5\0\1\37\1\0"+
    "\1\40\11\0\1\41\2\0\1\42\4\0\1\43\1\44"+
    "\1\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\62\0\u03e8\0\62"+
    "\0\62\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u015e"+
    "\0\62\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\62\0\62\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e"+
    "\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\62\0\u08ca\0\u08fc"+
    "\0\u047e\0\62\0\62\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\62\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\62\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\62\0\u1356\0\62\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\62\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\62\0\62\0\u16a8"+
    "\0\u16da\0\62\0\u170c\0\62\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\62\0\u1a5e\0\62\0\62"+
    "\0\u1a90\0\u1ac2\0\62\0\u1af4\0\62\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\u1bee\0\62\0\u1c20\0\62\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\62\0\u1e14"+
    "\0\u1e46\0\62\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\62\0\62"+
    "\0\u1f40\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\2\1\6\1\2"+
    "\1\7\1\2\7\6\1\10\3\2\1\11\1\12\1\13"+
    "\1\2\1\14\1\2\1\15\1\16\1\2\2\17\1\20"+
    "\1\2\2\21\1\22\1\23\1\2\1\24\1\25\2\2"+
    "\1\26\1\2\1\27\1\30\1\31\1\2\66\0\1\3"+
    "\62\0\1\32\1\33\62\0\1\6\2\0\1\34\7\6"+
    "\50\0\1\35\16\0\10\35\1\0\1\35\3\0\10\35"+
    "\1\0\2\35\2\0\1\35\1\0\22\36\1\37\37\36"+
    "\25\40\1\41\34\40\27\0\1\42\70\0\2\43\4\0"+
    "\1\44\44\0\1\45\42\0\1\46\103\0\1\47\7\0"+
    "\2\50\45\0\1\51\12\0\2\52\57\0\1\53\64\0"+
    "\1\54\2\0\1\55\63\0\1\56\42\0\1\57\1\60"+
    "\55\0\1\61\2\0\1\62\62\0\1\63\60\0\1\64"+
    "\27\0\2\32\1\65\1\66\56\32\5\67\1\70\54\67"+
    "\6\0\1\71\3\0\7\71\47\0\2\35\1\72\1\0"+
    "\7\35\5\0\10\35\1\0\1\35\3\0\10\35\1\0"+
    "\2\35\2\0\1\35\22\0\1\73\61\0\1\73\1\0"+
    "\1\74\66\0\1\75\41\0\1\76\123\0\1\77\17\0"+
    "\1\100\107\0\2\101\57\0\1\102\70\0\1\103\63\0"+
    "\1\104\55\0\2\105\2\0\1\106\73\0\1\107\50\0"+
    "\1\110\42\0\1\111\1\112\74\0\1\113\2\0\1\114"+
    "\56\0\1\115\71\0\1\116\40\0\1\117\73\0\1\120"+
    "\17\0\1\66\56\0\5\67\1\121\54\67\4\0\1\66"+
    "\1\70\66\0\1\122\1\0\1\123\1\124\1\0\1\125"+
    "\73\0\1\126\61\0\1\127\10\0\2\130\51\0\1\131"+
    "\63\0\1\132\66\0\2\133\54\0\2\134\32\0\1\135"+
    "\122\0\1\136\55\0\1\137\44\0\1\140\61\0\1\141"+
    "\60\0\1\142\64\0\1\143\56\0\1\144\42\0\1\145"+
    "\104\0\1\146\61\0\1\147\61\0\1\150\63\0\1\151"+
    "\53\0\1\152\32\0\4\67\1\66\1\121\54\67\12\0"+
    "\4\153\52\0\1\153\3\0\7\153\55\0\3\153\61\0"+
    "\2\123\1\154\73\0\1\155\71\0\2\156\64\0\1\157"+
    "\57\0\1\160\50\0\1\161\61\0\1\162\64\0\2\163"+
    "\66\0\1\164\57\0\2\165\45\0\1\166\74\0\2\167"+
    "\46\0\1\170\76\0\1\171\60\0\1\172\43\0\1\173"+
    "\63\0\1\174\61\0\1\175\60\0\1\176\62\0\1\177"+
    "\55\0\1\36\53\0\3\153\72\0\1\200\64\0\1\201"+
    "\76\0\1\202\55\0\1\203\24\0\1\204\100\0\1\205"+
    "\12\0\2\206\51\0\1\207\64\0\2\210\71\0\1\211"+
    "\45\0\1\212\100\0\1\213\41\0\1\214\61\0\1\215"+
    "\37\0\1\216\61\0\1\217\103\0\1\220\56\0\1\221"+
    "\61\0\1\222\64\0\1\223\56\0\1\224\77\0\1\225"+
    "\62\0\1\226\45\0\1\227\71\0\2\230\45\0\1\231"+
    "\67\0\1\232\57\0\1\233\61\0\1\234\72\0\1\235"+
    "\45\0\1\134\61\0\1\236\66\0\1\237\62\0\2\240"+
    "\55\0\1\241\77\0\1\242\40\0\1\243\61\0\1\244"+
    "\61\0\1\245\64\0\1\246\36\0\1\247\61\0\1\250"+
    "\100\0\1\251\76\0\1\252\61\0\1\253\25\0\1\254"+
    "\101\0\1\255\73\0\2\256\60\0\2\257\62\0\1\260"+
    "\67\0\1\261\53\0\1\262\63\0\1\263\61\0\1\264"+
    "\65\0\1\265\37\0\1\266\66\0\1\267\75\0\1\270"+
    "\61\0\1\271\37\0\1\272\64\0\1\273\61\0\1\274"+
    "\61\0\1\275\57\0\1\276\66\0\1\277\61\0\1\300"+
    "\66\0\2\301\51\0\1\302\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8050];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\22\1\1\11\1\1\2\11\1\1\6\0"+
    "\1\11\10\0\2\11\11\0\1\1\1\11\2\0\1\1"+
    "\2\11\7\0\1\1\27\0\1\11\12\0\1\11\13\0"+
    "\1\11\1\0\1\11\7\0\2\1\1\0\1\11\6\0"+
    "\2\11\2\0\1\11\1\0\1\11\20\0\1\11\1\0"+
    "\2\11\2\0\1\11\1\1\1\11\5\0\1\11\1\0"+
    "\1\11\11\0\1\11\2\0\1\11\4\0\2\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico : " +yytext() + " Linea: " + (yyline + 1) + 
        " Columna: " + (yycolumn + 1));
            } 
            // fall through
          case 38: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 39: break;
          case 3: 
            { System.out.println("Se reconocio literalNumero"); return new Symbol(sym.LIT_NUMERO);
            } 
            // fall through
          case 40: break;
          case 4: 
            { System.out.println("Se reconocio punto y coma"); return new Symbol(sym.PUNTO_COMA);
            } 
            // fall through
          case 41: break;
          case 5: 
            { System.out.println("Se reconocio ¿"); return new Symbol(sym.INTERROGACION_ABRE);
            } 
            // fall through
          case 42: break;
          case 6: 
            { System.out.println("Se reconocio ?"); return new Symbol(sym.INTERROGACION_CIERRA);
            } 
            // fall through
          case 43: break;
          case 7: 
            { System.out.println("Se reconocio el comentario");/*ignore*/
            } 
            // fall through
          case 44: break;
          case 8: 
            { System.out.println("Se reconocio el LITERAL CADENA: " + yytext()); return new Symbol(sym.LIT_CADENA);
            } 
            // fall through
          case 45: break;
          case 9: 
            { System.out.println("Se reconocio el Si"); return new Symbol(sym.SI);
            } 
            // fall through
          case 46: break;
          case 10: 
            { System.out.println("Se reconocio con_valor"); return new Symbol(sym.ASIGNACION);
            } 
            // fall through
          case 47: break;
          case 11: 
            { System.out.println("Se reconocio variable"); return new Symbol(sym.VARIABLE);
            } 
            // fall through
          case 48: break;
          case 12: 
            { System.out.println("Se reconocio el LITERAL caracter"); return new Symbol(sym.LIT_CARACTER);
            } 
            // fall through
          case 49: break;
          case 13: 
            { System.out.println("Se reconocio fin"); return new Symbol(sym.FIN);
            } 
            // fall through
          case 50: break;
          case 14: 
            { return new Symbol(sym.O_SI);
            } 
            // fall through
          case 51: break;
          case 15: 
            { System.out.println("Se reconocio como"); return new Symbol(sym.COMO);
            } 
            // fall through
          case 52: break;
          case 16: 
            { System.out.println("Se reconocio el LITERAL booleana"); return new Symbol(sym.LIT_BOOLEAN);
            } 
            // fall through
          case 53: break;
          case 17: 
            { System.out.println("Se reconocio Segun"); return new Symbol(sym.SEGUN);
            } 
            // fall through
          case 54: break;
          case 18: 
            { return new Symbol(sym.MENOR);
            } 
            // fall through
          case 55: break;
          case 19: 
            { return new Symbol(sym.MAYOR);
            } 
            // fall through
          case 56: break;
          case 20: 
            { System.out.println("Se reconocio Hacer"); return new Symbol(sym.HACER);
            } 
            // fall through
          case 57: break;
          case 21: 
            { System.out.println("Se reconocio el FinSi"); return new Symbol(sym.FIN_SI);
            } 
            // fall through
          case 58: break;
          case 22: 
            { System.out.println("Se reconocio inicio"); return new Symbol(sym.INICIO);
            } 
            // fall through
          case 59: break;
          case 23: 
            { System.out.println("Se reconocio numero"); return new Symbol(sym.NUMERO);
            } 
            // fall through
          case 60: break;
          case 24: 
            { return new Symbol(sym.CADENA);
            } 
            // fall through
          case 61: break;
          case 25: 
            { return new Symbol(sym.BOOLEAN);
            } 
            // fall through
          case 62: break;
          case 26: 
            { System.out.println("Se reconocio es igual"); return new Symbol(sym.ES_IGUAL);
            } 
            // fall through
          case 63: break;
          case 27: 
            { return new Symbol(sym.ENTONCES);
            } 
            // fall through
          case 64: break;
          case 28: 
            { System.out.println("Se reconocio ingresar"); return new Symbol(sym.INGRESAR);
            } 
            // fall through
          case 65: break;
          case 29: 
            { System.out.println("Se reconocio\"imprimir\""); return new Symbol(sym.IMPRIMIR);
            } 
            // fall through
          case 66: break;
          case 30: 
            { return new Symbol(sym.CARACTER);
            } 
            // fall through
          case 67: break;
          case 31: 
            { System.out.println("Se reconocio fin_segun"); return new Symbol(sym.FIN_SEGUN);
            } 
            // fall through
          case 68: break;
          case 32: 
            { System.out.println("Se reconocio con_valor"); return new Symbol(sym.CON_VALOR);
            } 
            // fall through
          case 69: break;
          case 33: 
            { System.out.println("Se reconocio\"imprimir_nl\""); return new Symbol(sym.IMPRIMIR_NL);
            } 
            // fall through
          case 70: break;
          case 34: 
            { return new Symbol(sym.ES_DIFERENTE);
            } 
            // fall through
          case 71: break;
          case 35: 
            { System.out.println("Se reconocio Menor o igual "); return new Symbol(sym.MENOR_O_IGUAL);
            } 
            // fall through
          case 72: break;
          case 36: 
            { return new Symbol(sym.MAYOR_O_IGUAL);
            } 
            // fall through
          case 73: break;
          case 37: 
            { return new Symbol(sym.DE_LO_CONTRARIO);
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
